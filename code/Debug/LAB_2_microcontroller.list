
LAB_2_microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a168  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a380  0800a380  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a380  0800a380  0001a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a388  0800a388  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000010  0800a3a0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800a3a0  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aa7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d37  00000000  00000000  00038b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  0003cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f76  00000000  00000000  0003de6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c0b  00000000  00000000  00066de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001147ac  00000000  00000000  0007f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d88  00000000  00000000  0019419c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00199f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a328 	.word	0x0800a328

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800a328 	.word	0x0800a328

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f001 fc11 	bl	800257a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f8a8 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fbb8 	bl	80014d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 fb7c 	bl	800145c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d64:	f000 f976 	bl	8001054 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d68:	f000 f8ec 	bl	8000f44 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000d6c:	f000 fb28 	bl	80013c0 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d70:	f000 f9ba 	bl	80010e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d74:	f000 face 	bl	8001314 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d78:	f000 fa7e 	bl	8001278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d7c:	213c      	movs	r1, #60	; 0x3c
 8000d7e:	483d      	ldr	r0, [pc, #244]	; (8000e74 <main+0x124>)
 8000d80:	f005 fd5c 	bl	800683c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d84:	483c      	ldr	r0, [pc, #240]	; (8000e78 <main+0x128>)
 8000d86:	f005 fac7 	bl	8006318 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	483b      	ldr	r0, [pc, #236]	; (8000e7c <main+0x12c>)
 8000d8e:	f005 fb9d 	bl	80064cc <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d92:	217f      	movs	r1, #127	; 0x7f
 8000d94:	483a      	ldr	r0, [pc, #232]	; (8000e80 <main+0x130>)
 8000d96:	f003 fa1d 	bl	80041d4 <HAL_ADCEx_Calibration_Start>
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	4939      	ldr	r1, [pc, #228]	; (8000e84 <main+0x134>)
 8000d9e:	4838      	ldr	r0, [pc, #224]	; (8000e80 <main+0x130>)
 8000da0:	f002 f8a0 	bl	8002ee4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000da4:	4838      	ldr	r0, [pc, #224]	; (8000e88 <main+0x138>)
 8000da6:	f005 fab7 	bl	8006318 <HAL_TIM_Base_Start_IT>

  PID.Kp = 0.001;
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <main+0x13c>)
 8000dac:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <main+0x140>)
 8000dae:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <main+0x13c>)
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <main+0x13c>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4832      	ldr	r0, [pc, #200]	; (8000e8c <main+0x13c>)
 8000dc4:	f009 fa4e 	bl	800a264 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000dc8:	482c      	ldr	r0, [pc, #176]	; (8000e7c <main+0x12c>)
 8000dca:	f005 fa35 	bl	8006238 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dce:	2104      	movs	r1, #4
 8000dd0:	482a      	ldr	r0, [pc, #168]	; (8000e7c <main+0x12c>)
 8000dd2:	f005 fb7b 	bl	80064cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <main+0x12c>)
 8000dda:	f005 fb77 	bl	80064cc <HAL_TIM_PWM_Start>
  UARTInterruptConfig();
 8000dde:	f001 f8bd 	bl	8001f5c <UARTInterruptConfig>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <main+0x124>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <main+0x144>)
 8000dea:	6013      	str	r3, [r2, #0]
	  Average_ADC_Value();
 8000dec:	f000 fefe 	bl	8001bec <Average_ADC_Value>
	  led2();
 8000df0:	f000 fc16 	bl	8001620 <led2>
	  CurrentTime = micros();
 8000df4:	f001 f868 	bl	8001ec8 <micros>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4926      	ldr	r1, [pc, #152]	; (8000e98 <main+0x148>)
 8000dfe:	e9c1 2300 	strd	r2, r3, [r1]
	  if(CurrentTime > TimeStamp)
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <main+0x148>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	4924      	ldr	r1, [pc, #144]	; (8000e9c <main+0x14c>)
 8000e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e14:	d218      	bcs.n	8000e48 <main+0xf8>
	  {
		  TimeStamp = CurrentTime + 1000;// 200 HZ
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <main+0x148>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000e20:	f143 0500 	adc.w	r5, r3, #0
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <main+0x14c>)
 8000e26:	e9c3 4500 	strd	r4, r5, [r3]
		  Adc_to_Matlab();
 8000e2a:	f001 f867 	bl	8001efc <Adc_to_Matlab>
		  Error = (uint16_t)(RxBuffer[2]<< 8) + (uint8_t)(RxBuffer[1]);
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <main+0x150>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <main+0x150>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <main+0x154>)
 8000e46:	801a      	strh	r2, [r3, #0]
  }
	  if(mode == 1){
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <main+0x158>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d102      	bne.n	8000e56 <main+0x106>
		  LAB2PART1();
 8000e50:	f000 fc10 	bl	8001674 <LAB2PART1>
 8000e54:	e7c5      	b.n	8000de2 <main+0x92>
	  }
	  else if(mode == 2){
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <main+0x158>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d102      	bne.n	8000e64 <main+0x114>
		  LAB2PART2();
 8000e5e:	f000 fcff 	bl	8001860 <LAB2PART2>
 8000e62:	e7be      	b.n	8000de2 <main+0x92>
	  }
	  else if(mode == 3){
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <main+0x158>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d1ba      	bne.n	8000de2 <main+0x92>
		  LAB2PART3();
 8000e6c:	f000 fddc 	bl	8001a28 <LAB2PART3>
  {
 8000e70:	e7b7      	b.n	8000de2 <main+0x92>
 8000e72:	bf00      	nop
 8000e74:	200002e4 	.word	0x200002e4
 8000e78:	20000330 	.word	0x20000330
 8000e7c:	2000024c 	.word	0x2000024c
 8000e80:	2000002c 	.word	0x2000002c
 8000e84:	2000037c 	.word	0x2000037c
 8000e88:	20000298 	.word	0x20000298
 8000e8c:	200003a8 	.word	0x200003a8
 8000e90:	3a83126f 	.word	0x3a83126f
 8000e94:	2000039c 	.word	0x2000039c
 8000e98:	20000400 	.word	0x20000400
 8000e9c:	200003f8 	.word	0x200003f8
 8000ea0:	200003e8 	.word	0x200003e8
 8000ea4:	2000040a 	.word	0x2000040a
 8000ea8:	20000000 	.word	0x20000000

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b094      	sub	sp, #80	; 0x50
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	2238      	movs	r2, #56	; 0x38
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f009 fa08 	bl	800a2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f004 f92a 	bl	8005128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eee:	2355      	movs	r3, #85	; 0x55
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 f9c4 	bl	8005290 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f0e:	f001 f855 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2303      	movs	r3, #3
 8000f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2104      	movs	r1, #4
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fcc2 	bl	80058b4 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f36:	f001 f841 	bl	8001fbc <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3750      	adds	r7, #80	; 0x50
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f009 f9b7 	bl	800a2d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4b39      	ldr	r3, [pc, #228]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_ADC1_Init+0x104>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	481e      	ldr	r0, [pc, #120]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fce:	f001 fdcd 	bl	8002b6c <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fd8:	f000 fff0 	bl	8001fbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_ADC1_Init+0x104>)
 8000fe8:	f003 f988 	bl	80042fc <HAL_ADCEx_MultiModeConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ff2:	f000 ffe3 	bl	8001fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_ADC1_Init+0x108>)
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ffe:	2307      	movs	r3, #7
 8001000:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001002:	237f      	movs	r3, #127	; 0x7f
 8001004:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001006:	2304      	movs	r3, #4
 8001008:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC1_Init+0x104>)
 8001014:	f002 fac2 	bl	800359c <HAL_ADC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800101e:	f000 ffcd 	bl	8001fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_ADC1_Init+0x10c>)
 8001024:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001026:	230c      	movs	r3, #12
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_ADC1_Init+0x104>)
 8001030:	f002 fab4 	bl	800359c <HAL_ADC_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800103a:	f000 ffbf 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	; 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000002c 	.word	0x2000002c
 800104c:	04300002 	.word	0x04300002
 8001050:	08600004 	.word	0x08600004

08001054 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 800105a:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <MX_LPUART1_UART_Init+0x90>)
 800105c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 8001098:	f006 fe10 	bl	8007cbc <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010a2:	f000 ff8b 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 80010aa:	f009 f810 	bl	800a0ce <HAL_UARTEx_SetTxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010b4:	f000 ff82 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f009 f845 	bl	800a14a <HAL_UARTEx_SetRxFifoThreshold>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010c6:	f000 ff79 	bl	8001fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_LPUART1_UART_Init+0x8c>)
 80010cc:	f008 ffc6 	bl	800a05c <HAL_UARTEx_DisableFifoMode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010d6:	f000 ff71 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200000f8 	.word	0x200000f8
 80010e4:	40008000 	.word	0x40008000

080010e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09c      	sub	sp, #112	; 0x70
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2234      	movs	r2, #52	; 0x34
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f009 f8d4 	bl	800a2d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <MX_TIM1_Init+0x188>)
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <MX_TIM1_Init+0x18c>)
 800112c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <MX_TIM1_Init+0x188>)
 8001130:	22a9      	movs	r2, #169	; 0xa9
 8001132:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <MX_TIM1_Init+0x188>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800113a:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <MX_TIM1_Init+0x188>)
 800113c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <MX_TIM1_Init+0x188>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <MX_TIM1_Init+0x188>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <MX_TIM1_Init+0x188>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001154:	4846      	ldr	r0, [pc, #280]	; (8001270 <MX_TIM1_Init+0x188>)
 8001156:	f005 f817 	bl	8006188 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 ff2c 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800116e:	4619      	mov	r1, r3
 8001170:	483f      	ldr	r0, [pc, #252]	; (8001270 <MX_TIM1_Init+0x188>)
 8001172:	f005 fe55 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800117c:	f000 ff1e 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001180:	483b      	ldr	r0, [pc, #236]	; (8001270 <MX_TIM1_Init+0x188>)
 8001182:	f005 f941 	bl	8006408 <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800118c:	f000 ff16 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800119c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a0:	4619      	mov	r1, r3
 80011a2:	4833      	ldr	r0, [pc, #204]	; (8001270 <MX_TIM1_Init+0x188>)
 80011a4:	f006 fc1a 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ae:	f000 ff05 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	2300      	movs	r3, #0
 80011bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <MX_TIM1_Init+0x188>)
 80011d8:	f005 fd0e 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011e2:	f000 feeb 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ea:	2204      	movs	r2, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <MX_TIM1_Init+0x188>)
 80011f0:	f005 fd02 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011fa:	f000 fedf 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001202:	2208      	movs	r2, #8
 8001204:	4619      	mov	r1, r3
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <MX_TIM1_Init+0x188>)
 8001208:	f005 fcf6 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001212:	f000 fed3 	bl	8001fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800123c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM1_Init+0x188>)
 8001254:	f006 fc58 	bl	8007b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800125e:	f000 fead 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001262:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM1_Init+0x188>)
 8001264:	f001 f8a8 	bl	80023b8 <HAL_TIM_MspPostInit>

}
 8001268:	bf00      	nop
 800126a:	3770      	adds	r7, #112	; 0x70
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000024c 	.word	0x2000024c
 8001274:	40012c00 	.word	0x40012c00

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM2_Init+0x98>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM2_Init+0x98>)
 80012a0:	22a9      	movs	r2, #169	; 0xa9
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM2_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM2_Init+0x98>)
 80012c0:	f004 ff62 	bl	8006188 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ca:	f000 fe77 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM2_Init+0x98>)
 80012dc:	f005 fda0 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012e6:	f000 fe69 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM2_Init+0x98>)
 80012f8:	f006 fb70 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 fe5b 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000298 	.word	0x20000298

08001314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f008 ffd4 	bl	800a2d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <MX_TIM3_Init+0xa8>)
 8001336:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_TIM3_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001346:	f640 32ff 	movw	r2, #3071	; 0xbff
 800134a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM3_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001358:	2303      	movs	r3, #3
 800135a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001360:	2301      	movs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001370:	2301      	movs	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001384:	f005 f9b4 	bl	80066f0 <HAL_TIM_Encoder_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800138e:	f000 fe15 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_TIM3_Init+0xa4>)
 80013a0:	f006 fb1c 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013aa:	f000 fe07 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3730      	adds	r7, #48	; 0x30
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002e4 	.word	0x200002e4
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM5_Init+0x94>)
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <MX_TIM5_Init+0x98>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_TIM5_Init+0x94>)
 80013e6:	22a9      	movs	r2, #169	; 0xa9
 80013e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM5_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM5_Init+0x94>)
 80013f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM5_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM5_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM5_Init+0x94>)
 8001406:	f004 febf 	bl	8006188 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 fdd4 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM5_Init+0x94>)
 8001422:	f005 fcfd 	bl	8006e20 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 fdc6 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM5_Init+0x94>)
 800143e:	f006 facd 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 fdb8 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000330 	.word	0x20000330
 8001458:	40000c00 	.word	0x40000c00

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_DMA_Init+0x70>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	4a19      	ldr	r2, [pc, #100]	; (80014cc <MX_DMA_Init+0x70>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6493      	str	r3, [r2, #72]	; 0x48
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_DMA_Init+0x70>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_DMA_Init+0x70>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_DMA_Init+0x70>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6493      	str	r3, [r2, #72]	; 0x48
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_DMA_Init+0x70>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	200b      	movs	r0, #11
 8001498:	f003 f913 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800149c:	200b      	movs	r0, #11
 800149e:	f003 f92a 	bl	80046f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200c      	movs	r0, #12
 80014a8:	f003 f90b 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014ac:	200c      	movs	r0, #12
 80014ae:	f003 f922 	bl	80046f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	200d      	movs	r0, #13
 80014b8:	f003 f903 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014bc:	200d      	movs	r0, #13
 80014be:	f003 f91a 	bl	80046f6 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <MX_GPIO_Init+0xfc>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a38      	ldr	r2, [pc, #224]	; (80015cc <MX_GPIO_Init+0xfc>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <MX_GPIO_Init+0xfc>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_GPIO_Init+0xfc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <MX_GPIO_Init+0xfc>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <MX_GPIO_Init+0xfc>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_GPIO_Init+0xfc>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2120      	movs	r1, #32
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f003 fda1 	bl	8005094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2130      	movs	r1, #48	; 0x30
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <MX_GPIO_Init+0x100>)
 8001558:	f003 fd9c 	bl	8005094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_GPIO_Init+0x104>)
 8001574:	f003 fc0c 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001578:	2320      	movs	r3, #32
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f003 fbfd 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001596:	2330      	movs	r3, #48	; 0x30
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <MX_GPIO_Init+0x100>)
 80015ae:	f003 fbef 	bl	8004d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2028      	movs	r0, #40	; 0x28
 80015b8:	f003 f883 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f003 f89a 	bl	80046f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	48000800 	.word	0x48000800

080015d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e8:	d112      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x38>
		if (mode == 1){
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_GPIO_EXTI_Callback+0x44>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d103      	bne.n	80015fa <HAL_GPIO_EXTI_Callback+0x22>
				mode = 2;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_GPIO_EXTI_Callback+0x44>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	801a      	strh	r2, [r3, #0]
		else {
				mode = 1;

			}
		}
}
 80015f8:	e00a      	b.n	8001610 <HAL_GPIO_EXTI_Callback+0x38>
		else if (mode == 2){
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_GPIO_EXTI_Callback+0x44>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d103      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x32>
				mode = 3;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_GPIO_EXTI_Callback+0x44>)
 8001604:	2203      	movs	r2, #3
 8001606:	801a      	strh	r2, [r3, #0]
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_EXTI_Callback+0x38>
				mode = 1;
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_GPIO_EXTI_Callback+0x44>)
 800160c:	2201      	movs	r2, #1
 800160e:	801a      	strh	r2, [r3, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	20000000 	.word	0x20000000

08001620 <led2>:
void led2(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	if (mode == 1){
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <led2+0x50>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <led2+0x1a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2120      	movs	r1, #32
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f003 fd2e 	bl	8005094 <HAL_GPIO_WritePin>
	}
	else if (mode == 3) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}
}
 8001638:	e017      	b.n	800166a <led2+0x4a>
	else if (mode == 2){
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <led2+0x50>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d106      	bne.n	8001650 <led2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f003 fd23 	bl	8005094 <HAL_GPIO_WritePin>
}
 800164e:	e00c      	b.n	800166a <led2+0x4a>
	else if (mode == 3) {
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <led2+0x50>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d108      	bne.n	800166a <led2+0x4a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001658:	2120      	movs	r1, #32
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f003 fd31 	bl	80050c4 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001666:	f000 fff9 	bl	800265c <HAL_Delay>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000

08001674 <LAB2PART1>:
void LAB2PART1(){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	if(Vfeedback > 1){
 8001678:	4b70      	ldr	r3, [pc, #448]	; (800183c <LAB2PART1+0x1c8>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	dd4d      	ble.n	8001728 <LAB2PART1+0xb4>
		 		  setSpd = (Vfeedback/360)*(1000-600)+600;
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <LAB2PART1+0x1c8>)
 800168e:	ed93 7a00 	vldr	s14, [r3]
 8001692:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001840 <LAB2PART1+0x1cc>
 8001696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001844 <LAB2PART1+0x1d0>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001848 <LAB2PART1+0x1d4>
 80016a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016aa:	4b68      	ldr	r3, [pc, #416]	; (800184c <LAB2PART1+0x1d8>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < 180){
 80016b0:	4b62      	ldr	r3, [pc, #392]	; (800183c <LAB2PART1+0x1c8>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001850 <LAB2PART1+0x1dc>
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d513      	bpl.n	80016ec <LAB2PART1+0x78>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2110      	movs	r1, #16
 80016c8:	4862      	ldr	r0, [pc, #392]	; (8001854 <LAB2PART1+0x1e0>)
 80016ca:	f003 fce3 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	4860      	ldr	r0, [pc, #384]	; (8001854 <LAB2PART1+0x1e0>)
 80016d4:	f003 fcde 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80016d8:	4b5c      	ldr	r3, [pc, #368]	; (800184c <LAB2PART1+0x1d8>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <LAB2PART1+0x1e4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e6:	ee17 2a90 	vmov	r2, s15
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > 180){
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <LAB2PART1+0x1c8>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001850 <LAB2PART1+0x1dc>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd13      	ble.n	8001728 <LAB2PART1+0xb4>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2110      	movs	r1, #16
 8001704:	4853      	ldr	r0, [pc, #332]	; (8001854 <LAB2PART1+0x1e0>)
 8001706:	f003 fcc5 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2120      	movs	r1, #32
 800170e:	4851      	ldr	r0, [pc, #324]	; (8001854 <LAB2PART1+0x1e0>)
 8001710:	f003 fcc0 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <LAB2PART1+0x1d8>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	4b4f      	ldr	r3, [pc, #316]	; (8001858 <LAB2PART1+0x1e4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 2a90 	vmov	r2, s15
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < -1){
 8001728:	4b44      	ldr	r3, [pc, #272]	; (800183c <LAB2PART1+0x1c8>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d54f      	bpl.n	80017dc <LAB2PART1+0x168>
		 		  setSpd = (-Vfeedback/360)*(1000-600)+600;
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <LAB2PART1+0x1c8>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	eeb1 7a67 	vneg.f32	s14, s15
 8001746:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001840 <LAB2PART1+0x1cc>
 800174a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001844 <LAB2PART1+0x1d0>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001848 <LAB2PART1+0x1d4>
 800175a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <LAB2PART1+0x1d8>)
 8001760:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < -180){
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <LAB2PART1+0x1c8>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800185c <LAB2PART1+0x1e8>
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d513      	bpl.n	80017a0 <LAB2PART1+0x12c>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2110      	movs	r1, #16
 800177c:	4835      	ldr	r0, [pc, #212]	; (8001854 <LAB2PART1+0x1e0>)
 800177e:	f003 fc89 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4833      	ldr	r0, [pc, #204]	; (8001854 <LAB2PART1+0x1e0>)
 8001788:	f003 fc84 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <LAB2PART1+0x1d8>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <LAB2PART1+0x1e4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 2a90 	vmov	r2, s15
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > -180){
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <LAB2PART1+0x1c8>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800185c <LAB2PART1+0x1e8>
 80017aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	dd13      	ble.n	80017dc <LAB2PART1+0x168>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	4826      	ldr	r0, [pc, #152]	; (8001854 <LAB2PART1+0x1e0>)
 80017ba:	f003 fc6b 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2120      	movs	r1, #32
 80017c2:	4824      	ldr	r0, [pc, #144]	; (8001854 <LAB2PART1+0x1e0>)
 80017c4:	f003 fc66 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <LAB2PART1+0x1d8>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <LAB2PART1+0x1e4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 2a90 	vmov	r2, s15
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < 1 && Vfeedback > -1)
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <LAB2PART1+0x1c8>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	d400      	bmi.n	80017f2 <LAB2PART1+0x17e>
		 		  setSpd = 0;
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
		 	  }
}
 80017f0:	e022      	b.n	8001838 <LAB2PART1+0x1c4>
	if(Vfeedback < 1 && Vfeedback > -1)
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <LAB2PART1+0x1c8>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	dc00      	bgt.n	8001808 <LAB2PART1+0x194>
}
 8001806:	e017      	b.n	8001838 <LAB2PART1+0x1c4>
		 		  setSpd = 0;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <LAB2PART1+0x1d8>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2110      	movs	r1, #16
 8001814:	480f      	ldr	r0, [pc, #60]	; (8001854 <LAB2PART1+0x1e0>)
 8001816:	f003 fc3d 	bl	8005094 <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2120      	movs	r1, #32
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <LAB2PART1+0x1e0>)
 8001820:	f003 fc38 	bl	8005094 <HAL_GPIO_WritePin>
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <LAB2PART1+0x1d8>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <LAB2PART1+0x1e4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 2a90 	vmov	r2, s15
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200003d8 	.word	0x200003d8
 8001840:	43b40000 	.word	0x43b40000
 8001844:	43c80000 	.word	0x43c80000
 8001848:	44160000 	.word	0x44160000
 800184c:	200003e0 	.word	0x200003e0
 8001850:	43340000 	.word	0x43340000
 8001854:	48000400 	.word	0x48000400
 8001858:	2000024c 	.word	0x2000024c
 800185c:	c3340000 	.word	0xc3340000

08001860 <LAB2PART2>:
void LAB2PART2(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4864      	ldr	r0, [pc, #400]	; (80019fc <LAB2PART2+0x19c>)
 800186a:	f003 fc13 	bl	8005094 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2120      	movs	r1, #32
 8001872:	4862      	ldr	r0, [pc, #392]	; (80019fc <LAB2PART2+0x19c>)
 8001874:	f003 fc0e 	bl	8005094 <HAL_GPIO_WritePin>
	avg_adc_part2=avg_adc1;
 8001878:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <LAB2PART2+0x1a0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a61      	ldr	r2, [pc, #388]	; (8001a04 <LAB2PART2+0x1a4>)
 800187e:	6013      	str	r3, [r2, #0]
	if(Vfeedback2 > 1){
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <LAB2PART2+0x1a8>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800188a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001892:	dd41      	ble.n	8001918 <LAB2PART2+0xb8>
		 		  setSpd = (Vfeedback2/360)*(500-100)+100;
 8001894:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <LAB2PART2+0x1a8>)
 8001896:	ed93 7a00 	vldr	s14, [r3]
 800189a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001a0c <LAB2PART2+0x1ac>
 800189e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001a10 <LAB2PART2+0x1b0>
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018aa:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001a14 <LAB2PART2+0x1b4>
 80018ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <LAB2PART2+0x1b8>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < 180){
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <LAB2PART2+0x1a8>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001a1c <LAB2PART2+0x1bc>
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d50d      	bpl.n	80018e8 <LAB2PART2+0x88>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <LAB2PART2+0x1b8>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <LAB2PART2+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018da:	ee17 2a90 	vmov	r2, s15
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80018e0:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <LAB2PART2+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > 180){
 80018e8:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <LAB2PART2+0x1a8>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001a1c <LAB2PART2+0x1bc>
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	dd0d      	ble.n	8001918 <LAB2PART2+0xb8>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <LAB2PART2+0x1c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <LAB2PART2+0x1b8>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <LAB2PART2+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001912:	ee17 2a90 	vmov	r2, s15
 8001916:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < -1){
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <LAB2PART2+0x1a8>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d543      	bpl.n	80019b4 <LAB2PART2+0x154>
		 		  setSpd = (-Vfeedback2/360)*(500-100)+100;
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <LAB2PART2+0x1a8>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eeb1 7a67 	vneg.f32	s14, s15
 8001936:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001a0c <LAB2PART2+0x1ac>
 800193a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a10 <LAB2PART2+0x1b0>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a14 <LAB2PART2+0x1b4>
 800194a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <LAB2PART2+0x1b8>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < -180){
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <LAB2PART2+0x1a8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001a24 <LAB2PART2+0x1c4>
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d50d      	bpl.n	8001984 <LAB2PART2+0x124>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <LAB2PART2+0x1b8>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <LAB2PART2+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 2a90 	vmov	r2, s15
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <LAB2PART2+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > -180){
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <LAB2PART2+0x1a8>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001a24 <LAB2PART2+0x1c4>
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd0d      	ble.n	80019b4 <LAB2PART2+0x154>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <LAB2PART2+0x1c0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <LAB2PART2+0x1b8>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <LAB2PART2+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ae:	ee17 2a90 	vmov	r2, s15
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <LAB2PART2+0x1a8>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d400      	bmi.n	80019ca <LAB2PART2+0x16a>
		 	  {
		 		  setSpd = 0;
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		 	  }
}
 80019c8:	e016      	b.n	80019f8 <LAB2PART2+0x198>
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <LAB2PART2+0x1a8>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	dc00      	bgt.n	80019e0 <LAB2PART2+0x180>
}
 80019de:	e00b      	b.n	80019f8 <LAB2PART2+0x198>
		 		  setSpd = 0;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <LAB2PART2+0x1b8>)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <LAB2PART2+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <LAB2PART2+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	48000400 	.word	0x48000400
 8001a00:	20000390 	.word	0x20000390
 8001a04:	20000398 	.word	0x20000398
 8001a08:	200003dc 	.word	0x200003dc
 8001a0c:	43b40000 	.word	0x43b40000
 8001a10:	43c80000 	.word	0x43c80000
 8001a14:	42c80000 	.word	0x42c80000
 8001a18:	200003e0 	.word	0x200003e0
 8001a1c:	43340000 	.word	0x43340000
 8001a20:	2000024c 	.word	0x2000024c
 8001a24:	c3340000 	.word	0xc3340000

08001a28 <LAB2PART3>:

void LAB2PART3(){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	if(Error > 326.76){
 8001a3c:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001a46:	dd4d      	ble.n	8001ae4 <LAB2PART3+0xbc>
		 		  setSpd = (Error/32676)*(1000-600)+600;
 8001a48:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	4a62      	ldr	r2, [pc, #392]	; (8001bd8 <LAB2PART3+0x1b0>)
 8001a50:	fb82 1203 	smull	r1, r2, r2, r3
 8001a54:	1292      	asrs	r2, r2, #10
 8001a56:	17db      	asrs	r3, r3, #31
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <LAB2PART3+0x1b4>)
 8001a74:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Error < 16338){
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7e:	f643 72d1 	movw	r2, #16337	; 0x3fd1
 8001a82:	4293      	cmp	r3, r2
 8001a84:	dc13      	bgt.n	8001aae <LAB2PART3+0x86>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4855      	ldr	r0, [pc, #340]	; (8001be0 <LAB2PART3+0x1b8>)
 8001a8c:	f003 fb02 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2120      	movs	r1, #32
 8001a94:	4852      	ldr	r0, [pc, #328]	; (8001be0 <LAB2PART3+0x1b8>)
 8001a96:	f003 fafd 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <LAB2PART3+0x1b4>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa8:	ee17 2a90 	vmov	r2, s15
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Error > 16338){
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	f643 72d2 	movw	r2, #16338	; 0x3fd2
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dd13      	ble.n	8001ae4 <LAB2PART3+0xbc>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4847      	ldr	r0, [pc, #284]	; (8001be0 <LAB2PART3+0x1b8>)
 8001ac2:	f003 fae7 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2120      	movs	r1, #32
 8001aca:	4845      	ldr	r0, [pc, #276]	; (8001be0 <LAB2PART3+0x1b8>)
 8001acc:	f003 fae2 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <LAB2PART3+0x1b4>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ade:	ee17 2a90 	vmov	r2, s15
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Error < -326.76){
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	f513 7fa3 	cmn.w	r3, #326	; 0x146
 8001aee:	da49      	bge.n	8001b84 <LAB2PART3+0x15c>
		 		  setSpd = (-Error/32676)*(1000-600)+600;
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <LAB2PART3+0x1b0>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1292      	asrs	r2, r2, #10
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1a9b      	subs	r3, r3, r2
 8001b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <LAB2PART3+0x1b4>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Error < -16338){
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	4a30      	ldr	r2, [pc, #192]	; (8001be4 <LAB2PART3+0x1bc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	da13      	bge.n	8001b50 <LAB2PART3+0x128>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	482c      	ldr	r0, [pc, #176]	; (8001be0 <LAB2PART3+0x1b8>)
 8001b2e:	f003 fab1 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	482a      	ldr	r0, [pc, #168]	; (8001be0 <LAB2PART3+0x1b8>)
 8001b38:	f003 faac 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <LAB2PART3+0x1b4>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4a:	ee17 2a90 	vmov	r2, s15
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Error > -16338){
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <LAB2PART3+0x1c0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	db13      	blt.n	8001b84 <LAB2PART3+0x15c>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2110      	movs	r1, #16
 8001b60:	481f      	ldr	r0, [pc, #124]	; (8001be0 <LAB2PART3+0x1b8>)
 8001b62:	f003 fa97 	bl	8005094 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2120      	movs	r1, #32
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <LAB2PART3+0x1b8>)
 8001b6c:	f003 fa92 	bl	8005094 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <LAB2PART3+0x1b4>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7e:	ee17 2a90 	vmov	r2, s15
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Error < 326.76 && Error > -326.76)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001b8e:	dc1d      	bgt.n	8001bcc <LAB2PART3+0x1a4>
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <LAB2PART3+0x1ac>)
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	f513 7fa3 	cmn.w	r3, #326	; 0x146
 8001b9a:	db17      	blt.n	8001bcc <LAB2PART3+0x1a4>
		 	  {
		 		  setSpd = 0;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <LAB2PART3+0x1b4>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <LAB2PART3+0x1b8>)
 8001baa:	f003 fa73 	bl	8005094 <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <LAB2PART3+0x1b8>)
 8001bb4:	f003 fa6e 	bl	8005094 <HAL_GPIO_WritePin>
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <LAB2PART3+0x1b4>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <LAB2PART3+0x1a8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	ee17 2a90 	vmov	r2, s15
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
		 	  }
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000024c 	.word	0x2000024c
 8001bd4:	2000040a 	.word	0x2000040a
 8001bd8:	0805c425 	.word	0x0805c425
 8001bdc:	200003e0 	.word	0x200003e0
 8001be0:	48000400 	.word	0x48000400
 8001be4:	ffffc02e 	.word	0xffffc02e
 8001be8:	ffffc02f 	.word	0xffffc02f

08001bec <Average_ADC_Value>:

void Average_ADC_Value() {
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
    uint32_t sum_adc1 = 0, sum_adc2 = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	e015      	b.n	8001c2c <Average_ADC_Value+0x40>
        sum_adc1 += ADC_RawRead[i*2];
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <Average_ADC_Value+0x70>)
 8001c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
        sum_adc2 += ADC_RawRead[i*2+1];
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <Average_ADC_Value+0x70>)
 8001c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d9e6      	bls.n	8001c00 <Average_ADC_Value+0x14>
//        sum_adc3 += ADC_RawRead[i*3+2];
    }
    avg_adc1 = sum_adc1 / 5;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <Average_ADC_Value+0x74>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <Average_ADC_Value+0x78>)
 8001c3e:	6013      	str	r3, [r2, #0]
    avg_adc2 = sum_adc2 / 5;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <Average_ADC_Value+0x74>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <Average_ADC_Value+0x7c>)
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000037c 	.word	0x2000037c
 8001c60:	cccccccd 	.word	0xcccccccd
 8001c64:	20000390 	.word	0x20000390
 8001c68:	20000394 	.word	0x20000394
 8001c6c:	00000000 	.word	0x00000000

08001c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if (htim == &htim5 )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a83      	ldr	r2, [pc, #524]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	f040 80fb 	bne.w	8001e78 <HAL_TIM_PeriodElapsedCallback+0x208>
  {
	  ADCReadRaw = avg_adc2;
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	4b80      	ldr	r3, [pc, #512]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	  set_pos = (avg_adc1/4095.0)*360.0;
 8001c94:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fbff 	bl	800049c <__aeabi_ui2d>
 8001c9e:	a378      	add	r3, pc, #480	; (adr r3, 8001e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fd9e 	bl	80007e4 <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cb6:	f7fe fc6b 	bl	8000590 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe fe77 	bl	80009b4 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a74      	ldr	r2, [pc, #464]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001cca:	6013      	str	r3, [r2, #0]
	  pos = (ADCReadRaw/4095.0)*360.0;;
 8001ccc:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc05 	bl	80004e0 <__aeabi_f2d>
 8001cd6:	a36a      	add	r3, pc, #424	; (adr r3, 8001e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fd82 	bl	80007e4 <__aeabi_ddiv>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cee:	f7fe fc4f 	bl	8000590 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe fe5b 	bl	80009b4 <__aeabi_d2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d02:	6013      	str	r3, [r2, #0]

	  set_pos_part2 = (avg_adc_part2/4095.0)*360.0;
 8001d04:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fbc7 	bl	800049c <__aeabi_ui2d>
 8001d0e:	a35c      	add	r3, pc, #368	; (adr r3, 8001e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fd66 	bl	80007e4 <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d26:	f7fe fc33 	bl	8000590 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fe3f 	bl	80009b4 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001d3a:	6013      	str	r3, [r2, #0]
	  angle_part2 =(QEIReadRaw/3072.0)*360.0;
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbab 	bl	800049c <__aeabi_ui2d>
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001d4c:	f7fe fd4a 	bl	80007e4 <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b4e      	ldr	r3, [pc, #312]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d5e:	f7fe fc17 	bl	8000590 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fe23 	bl	80009b4 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d72:	6013      	str	r3, [r2, #0]

	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos)*1000);
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	ed93 7a00 	vldr	s14, [r3]
 8001d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001daa:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ebc <HAL_TIM_PeriodElapsedCallback+0x24c>
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]
	  Vfeedback2 = (arm_pid_f32(&PID, set_pos_part2 - angle_part2)*1000);
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	edc7 7a06 	vstr	s15, [r7, #24]
    out = (S->A0 * in) +
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]
    return (out);
 8001e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e6a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ebc <HAL_TIM_PeriodElapsedCallback+0x24c>
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40affe00 	.word	0x40affe00
 8001e88:	20000330 	.word	0x20000330
 8001e8c:	20000394 	.word	0x20000394
 8001e90:	200003cc 	.word	0x200003cc
 8001e94:	20000390 	.word	0x20000390
 8001e98:	40768000 	.word	0x40768000
 8001e9c:	200003d4 	.word	0x200003d4
 8001ea0:	200003d0 	.word	0x200003d0
 8001ea4:	20000398 	.word	0x20000398
 8001ea8:	200003a4 	.word	0x200003a4
 8001eac:	2000039c 	.word	0x2000039c
 8001eb0:	40a80000 	.word	0x40a80000
 8001eb4:	200003a0 	.word	0x200003a0
 8001eb8:	200003a8 	.word	0x200003a8
 8001ebc:	447a0000 	.word	0x447a0000
 8001ec0:	200003d8 	.word	0x200003d8
 8001ec4:	200003dc 	.word	0x200003dc

08001ec8 <micros>:
//////UART/////
//adc & 0xFF;
//adc>>8 & oxFF

uint64_t micros()
{
 8001ec8:	b4b0      	push	{r4, r5, r7}
 8001eca:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <micros+0x2c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <micros+0x30>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	1884      	adds	r4, r0, r2
 8001ee0:	eb41 0503 	adc.w	r5, r1, r3
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	462b      	mov	r3, r5
}
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bcb0      	pop	{r4, r5, r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000298 	.word	0x20000298
 8001ef8:	200003f0 	.word	0x200003f0

08001efc <Adc_to_Matlab>:

void Adc_to_Matlab(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	avg_adc11= avg_adc2;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <Adc_to_Matlab+0x4c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <Adc_to_Matlab+0x50>)
 8001f08:	801a      	strh	r2, [r3, #0]
	count2 +=1;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <Adc_to_Matlab+0x54>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <Adc_to_Matlab+0x54>)
 8001f12:	6013      	str	r3, [r2, #0]
	ADCgo[0] = 0x69;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <Adc_to_Matlab+0x58>)
 8001f16:	2269      	movs	r2, #105	; 0x69
 8001f18:	701a      	strb	r2, [r3, #0]
	ADCgo[1] =(uint8_t)(avg_adc11& 0xFF);//avg_adc11/100;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <Adc_to_Matlab+0x50>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <Adc_to_Matlab+0x58>)
 8001f22:	705a      	strb	r2, [r3, #1]
	ADCgo[2] =(uint8_t)((avg_adc11>>8)& 0xFF);//avg_adc11%100;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <Adc_to_Matlab+0x50>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <Adc_to_Matlab+0x58>)
 8001f30:	709a      	strb	r2, [r3, #2]
	ADCgo[3] = 0x0A;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <Adc_to_Matlab+0x58>)
 8001f34:	220a      	movs	r2, #10
 8001f36:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&hlpuart1, ADCgo, 4);
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4906      	ldr	r1, [pc, #24]	; (8001f54 <Adc_to_Matlab+0x58>)
 8001f3c:	4806      	ldr	r0, [pc, #24]	; (8001f58 <Adc_to_Matlab+0x5c>)
 8001f3e:	f005 ff0d 	bl	8007d5c <HAL_UART_Transmit_IT>

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000394 	.word	0x20000394
 8001f4c:	20000408 	.word	0x20000408
 8001f50:	20000410 	.word	0x20000410
 8001f54:	200003e4 	.word	0x200003e4
 8001f58:	200000f8 	.word	0x200000f8

08001f5c <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001f60:	2204      	movs	r2, #4
 8001f62:	4905      	ldr	r1, [pc, #20]	; (8001f78 <UARTInterruptConfig+0x1c>)
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <UARTInterruptConfig+0x20>)
 8001f66:	f005 ff8d 	bl	8007e84 <HAL_UART_Receive_IT>
	count +=1;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <UARTInterruptConfig+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <UARTInterruptConfig+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200003e8 	.word	0x200003e8
 8001f7c:	200000f8 	.word	0x200000f8
 8001f80:	2000040c 	.word	0x2000040c

08001f84 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_UART_RxCpltCallback+0x2c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d109      	bne.n	8001fa8 <HAL_UART_RxCpltCallback+0x24>
	{
//		RxBuffer[4] = '\0';
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001f94:	2204      	movs	r2, #4
 8001f96:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <HAL_UART_RxCpltCallback+0x30>)
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_UART_RxCpltCallback+0x2c>)
 8001f9a:	f005 ff73 	bl	8007e84 <HAL_UART_Receive_IT>
		count +=1;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_UART_RxCpltCallback+0x34>)
 8001fa6:	6013      	str	r3, [r2, #0]
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200000f8 	.word	0x200000f8
 8001fb4:	200003e8 	.word	0x200003e8
 8001fb8:	2000040c 	.word	0x2000040c

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x44>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x44>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x44>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x44>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x44>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x44>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ffe:	f003 f937 	bl	8005270 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09e      	sub	sp, #120	; 0x78
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	2254      	movs	r2, #84	; 0x54
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f008 f94d 	bl	800a2d0 <memset>
  if(hadc->Instance==ADC1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203e:	d167      	bne.n	8002110 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002044:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002046:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800204a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fe4b 	bl	8005cec <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800205c:	f7ff ffae 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_ADC_MspInit+0x108>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <HAL_ADC_MspInit+0x108>)
 8002066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800206a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_ADC_MspInit+0x108>)
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_ADC_MspInit+0x108>)
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <HAL_ADC_MspInit+0x108>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_ADC_MspInit+0x108>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002090:	2303      	movs	r3, #3
 8002092:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f002 fe73 	bl	8004d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_ADC_MspInit+0x110>)
 80020ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020b2:	2205      	movs	r2, #5
 80020b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020da:	2220      	movs	r2, #32
 80020dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020e6:	f002 fb21 	bl	800472c <HAL_DMA_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80020f0:	f7ff ff64 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_ADC_MspInit+0x10c>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	2012      	movs	r0, #18
 8002106:	f002 fadc 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800210a:	2012      	movs	r0, #18
 800210c:	f002 faf3 	bl	80046f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	3778      	adds	r7, #120	; 0x78
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	20000098 	.word	0x20000098
 8002120:	40020008 	.word	0x40020008

08002124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b09e      	sub	sp, #120	; 0x78
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	2254      	movs	r2, #84	; 0x54
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f008 f8c3 	bl	800a2d0 <memset>
  if(huart->Instance==LPUART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a4d      	ldr	r2, [pc, #308]	; (8002284 <HAL_UART_MspInit+0x160>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 8092 	bne.w	800227a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002156:	2320      	movs	r3, #32
 8002158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fdc2 	bl	8005cec <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800216e:	f7ff ff25 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <HAL_UART_MspInit+0x164>)
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	4a44      	ldr	r2, [pc, #272]	; (8002288 <HAL_UART_MspInit+0x164>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800217e:	4b42      	ldr	r3, [pc, #264]	; (8002288 <HAL_UART_MspInit+0x164>)
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_UART_MspInit+0x164>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_UART_MspInit+0x164>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_UART_MspInit+0x164>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a2:	230c      	movs	r3, #12
 80021a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021b2:	230c      	movs	r3, #12
 80021b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c0:	f002 fde6 	bl	8004d90 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_UART_MspInit+0x168>)
 80021c6:	4a32      	ldr	r2, [pc, #200]	; (8002290 <HAL_UART_MspInit+0x16c>)
 80021c8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_UART_MspInit+0x168>)
 80021cc:	2222      	movs	r2, #34	; 0x22
 80021ce:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_UART_MspInit+0x168>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_UART_MspInit+0x168>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_UART_MspInit+0x168>)
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_UART_MspInit+0x168>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_UART_MspInit+0x168>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_UART_MspInit+0x168>)
 80021f0:	2220      	movs	r2, #32
 80021f2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_UART_MspInit+0x168>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80021fa:	4824      	ldr	r0, [pc, #144]	; (800228c <HAL_UART_MspInit+0x168>)
 80021fc:	f002 fa96 	bl	800472c <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002206:	f7ff fed9 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_UART_MspInit+0x168>)
 800220e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_UART_MspInit+0x168>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_UART_MspInit+0x170>)
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <HAL_UART_MspInit+0x174>)
 800221c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002220:	2223      	movs	r2, #35	; 0x23
 8002222:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002226:	2210      	movs	r2, #16
 8002228:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_MspInit+0x170>)
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_UART_MspInit+0x170>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_UART_MspInit+0x170>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800224e:	4811      	ldr	r0, [pc, #68]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002250:	f002 fa6c 	bl	800472c <HAL_DMA_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800225a:	f7ff feaf 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002262:	67da      	str	r2, [r3, #124]	; 0x7c
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_UART_MspInit+0x170>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	205b      	movs	r0, #91	; 0x5b
 8002270:	f002 fa27 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002274:	205b      	movs	r0, #91	; 0x5b
 8002276:	f002 fa3e 	bl	80046f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3778      	adds	r7, #120	; 0x78
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40008000 	.word	0x40008000
 8002288:	40021000 	.word	0x40021000
 800228c:	2000018c 	.word	0x2000018c
 8002290:	4002001c 	.word	0x4002001c
 8002294:	200001ec 	.word	0x200001ec
 8002298:	40020030 	.word	0x40020030

0800229c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_TIM_Base_MspInit+0x8c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10c      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022c6:	e02a      	b.n	800231e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d10c      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
}
 80022ea:	e018      	b.n	800231e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <HAL_TIM_Base_MspInit+0x94>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_TIM_Base_MspInit+0x90>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2032      	movs	r0, #50	; 0x32
 8002314:	f002 f9d5 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002318:	2032      	movs	r0, #50	; 0x32
 800231a:	f002 f9ec 	bl	80046f6 <HAL_NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40000c00 	.word	0x40000c00

08002334 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d128      	bne.n	80023a8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x80>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002396:	2302      	movs	r3, #2
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a4:	f002 fcf4 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x64>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11b      	bne.n	8002412 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023f2:	2307      	movs	r3, #7
 80023f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002402:	2302      	movs	r3, #2
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_TIM_MspPostInit+0x6c>)
 800240e:	f002 fcbf 	bl	8004d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40021000 	.word	0x40021000
 8002424:	48000800 	.word	0x48000800

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f8d4 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel1_IRQHandler+0x10>)
 8002482:	f002 fb36 	bl	8004af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000098 	.word	0x20000098

08002490 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Channel2_IRQHandler+0x10>)
 8002496:	f002 fb2c 	bl	8004af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000018c 	.word	0x2000018c

080024a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <DMA1_Channel3_IRQHandler+0x10>)
 80024aa:	f002 fb22 	bl	8004af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200001ec 	.word	0x200001ec

080024b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <ADC1_2_IRQHandler+0x10>)
 80024be:	f000 fde5 	bl	800308c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000002c 	.word	0x2000002c

080024cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d4:	f002 fe10 	bl	80050f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM5_IRQHandler+0x10>)
 80024e2:	f004 fa39 	bl	8006958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000330 	.word	0x20000330

080024f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <LPUART1_IRQHandler+0x10>)
 80024f6:	f005 fd11 	bl	8007f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200000f8 	.word	0x200000f8

08002504 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800252a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800252c:	f7ff ffea 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <LoopForever+0x6>)
  ldr r1, =_edata
 8002532:	490d      	ldr	r1, [pc, #52]	; (8002568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <LoopForever+0xe>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002538:	e002      	b.n	8002540 <LoopCopyDataInit>

0800253a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800253c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253e:	3304      	adds	r3, #4

08002540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002544:	d3f9      	bcc.n	800253a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002548:	4c0a      	ldr	r4, [pc, #40]	; (8002574 <LoopForever+0x16>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800254c:	e001      	b.n	8002552 <LoopFillZerobss>

0800254e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002550:	3204      	adds	r2, #4

08002552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002554:	d3fb      	bcc.n	800254e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002556:	f007 fec3 	bl	800a2e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800255a:	f7fe fbf9 	bl	8000d50 <main>

0800255e <LoopForever>:

LoopForever:
    b LoopForever
 800255e:	e7fe      	b.n	800255e <LoopForever>
  ldr   r0, =_estack
 8002560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002568:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800256c:	0800a390 	.word	0x0800a390
  ldr r2, =_sbss
 8002570:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002574:	20000418 	.word	0x20000418

08002578 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002578:	e7fe      	b.n	8002578 <ADC3_IRQHandler>

0800257a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f002 f891 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800258a:	2000      	movs	r0, #0
 800258c:	f000 f80e 	bl	80025ac <HAL_InitTick>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	e001      	b.n	80025a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800259c:	f7ff fd14 	bl	8001fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025a0:	79fb      	ldrb	r3, [r7, #7]

}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_InitTick+0x68>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d022      	beq.n	8002606 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_InitTick+0x6c>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <HAL_InitTick+0x68>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 f89c 	bl	8004712 <HAL_SYSTICK_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d809      	bhi.n	80025fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e6:	2200      	movs	r2, #0
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	f04f 30ff 	mov.w	r0, #4294967295
 80025ee:	f002 f868 	bl	80046c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_InitTick+0x70>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e007      	b.n	800260a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e004      	b.n	800260a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000000c 	.word	0x2000000c
 8002618:	20000004 	.word	0x20000004
 800261c:	20000008 	.word	0x20000008

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x1c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_IncTick+0x20>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4413      	add	r3, r2
 800262e:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_IncTick+0x1c>)
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000414 	.word	0x20000414
 8002640:	2000000c 	.word	0x2000000c

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000414 	.word	0x20000414

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d004      	beq.n	8002680 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_Delay+0x40>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002680:	bf00      	nop
 8002682:	f7ff ffdf 	bl	8002644 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	429a      	cmp	r2, r3
 8002690:	d8f7      	bhi.n	8002682 <HAL_Delay+0x26>
  {
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000000c 	.word	0x2000000c

080026a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <LL_ADC_SetOffset+0x44>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	03fff000 	.word	0x03fff000

08002750 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3360      	adds	r3, #96	; 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3360      	adds	r3, #96	; 0x60
 800278c:	461a      	mov	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b087      	sub	sp, #28
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	615a      	str	r2, [r3, #20]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3330      	adds	r3, #48	; 0x30
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	211f      	movs	r1, #31
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	f003 011f 	and.w	r1, r3, #31
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3314      	adds	r3, #20
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0e5b      	lsrs	r3, r3, #25
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	4413      	add	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	0d1b      	lsrs	r3, r3, #20
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2107      	movs	r1, #7
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0d1b      	lsrs	r3, r3, #20
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	431a      	orrs	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0318 	and.w	r3, r3, #24
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002964:	40d9      	lsrs	r1, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	400b      	ands	r3, r1
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	0007ffff 	.word	0x0007ffff

08002988 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 031f 	and.w	r3, r3, #31
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6093      	str	r3, [r2, #8]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a48:	d101      	bne.n	8002a4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a98:	f043 0202 	orr.w	r2, r3, #2
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_IsEnabled+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_IsEnabled+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_IsDisableOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_IsDisableOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d101      	bne.n	8002b38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1a9      	b.n	8002eda <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fa3b 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff19 	bl	80029e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff feff 	bl	80029c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff34 	bl	8002a34 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff18 	bl	8002a0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	; (8002e50 <HAL_ADC_Init+0x2e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	4a9c      	ldr	r2, [pc, #624]	; (8002e54 <HAL_ADC_Init+0x2e8>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff16 	bl	8002a34 <LL_ADC_IsInternalRegulatorEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff76 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 8002c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8142 	bne.w	8002ec8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 813e 	bne.w	8002ec8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff23 	bl	8002aac <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d141      	bne.n	8002cf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c74:	d004      	beq.n	8002c80 <HAL_ADC_Init+0x114>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_ADC_Init+0x2ec>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_ADC_Init+0x134>
 8002c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c84:	f7ff ff12 	bl	8002aac <LL_ADC_IsEnabled>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	4873      	ldr	r0, [pc, #460]	; (8002e58 <HAL_ADC_Init+0x2ec>)
 8002c8c:	f7ff ff0e 	bl	8002aac <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4323      	orrs	r3, r4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e012      	b.n	8002cc6 <HAL_ADC_Init+0x15a>
 8002ca0:	486e      	ldr	r0, [pc, #440]	; (8002e5c <HAL_ADC_Init+0x2f0>)
 8002ca2:	f7ff ff03 	bl	8002aac <LL_ADC_IsEnabled>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	486d      	ldr	r0, [pc, #436]	; (8002e60 <HAL_ADC_Init+0x2f4>)
 8002caa:	f7ff feff 	bl	8002aac <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	431c      	orrs	r4, r3
 8002cb2:	486c      	ldr	r0, [pc, #432]	; (8002e64 <HAL_ADC_Init+0x2f8>)
 8002cb4:	f7ff fefa 	bl	8002aac <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Init+0x172>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5f      	ldr	r2, [pc, #380]	; (8002e58 <HAL_ADC_Init+0x2ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Init+0x176>
 8002cde:	4a62      	ldr	r2, [pc, #392]	; (8002e68 <HAL_ADC_Init+0x2fc>)
 8002ce0:	e000      	b.n	8002ce4 <HAL_ADC_Init+0x178>
 8002ce2:	4a62      	ldr	r2, [pc, #392]	; (8002e6c <HAL_ADC_Init+0x300>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7ff fcd8 	bl	80026a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7f5b      	ldrb	r3, [r3, #29]
 8002cf4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	045b      	lsls	r3, r3, #17
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <HAL_ADC_Init+0x304>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fee5 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8002d7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d17f      	bne.n	8002e84 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d17c      	bne.n	8002e84 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dd4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6911      	ldr	r1, [r2, #16]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002dea:	e013      	b.n	8002e14 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dfa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e10:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d12a      	bne.n	8002e74 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e40:	430a      	orrs	r2, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
 8002e4e:	e019      	b.n	8002e84 <HAL_ADC_Init+0x318>
 8002e50:	20000004 	.word	0x20000004
 8002e54:	053e2d63 	.word	0x053e2d63
 8002e58:	50000100 	.word	0x50000100
 8002e5c:	50000400 	.word	0x50000400
 8002e60:	50000500 	.word	0x50000500
 8002e64:	50000600 	.word	0x50000600
 8002e68:	50000300 	.word	0x50000300
 8002e6c:	50000700 	.word	0x50000700
 8002e70:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f023 010f 	bic.w	r1, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	1e5a      	subs	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea4:	e007      	b.n	8002eb6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 020f 	bic.w	r2, r2, #15
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop

08002ee4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_Start_DMA+0x20>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a5a      	ldr	r2, [pc, #360]	; (8003068 <HAL_ADC_Start_DMA+0x184>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x24>
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_ADC_Start_DMA+0x188>)
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_Start_DMA+0x26>
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_ADC_Start_DMA+0x18c>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd3c 	bl	8002988 <LL_ADC_GetMultimode>
 8002f10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe02 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 809b 	bne.w	800305a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Start_DMA+0x4e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e096      	b.n	8003060 <HAL_ADC_Start_DMA+0x17c>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a4d      	ldr	r2, [pc, #308]	; (8003074 <HAL_ADC_Start_DMA+0x190>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d008      	beq.n	8002f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d002      	beq.n	8002f56 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	d17a      	bne.n	800304c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 ff60 	bl	8003e1c <ADC_Enable>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d16d      	bne.n	8003042 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <HAL_ADC_Start_DMA+0x184>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xb4>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <HAL_ADC_Start_DMA+0x194>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d002      	beq.n	8002f94 <HAL_ADC_Start_DMA+0xb0>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_Start_DMA+0xb8>
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_ADC_Start_DMA+0x198>)
 8002f96:	e001      	b.n	8002f9c <HAL_ADC_Start_DMA+0xb8>
 8002f98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d002      	beq.n	8002faa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f023 0206 	bic.w	r2, r3, #6
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_ADC_Start_DMA+0x19c>)
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_ADC_Start_DMA+0x1a0>)
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_ADC_Start_DMA+0x1a4>)
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	221c      	movs	r2, #28
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0210 	orr.w	r2, r2, #16
 800300c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3340      	adds	r3, #64	; 0x40
 8003028:	4619      	mov	r1, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f001 fc25 	bl	800487c <HAL_DMA_Start_IT>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fd5c 	bl	8002af8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003040:	e00d      	b.n	800305e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800304a:	e008      	b.n	800305e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003058:	e001      	b.n	800305e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	50000100 	.word	0x50000100
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
 8003074:	50000600 	.word	0x50000600
 8003078:	50000500 	.word	0x50000500
 800307c:	50000400 	.word	0x50000400
 8003080:	08004007 	.word	0x08004007
 8003084:	080040df 	.word	0x080040df
 8003088:	080040fb 	.word	0x080040fb

0800308c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d004      	beq.n	80030bc <HAL_ADC_IRQHandler+0x30>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a8e      	ldr	r2, [pc, #568]	; (80032f0 <HAL_ADC_IRQHandler+0x264>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_IRQHandler+0x34>
 80030bc:	4b8d      	ldr	r3, [pc, #564]	; (80032f4 <HAL_ADC_IRQHandler+0x268>)
 80030be:	e000      	b.n	80030c2 <HAL_ADC_IRQHandler+0x36>
 80030c0:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <HAL_ADC_IRQHandler+0x26c>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fc60 	bl	8002988 <LL_ADC_GetMultimode>
 80030c8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_ADC_IRQHandler+0x78>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d012      	beq.n	8003104 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f001 f8f6 	bl	80042e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2202      	movs	r2, #2
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_ADC_IRQHandler+0x8c>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8094 	beq.w	800324c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 808e 	beq.w	800324c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fb79 	bl	8002844 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d072      	beq.n	800323e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a64      	ldr	r2, [pc, #400]	; (80032f0 <HAL_ADC_IRQHandler+0x264>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_ADC_IRQHandler+0xea>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_ADC_IRQHandler+0x270>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d002      	beq.n	8003172 <HAL_ADC_IRQHandler+0xe6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	e003      	b.n	800317a <HAL_ADC_IRQHandler+0xee>
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_ADC_IRQHandler+0x274>)
 8003174:	e001      	b.n	800317a <HAL_ADC_IRQHandler+0xee>
 8003176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	4293      	cmp	r3, r2
 8003180:	d008      	beq.n	8003194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d002      	beq.n	8003194 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d104      	bne.n	800319e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	e014      	b.n	80031c8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a53      	ldr	r2, [pc, #332]	; (80032f0 <HAL_ADC_IRQHandler+0x264>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_ADC_IRQHandler+0x130>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_ADC_IRQHandler+0x270>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d002      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x12c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_IRQHandler+0x134>
 80031b8:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_ADC_IRQHandler+0x274>)
 80031ba:	e001      	b.n	80031c0 <HAL_ADC_IRQHandler+0x134>
 80031bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d135      	bne.n	800323e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d12e      	bne.n	800323e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fc9b 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11a      	bne.n	8003226 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 020c 	bic.w	r2, r2, #12
 80031fe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d112      	bne.n	800323e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	65da      	str	r2, [r3, #92]	; 0x5c
 8003224:	e00b      	b.n	800323e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f984 	bl	800354c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	220c      	movs	r2, #12
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_ADC_IRQHandler+0x1d4>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80b3 	beq.w	80033d2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80ad 	beq.w	80033d2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fb14 	bl	80028c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800329a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff facf 	bl	8002844 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_ADC_IRQHandler+0x264>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_ADC_IRQHandler+0x23a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_ADC_IRQHandler+0x270>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x236>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e003      	b.n	80032ca <HAL_ADC_IRQHandler+0x23e>
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_ADC_IRQHandler+0x274>)
 80032c4:	e001      	b.n	80032ca <HAL_ADC_IRQHandler+0x23e>
 80032c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d008      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d002      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d10f      	bne.n	8003304 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	e01f      	b.n	800332e <HAL_ADC_IRQHandler+0x2a2>
 80032ee:	bf00      	nop
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000300 	.word	0x50000300
 80032f8:	50000700 	.word	0x50000700
 80032fc:	50000500 	.word	0x50000500
 8003300:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a8b      	ldr	r2, [pc, #556]	; (8003538 <HAL_ADC_IRQHandler+0x4ac>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_ADC_IRQHandler+0x296>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8a      	ldr	r2, [pc, #552]	; (800353c <HAL_ADC_IRQHandler+0x4b0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d002      	beq.n	800331e <HAL_ADC_IRQHandler+0x292>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e003      	b.n	8003326 <HAL_ADC_IRQHandler+0x29a>
 800331e:	4b88      	ldr	r3, [pc, #544]	; (8003540 <HAL_ADC_IRQHandler+0x4b4>)
 8003320:	e001      	b.n	8003326 <HAL_ADC_IRQHandler+0x29a>
 8003322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003326:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d047      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_ADC_IRQHandler+0x2c2>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03f      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800334a:	2b00      	cmp	r3, #0
 800334c:	d13a      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d133      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d12e      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fbeb 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11a      	bne.n	80033ac <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003384:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d112      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033aa:	e00b      	b.n	80033c4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 ff67 	bl	8004298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2260      	movs	r2, #96	; 0x60
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d011      	beq.n	8003400 <HAL_ADC_IRQHandler+0x374>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8be 	bl	8003574 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_ADC_IRQHandler+0x3a4>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 ff4d 	bl	80042c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_ADC_IRQHandler+0x3d4>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 ff3f 	bl	80042d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d043      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x466>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03e      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800347c:	2301      	movs	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	e021      	b.n	80034c6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x410>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a28      	ldr	r2, [pc, #160]	; (8003538 <HAL_ADC_IRQHandler+0x4ac>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x414>
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_ADC_IRQHandler+0x4b8>)
 800349e:	e000      	b.n	80034a2 <HAL_ADC_IRQHandler+0x416>
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_ADC_IRQHandler+0x4bc>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa7e 	bl	80029a4 <LL_ADC_GetMultiDMATransfer>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034ae:	2301      	movs	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e008      	b.n	80034c6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80034c2:	2301      	movs	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10e      	bne.n	80034ea <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	f043 0202 	orr.w	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f84f 	bl	8003588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d018      	beq.n	800352e <HAL_ADC_IRQHandler+0x4a2>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d013      	beq.n	800352e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003526:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 febf 	bl	80042ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800352e:	bf00      	nop
 8003530:	3728      	adds	r7, #40	; 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	50000100 	.word	0x50000100
 800353c:	50000500 	.word	0x50000500
 8003540:	50000400 	.word	0x50000400
 8003544:	50000300 	.word	0x50000300
 8003548:	50000700 	.word	0x50000700

0800354c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0b6      	sub	sp, #216	; 0xd8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x24>
 80035ba:	2302      	movs	r3, #2
 80035bc:	f000 bc13 	b.w	8003de6 <HAL_ADC_ConfigChannel+0x84a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff faa7 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 83f3 	bne.w	8003dc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7ff f93f 	bl	800286a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fa95 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80035f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff faa1 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003604:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 81d9 	bne.w	80039c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 81d4 	bne.w	80039c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003624:	d10f      	bne.n	8003646 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	4619      	mov	r1, r3
 8003632:	f7ff f959 	bl	80028e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f8ed 	bl	800281e <LL_ADC_SetSamplingTimeCommonConfig>
 8003644:	e00e      	b.n	8003664 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	461a      	mov	r2, r3
 8003654:	f7ff f948 	bl	80028e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f8dd 	bl	800281e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d022      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6919      	ldr	r1, [r3, #16]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003696:	f7ff f837 	bl	8002708 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f7ff f883 	bl	80027b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x126>
 80036bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c0:	e000      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x128>
 80036c2:	2300      	movs	r3, #0
 80036c4:	461a      	mov	r2, r3
 80036c6:	f7ff f88f 	bl	80027e8 <LL_ADC_SetOffsetSaturation>
 80036ca:	e17b      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff f83c 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x15c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f831 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	0e9b      	lsrs	r3, r3, #26
 80036f2:	f003 021f 	and.w	r2, r3, #31
 80036f6:	e01e      	b.n	8003736 <HAL_ADC_ConfigChannel+0x19a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f826 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800371a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800371e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003726:	2320      	movs	r3, #32
 8003728:	e004      	b.n	8003734 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800372a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <HAL_ADC_ConfigChannel+0x1b2>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	e018      	b.n	8003780 <HAL_ADC_ConfigChannel+0x1e4>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800376a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e004      	b.n	8003780 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003780:	429a      	cmp	r2, r3
 8003782:	d106      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fff5 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe ffd9 	bl	8002750 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_ADC_ConfigChannel+0x222>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe ffce 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	0e9b      	lsrs	r3, r3, #26
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	e01e      	b.n	80037fc <HAL_ADC_ConfigChannel+0x260>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe ffc3 	bl	8002750 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e004      	b.n	80037fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x278>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	e018      	b.n	8003846 <HAL_ADC_ConfigChannel+0x2aa>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800382c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e004      	b.n	8003846 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800383c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe ff92 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe ff76 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x2e8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2102      	movs	r1, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe ff6b 	bl	8002750 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	e01e      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x326>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2102      	movs	r1, #2
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ff60 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e004      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80038b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_ADC_ConfigChannel+0x33e>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	e016      	b.n	8003908 <HAL_ADC_ConfigChannel+0x36c>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e004      	b.n	8003908 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003908:	429a      	cmp	r2, r3
 800390a:	d106      	bne.n	800391a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe ff31 	bl	800277c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2103      	movs	r1, #3
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe ff15 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x3aa>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2103      	movs	r1, #3
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe ff0a 	bl	8002750 <LL_ADC_GetOffsetChannel>
 800393c:	4603      	mov	r3, r0
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	e017      	b.n	8003976 <HAL_ADC_ConfigChannel+0x3da>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2103      	movs	r1, #3
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe feff 	bl	8002750 <LL_ADC_GetOffsetChannel>
 8003952:	4603      	mov	r3, r0
 8003954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800395e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e003      	b.n	8003974 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_ADC_ConfigChannel+0x3f2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	e011      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x416>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800399c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e003      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d106      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2200      	movs	r2, #0
 80039bc:	2103      	movs	r1, #3
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fedc 	bl	800277c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f86f 	bl	8002aac <LL_ADC_IsEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 813d 	bne.w	8003c50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fe ffac 	bl	8002940 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4aa2      	ldr	r2, [pc, #648]	; (8003c78 <HAL_ADC_ConfigChannel+0x6dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	f040 812e 	bne.w	8003c50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x480>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2b09      	cmp	r3, #9
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e019      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x4b4>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e003      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	bf94      	ite	ls
 8003a4a:	2301      	movls	r3, #1
 8003a4c:	2300      	movhi	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d079      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x4d4>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	3301      	adds	r3, #1
 8003a68:	069b      	lsls	r3, r3, #26
 8003a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6e:	e015      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x500>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a88:	2320      	movs	r3, #32
 8003a8a:	e003      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	069b      	lsls	r3, r3, #26
 8003a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x520>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	e017      	b.n	8003aec <HAL_ADC_ConfigChannel+0x550>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ad4:	2320      	movs	r3, #32
 8003ad6:	e003      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	ea42 0103 	orr.w	r1, r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x576>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	3301      	adds	r3, #1
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	051b      	lsls	r3, r3, #20
 8003b10:	e018      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5a8>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	e003      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b44:	430b      	orrs	r3, r1
 8003b46:	e07e      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x5c8>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	069b      	lsls	r3, r3, #26
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b62:	e015      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x5f4>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	069b      	lsls	r3, r3, #26
 8003b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x614>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	e017      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x644>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x670>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	3b1e      	subs	r3, #30
 8003c04:	051b      	lsls	r3, r3, #20
 8003c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	e01b      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x6a8>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	613b      	str	r3, [r7, #16]
  return result;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c24:	2320      	movs	r3, #32
 8003c26:	e003      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	f003 021f 	and.w	r2, r3, #31
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3b1e      	subs	r3, #30
 8003c3e:	051b      	lsls	r3, r3, #20
 8003c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fe fe4c 	bl	80028e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_ADC_ConfigChannel+0x6e0>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80be 	beq.w	8003dda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0x6d6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10a      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x6ec>
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c74:	e009      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x6ee>
 8003c76:	bf00      	nop
 8003c78:	407f0000 	.word	0x407f0000
 8003c7c:	80080000 	.word	0x80080000
 8003c80:	50000100 	.word	0x50000100
 8003c84:	50000300 	.word	0x50000300
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_ADC_ConfigChannel+0x854>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fd2e 	bl	80026ec <LL_ADC_GetCommonPathInternalCh>
 8003c90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a56      	ldr	r2, [pc, #344]	; (8003df4 <HAL_ADC_ConfigChannel+0x858>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x70c>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_ADC_ConfigChannel+0x85c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d13a      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d134      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cbc:	d005      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x72e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <HAL_ADC_ConfigChannel+0x860>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f040 8085 	bne.w	8003dd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd2:	d004      	beq.n	8003cde <HAL_ADC_ConfigChannel+0x742>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_ADC_ConfigChannel+0x864>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x746>
 8003cde:	4a49      	ldr	r2, [pc, #292]	; (8003e04 <HAL_ADC_ConfigChannel+0x868>)
 8003ce0:	e000      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x748>
 8003ce2:	4a43      	ldr	r2, [pc, #268]	; (8003df0 <HAL_ADC_ConfigChannel+0x854>)
 8003ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe fce9 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf4:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <HAL_ADC_ConfigChannel+0x86c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	099b      	lsrs	r3, r3, #6
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <HAL_ADC_ConfigChannel+0x870>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d1c:	e05a      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_ADC_ConfigChannel+0x874>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d125      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11f      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a31      	ldr	r2, [pc, #196]	; (8003e00 <HAL_ADC_ConfigChannel+0x864>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d104      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x7ac>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_ADC_ConfigChannel+0x878>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d047      	beq.n	8003dd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d50:	d004      	beq.n	8003d5c <HAL_ADC_ConfigChannel+0x7c0>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <HAL_ADC_ConfigChannel+0x864>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x7c4>
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_ADC_ConfigChannel+0x868>)
 8003d5e:	e000      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x7c6>
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <HAL_ADC_ConfigChannel+0x854>)
 8003d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f7fe fcaa 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d72:	e031      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a27      	ldr	r2, [pc, #156]	; (8003e18 <HAL_ADC_ConfigChannel+0x87c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d12d      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d127      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_ADC_ConfigChannel+0x864>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d022      	beq.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9c:	d004      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x80c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_ADC_ConfigChannel+0x864>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x810>
 8003da8:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <HAL_ADC_ConfigChannel+0x868>)
 8003daa:	e000      	b.n	8003dae <HAL_ADC_ConfigChannel+0x812>
 8003dac:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_ADC_ConfigChannel+0x854>)
 8003dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe fc84 	bl	80026c6 <LL_ADC_SetCommonPathInternalCh>
 8003dbe:	e00c      	b.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003dd2:	e002      	b.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003de2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	37d8      	adds	r7, #216	; 0xd8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	50000700 	.word	0x50000700
 8003df4:	c3210000 	.word	0xc3210000
 8003df8:	90c00010 	.word	0x90c00010
 8003dfc:	50000600 	.word	0x50000600
 8003e00:	50000100 	.word	0x50000100
 8003e04:	50000300 	.word	0x50000300
 8003e08:	20000004 	.word	0x20000004
 8003e0c:	053e2d63 	.word	0x053e2d63
 8003e10:	c7520000 	.word	0xc7520000
 8003e14:	50000500 	.word	0x50000500
 8003e18:	cb840000 	.word	0xcb840000

08003e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fe3d 	bl	8002aac <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d176      	bne.n	8003f26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <ADC_Enable+0x114>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e062      	b.n	8003f28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fdf8 	bl	8002a5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e74:	d004      	beq.n	8003e80 <ADC_Enable+0x64>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <ADC_Enable+0x118>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <ADC_Enable+0x68>
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <ADC_Enable+0x11c>)
 8003e82:	e000      	b.n	8003e86 <ADC_Enable+0x6a>
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <ADC_Enable+0x120>)
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe fc30 	bl	80026ec <LL_ADC_GetCommonPathInternalCh>
 8003e8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <ADC_Enable+0x124>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <ADC_Enable+0x128>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eb0:	e002      	b.n	8003eb8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f9      	bne.n	8003eb2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ebe:	f7fe fbc1 	bl	8002644 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec4:	e028      	b.n	8003f18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fdee 	bl	8002aac <LL_ADC_IsEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fdbe 	bl	8002a5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ee0:	f7fe fbb0 	bl	8002644 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d914      	bls.n	8003f18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d00d      	beq.n	8003f18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	f043 0210 	orr.w	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d1cf      	bne.n	8003ec6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	8000003f 	.word	0x8000003f
 8003f34:	50000100 	.word	0x50000100
 8003f38:	50000300 	.word	0x50000300
 8003f3c:	50000700 	.word	0x50000700
 8003f40:	20000004 	.word	0x20000004
 8003f44:	053e2d63 	.word	0x053e2d63

08003f48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fdbc 	bl	8002ad2 <LL_ADC_IsDisableOngoing>
 8003f5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fda3 	bl	8002aac <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d047      	beq.n	8003ffc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d144      	bne.n	8003ffc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030d 	and.w	r3, r3, #13
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10c      	bne.n	8003f9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fd7d 	bl	8002a84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2203      	movs	r2, #3
 8003f90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f92:	f7fe fb57 	bl	8002644 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f98:	e029      	b.n	8003fee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e023      	b.n	8003ffe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fb6:	f7fe fb45 	bl	8002644 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d914      	bls.n	8003fee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	f043 0210 	orr.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	f043 0201 	orr.w	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e007      	b.n	8003ffe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1dc      	bne.n	8003fb6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800401c:	2b00      	cmp	r3, #0
 800401e:	d14b      	bne.n	80040b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d021      	beq.n	800407e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc00 	bl	8002844 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d032      	beq.n	80040b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12b      	bne.n	80040b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11f      	bne.n	80040b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c
 800407c:	e018      	b.n	80040b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fa4b 	bl	800354c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040b6:	e00e      	b.n	80040d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff fa5f 	bl	8003588 <HAL_ADC_ErrorCallback>
}
 80040ca:	e004      	b.n	80040d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fa37 	bl	8003560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff fa31 	bl	8003588 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <LL_ADC_IsEnabled>:
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <LL_ADC_IsEnabled+0x18>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <LL_ADC_IsEnabled+0x1a>
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_StartCalibration>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004166:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004170:	4313      	orrs	r3, r2
 8004172:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	609a      	str	r2, [r3, #8]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_ADC_IsCalibrationOnGoing>:
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419a:	d101      	bne.n	80041a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_ADC_REG_IsConversionOngoing>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d101      	bne.n	80041c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e04d      	b.n	800428c <HAL_ADCEx_Calibration_Start+0xb8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fea5 	bl	8003f48 <ADC_Disable>
 80041fe:	4603      	mov	r3, r0
 8004200:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d136      	bne.n	8004276 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004210:	f023 0302 	bic.w	r3, r3, #2
 8004214:	f043 0202 	orr.w	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ff96 	bl	8004154 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004228:	e014      	b.n	8004254 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3301      	adds	r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d90d      	bls.n	8004254 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	f023 0312 	bic.w	r3, r3, #18
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e01b      	b.n	800428c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff94 	bl	8004186 <LL_ADC_IsCalibrationOnGoing>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e2      	bne.n	800422a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f023 0303 	bic.w	r3, r3, #3
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c
 8004274:	e005      	b.n	8004282 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	f043 0210 	orr.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	0004de01 	.word	0x0004de01

08004298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b0a1      	sub	sp, #132	; 0x84
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004316:	2302      	movs	r3, #2
 8004318:	e0e7      	b.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004322:	2300      	movs	r3, #0
 8004324:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004326:	2300      	movs	r3, #0
 8004328:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004332:	d102      	bne.n	800433a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	e009      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d102      	bne.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004344:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	e001      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0be      	b.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff1d 	bl	80041ae <LL_ADC_REG_IsConversionOngoing>
 8004374:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff17 	bl	80041ae <LL_ADC_REG_IsConversionOngoing>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 80a0 	bne.w	80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 809c 	bne.w	80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a55      	ldr	r2, [pc, #340]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043a4:	4b56      	ldr	r3, [pc, #344]	; (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80043a6:	e000      	b.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043a8:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80043aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d04b      	beq.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80043b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c6:	035b      	lsls	r3, r3, #13
 80043c8:	430b      	orrs	r3, r1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d8:	d004      	beq.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a45      	ldr	r2, [pc, #276]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10f      	bne.n	8004404 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043e8:	f7ff fea1 	bl	800412e <LL_ADC_IsEnabled>
 80043ec:	4604      	mov	r4, r0
 80043ee:	4841      	ldr	r0, [pc, #260]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043f0:	f7ff fe9d 	bl	800412e <LL_ADC_IsEnabled>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4323      	orrs	r3, r4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e012      	b.n	800442a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004404:	483c      	ldr	r0, [pc, #240]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004406:	f7ff fe92 	bl	800412e <LL_ADC_IsEnabled>
 800440a:	4604      	mov	r4, r0
 800440c:	483b      	ldr	r0, [pc, #236]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800440e:	f7ff fe8e 	bl	800412e <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	431c      	orrs	r4, r3
 8004416:	483c      	ldr	r0, [pc, #240]	; (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004418:	f7ff fe89 	bl	800412e <LL_ADC_IsEnabled>
 800441c:	4603      	mov	r3, r0
 800441e:	4323      	orrs	r3, r4
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d056      	beq.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004436:	f023 030f 	bic.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	6892      	ldr	r2, [r2, #8]
 8004442:	430a      	orrs	r2, r1
 8004444:	431a      	orrs	r2, r3
 8004446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004448:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800444a:	e047      	b.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800444c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004456:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004460:	d004      	beq.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d10f      	bne.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800446c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004470:	f7ff fe5d 	bl	800412e <LL_ADC_IsEnabled>
 8004474:	4604      	mov	r4, r0
 8004476:	481f      	ldr	r0, [pc, #124]	; (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004478:	f7ff fe59 	bl	800412e <LL_ADC_IsEnabled>
 800447c:	4603      	mov	r3, r0
 800447e:	4323      	orrs	r3, r4
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e012      	b.n	80044b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800448c:	481a      	ldr	r0, [pc, #104]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800448e:	f7ff fe4e 	bl	800412e <LL_ADC_IsEnabled>
 8004492:	4604      	mov	r4, r0
 8004494:	4819      	ldr	r0, [pc, #100]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004496:	f7ff fe4a 	bl	800412e <LL_ADC_IsEnabled>
 800449a:	4603      	mov	r3, r0
 800449c:	431c      	orrs	r4, r3
 800449e:	481a      	ldr	r0, [pc, #104]	; (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044a0:	f7ff fe45 	bl	800412e <LL_ADC_IsEnabled>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4323      	orrs	r3, r4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d012      	beq.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044be:	f023 030f 	bic.w	r3, r3, #15
 80044c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044c6:	e009      	b.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80044da:	e000      	b.n	80044de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3784      	adds	r7, #132	; 0x84
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd90      	pop	{r4, r7, pc}
 80044f2:	bf00      	nop
 80044f4:	50000100 	.word	0x50000100
 80044f8:	50000400 	.word	0x50000400
 80044fc:	50000500 	.word	0x50000500
 8004500:	50000300 	.word	0x50000300
 8004504:	50000700 	.word	0x50000700
 8004508:	50000600 	.word	0x50000600

0800450c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004528:	4013      	ands	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	60d3      	str	r3, [r2, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <__NVIC_GetPriorityGrouping+0x18>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 0307 	and.w	r3, r3, #7
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db0b      	blt.n	800459a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4907      	ldr	r1, [pc, #28]	; (80045a8 <__NVIC_EnableIRQ+0x38>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000e100 	.word	0xe000e100

080045ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db0a      	blt.n	80045d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	490c      	ldr	r1, [pc, #48]	; (80045f8 <__NVIC_SetPriority+0x4c>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	440b      	add	r3, r1
 80045d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d4:	e00a      	b.n	80045ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <__NVIC_SetPriority+0x50>)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3b04      	subs	r3, #4
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	440b      	add	r3, r1
 80045ea:	761a      	strb	r2, [r3, #24]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f1c3 0307 	rsb	r3, r3, #7
 800461a:	2b04      	cmp	r3, #4
 800461c:	bf28      	it	cs
 800461e:	2304      	movcs	r3, #4
 8004620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3304      	adds	r3, #4
 8004626:	2b06      	cmp	r3, #6
 8004628:	d902      	bls.n	8004630 <NVIC_EncodePriority+0x30>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3b03      	subs	r3, #3
 800462e:	e000      	b.n	8004632 <NVIC_EncodePriority+0x32>
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	401a      	ands	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	43d9      	mvns	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	4313      	orrs	r3, r2
         );
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff8e 	bl	80045ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff29 	bl	800450c <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046d0:	f7ff ff40 	bl	8004554 <__NVIC_GetPriorityGrouping>
 80046d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f7ff ff90 	bl	8004600 <NVIC_EncodePriority>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff ff5f 	bl	80045ac <__NVIC_SetPriority>
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff ff33 	bl	8004570 <__NVIC_EnableIRQ>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ffa4 	bl	8004668 <SysTick_Config>
 8004720:	4603      	mov	r3, r0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e08d      	b.n	800485a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_DMA_Init+0x138>)
 8004746:	429a      	cmp	r2, r3
 8004748:	d80f      	bhi.n	800476a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <HAL_DMA_Init+0x13c>)
 8004752:	4413      	add	r3, r2
 8004754:	4a45      	ldr	r2, [pc, #276]	; (800486c <HAL_DMA_Init+0x140>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	009a      	lsls	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a42      	ldr	r2, [pc, #264]	; (8004870 <HAL_DMA_Init+0x144>)
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
 8004768:	e00e      	b.n	8004788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	4b40      	ldr	r3, [pc, #256]	; (8004874 <HAL_DMA_Init+0x148>)
 8004772:	4413      	add	r3, r2
 8004774:	4a3d      	ldr	r2, [pc, #244]	; (800486c <HAL_DMA_Init+0x140>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <HAL_DMA_Init+0x14c>)
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa76 	bl	8004ccc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e8:	d102      	bne.n	80047f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004804:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <HAL_DMA_Init+0x104>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d80c      	bhi.n	8004830 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa96 	bl	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	e008      	b.n	8004842 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40020407 	.word	0x40020407
 8004868:	bffdfff8 	.word	0xbffdfff8
 800486c:	cccccccd 	.word	0xcccccccd
 8004870:	40020000 	.word	0x40020000
 8004874:	bffdfbf8 	.word	0xbffdfbf8
 8004878:	40020400 	.word	0x40020400

0800487c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_DMA_Start_IT+0x20>
 8004898:	2302      	movs	r3, #2
 800489a:	e066      	b.n	800496a <HAL_DMA_Start_IT+0xee>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d155      	bne.n	800495c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f9bb 	bl	8004c50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 020e 	orr.w	r2, r2, #14
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e00f      	b.n	8004914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0204 	bic.w	r2, r2, #4
 8004902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 020a 	orr.w	r2, r2, #10
 8004912:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004930:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004948:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e005      	b.n	8004968 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004964:	2302      	movs	r3, #2
 8004966:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d005      	beq.n	8004996 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2204      	movs	r2, #4
 800498e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	e037      	b.n	8004a06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 020e 	bic.w	r2, r2, #14
 80049a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f003 021f 	and.w	r2, r3, #31
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f202 	lsl.w	r2, r1, r2
 80049d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00c      	beq.n	8004a06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d00d      	beq.n	8004a58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	e047      	b.n	8004ae8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 020e 	bic.w	r2, r2, #14
 8004a66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ac6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
    }
  }
  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2204      	movs	r2, #4
 8004b14:	409a      	lsls	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d026      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x7a>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d021      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0204 	bic.w	r2, r2, #4
 8004b44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	f003 021f 	and.w	r2, r3, #31
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2104      	movs	r1, #4
 8004b54:	fa01 f202 	lsl.w	r2, r1, r2
 8004b58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d071      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b6a:	e06c      	b.n	8004c46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2202      	movs	r2, #2
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02e      	beq.n	8004bde <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d029      	beq.n	8004bde <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 020a 	bic.w	r2, r2, #10
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d038      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bdc:	e033      	b.n	8004c46 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	2208      	movs	r2, #8
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d02a      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d025      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 020e 	bic.w	r2, r2, #14
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
}
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c66:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f003 021f 	and.w	r2, r3, #31
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d108      	bne.n	8004cb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cae:	e007      	b.n	8004cc0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d802      	bhi.n	8004ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ce0:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e001      	b.n	8004cea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ce8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3b08      	subs	r3, #8
 8004cf6:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	009a      	lsls	r2, r3, #2
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d16:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	2201      	movs	r2, #1
 8004d20:	409a      	lsls	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40020407 	.word	0x40020407
 8004d38:	40020800 	.word	0x40020800
 8004d3c:	40020820 	.word	0x40020820
 8004d40:	cccccccd 	.word	0xcccccccd
 8004d44:	40020880 	.word	0x40020880

08004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	461a      	mov	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d6a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	2201      	movs	r2, #1
 8004d76:	409a      	lsls	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	1000823f 	.word	0x1000823f
 8004d8c:	40020940 	.word	0x40020940

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d9e:	e15a      	b.n	8005056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	2101      	movs	r1, #1
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 814c 	beq.w	8005050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d005      	beq.n	8004dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d130      	bne.n	8004e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e06:	2201      	movs	r2, #1
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0201 	and.w	r2, r3, #1
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d017      	beq.n	8004e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	2203      	movs	r2, #3
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d123      	bne.n	8004ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	08da      	lsrs	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3208      	adds	r2, #8
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	220f      	movs	r2, #15
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	08da      	lsrs	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3208      	adds	r2, #8
 8004ebc:	6939      	ldr	r1, [r7, #16]
 8004ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2203      	movs	r2, #3
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0203 	and.w	r2, r3, #3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a6 	beq.w	8005050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f04:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_GPIO_Init+0x2e4>)
 8004f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f08:	4a5a      	ldr	r2, [pc, #360]	; (8005074 <HAL_GPIO_Init+0x2e4>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f10:	4b58      	ldr	r3, [pc, #352]	; (8005074 <HAL_GPIO_Init+0x2e4>)
 8004f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f1c:	4a56      	ldr	r2, [pc, #344]	; (8005078 <HAL_GPIO_Init+0x2e8>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	220f      	movs	r2, #15
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f46:	d01f      	beq.n	8004f88 <HAL_GPIO_Init+0x1f8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a4c      	ldr	r2, [pc, #304]	; (800507c <HAL_GPIO_Init+0x2ec>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d019      	beq.n	8004f84 <HAL_GPIO_Init+0x1f4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <HAL_GPIO_Init+0x2f0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_GPIO_Init+0x1f0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_GPIO_Init+0x2f4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00d      	beq.n	8004f7c <HAL_GPIO_Init+0x1ec>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a49      	ldr	r2, [pc, #292]	; (8005088 <HAL_GPIO_Init+0x2f8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <HAL_GPIO_Init+0x1e8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a48      	ldr	r2, [pc, #288]	; (800508c <HAL_GPIO_Init+0x2fc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d101      	bne.n	8004f74 <HAL_GPIO_Init+0x1e4>
 8004f70:	2305      	movs	r3, #5
 8004f72:	e00a      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f74:	2306      	movs	r3, #6
 8004f76:	e008      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	e006      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e004      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e002      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_GPIO_Init+0x1fa>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	f002 0203 	and.w	r2, r2, #3
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	4093      	lsls	r3, r2
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f9a:	4937      	ldr	r1, [pc, #220]	; (8005078 <HAL_GPIO_Init+0x2e8>)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa8:	4b39      	ldr	r3, [pc, #228]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fcc:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ff6:	4a26      	ldr	r2, [pc, #152]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <HAL_GPIO_Init+0x300>)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_GPIO_Init+0x300>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800504a:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_GPIO_Init+0x300>)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3301      	adds	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	f47f ae9d 	bne.w	8004da0 <HAL_GPIO_Init+0x10>
  }
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40021000 	.word	0x40021000
 8005078:	40010000 	.word	0x40010000
 800507c:	48000400 	.word	0x48000400
 8005080:	48000800 	.word	0x48000800
 8005084:	48000c00 	.word	0x48000c00
 8005088:	48001000 	.word	0x48001000
 800508c:	48001400 	.word	0x48001400
 8005090:	40010400 	.word	0x40010400

08005094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
 80050a0:	4613      	mov	r3, r2
 80050a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050a4:	787b      	ldrb	r3, [r7, #1]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050aa:	887a      	ldrh	r2, [r7, #2]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050b0:	e002      	b.n	80050b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050b2:	887a      	ldrh	r2, [r7, #2]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050d6:	887a      	ldrh	r2, [r7, #2]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4013      	ands	r3, r2
 80050dc:	041a      	lsls	r2, r3, #16
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	43d9      	mvns	r1, r3
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	400b      	ands	r3, r1
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	619a      	str	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc fa5e 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40010400 	.word	0x40010400

08005128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d141      	bne.n	80051ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005136:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800513e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005142:	d131      	bne.n	80051a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005144:	4b47      	ldr	r3, [pc, #284]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514a:	4a46      	ldr	r2, [pc, #280]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800515c:	4a41      	ldr	r2, [pc, #260]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2232      	movs	r2, #50	; 0x32
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0c9b      	lsrs	r3, r3, #18
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800517a:	e002      	b.n	8005182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005182:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d102      	bne.n	8005196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f2      	bne.n	800517c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005196:	4b33      	ldr	r3, [pc, #204]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d158      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e057      	b.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a8:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ae:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051b8:	e04d      	b.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d141      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ce:	d131      	bne.n	8005234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d0:	4b24      	ldr	r3, [pc, #144]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d6:	4a23      	ldr	r2, [pc, #140]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051e0:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051e8:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2232      	movs	r2, #50	; 0x32
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	0c9b      	lsrs	r3, r3, #18
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005206:	e002      	b.n	800520e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3b01      	subs	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d102      	bne.n	8005222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f2      	bne.n	8005208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522e:	d112      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e011      	b.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005244:	e007      	b.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800524e:	4a05      	ldr	r2, [pc, #20]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005254:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40007000 	.word	0x40007000
 8005268:	20000004 	.word	0x20000004
 800526c:	431bde83 	.word	0x431bde83

08005270 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a04      	ldr	r2, [pc, #16]	; (800528c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800527a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800527e:	6093      	str	r3, [r2, #8]
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40007000 	.word	0x40007000

08005290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e2fe      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d075      	beq.n	800539a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ae:	4b97      	ldr	r3, [pc, #604]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b8:	4b94      	ldr	r3, [pc, #592]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d102      	bne.n	80052ce <HAL_RCC_OscConfig+0x3e>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d002      	beq.n	80052d4 <HAL_RCC_OscConfig+0x44>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4b8d      	ldr	r3, [pc, #564]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05b      	beq.n	8005398 <HAL_RCC_OscConfig+0x108>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e2d9      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_OscConfig+0x74>
 80052f6:	4b85      	ldr	r3, [pc, #532]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a84      	ldr	r2, [pc, #528]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01d      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x98>
 800530e:	4b7f      	ldr	r3, [pc, #508]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a7e      	ldr	r2, [pc, #504]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b7c      	ldr	r3, [pc, #496]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7b      	ldr	r2, [pc, #492]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005328:	4b78      	ldr	r3, [pc, #480]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a77      	ldr	r2, [pc, #476]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b75      	ldr	r3, [pc, #468]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a74      	ldr	r2, [pc, #464]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd f97c 	bl	8002644 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd f978 	bl	8002644 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e29e      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	4b6a      	ldr	r3, [pc, #424]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xc0>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fd f968 	bl	8002644 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7fd f964 	bl	8002644 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e28a      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800538a:	4b60      	ldr	r3, [pc, #384]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0xe8>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d075      	beq.n	8005492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a6:	4b59      	ldr	r3, [pc, #356]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b0:	4b56      	ldr	r3, [pc, #344]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d102      	bne.n	80053c6 <HAL_RCC_OscConfig+0x136>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d002      	beq.n	80053cc <HAL_RCC_OscConfig+0x13c>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d11f      	bne.n	800540c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053cc:	4b4f      	ldr	r3, [pc, #316]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_OscConfig+0x154>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e25d      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e4:	4b49      	ldr	r3, [pc, #292]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	4946      	ldr	r1, [pc, #280]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053f8:	4b45      	ldr	r3, [pc, #276]	; (8005510 <HAL_RCC_OscConfig+0x280>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fd f8d5 	bl	80025ac <HAL_InitTick>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d043      	beq.n	8005490 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e249      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d023      	beq.n	800545c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005414:	4b3d      	ldr	r3, [pc, #244]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3c      	ldr	r2, [pc, #240]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fd f910 	bl	8002644 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005428:	f7fd f90c 	bl	8002644 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e232      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005446:	4b31      	ldr	r3, [pc, #196]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	061b      	lsls	r3, r3, #24
 8005454:	492d      	ldr	r1, [pc, #180]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
 800545a:	e01a      	b.n	8005492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545c:	4b2b      	ldr	r3, [pc, #172]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2a      	ldr	r2, [pc, #168]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd f8ec 	bl	8002644 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005470:	f7fd f8e8 	bl	8002644 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e20e      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x1e0>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d041      	beq.n	8005522 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01c      	beq.n	80054e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ac:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b6:	f7fd f8c5 	bl	8002644 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054be:	f7fd f8c1 	bl	8002644 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1e7      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80054d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0ef      	beq.n	80054be <HAL_RCC_OscConfig+0x22e>
 80054de:	e020      	b.n	8005522 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_RCC_OscConfig+0x27c>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f0:	f7fd f8a8 	bl	8002644 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054f6:	e00d      	b.n	8005514 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f8:	f7fd f8a4 	bl	8002644 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d906      	bls.n	8005514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e1ca      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005514:	4b8c      	ldr	r3, [pc, #560]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ea      	bne.n	80054f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80a6 	beq.w	800567c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005534:	4b84      	ldr	r3, [pc, #528]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_OscConfig+0x2b4>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0x2b6>
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	4b7f      	ldr	r3, [pc, #508]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	4a7e      	ldr	r2, [pc, #504]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005554:	6593      	str	r3, [r2, #88]	; 0x58
 8005556:	4b7c      	ldr	r3, [pc, #496]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005562:	2301      	movs	r3, #1
 8005564:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005566:	4b79      	ldr	r3, [pc, #484]	; (800574c <HAL_RCC_OscConfig+0x4bc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d118      	bne.n	80055a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_OscConfig+0x4bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a75      	ldr	r2, [pc, #468]	; (800574c <HAL_RCC_OscConfig+0x4bc>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557e:	f7fd f861 	bl	8002644 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7fd f85d 	bl	8002644 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e183      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005598:	4b6c      	ldr	r3, [pc, #432]	; (800574c <HAL_RCC_OscConfig+0x4bc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d108      	bne.n	80055be <HAL_RCC_OscConfig+0x32e>
 80055ac:	4b66      	ldr	r3, [pc, #408]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	4a65      	ldr	r2, [pc, #404]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055bc:	e024      	b.n	8005608 <HAL_RCC_OscConfig+0x378>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d110      	bne.n	80055e8 <HAL_RCC_OscConfig+0x358>
 80055c6:	4b60      	ldr	r3, [pc, #384]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055cc:	4a5e      	ldr	r2, [pc, #376]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055d6:	4b5c      	ldr	r3, [pc, #368]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	4a5a      	ldr	r2, [pc, #360]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055e6:	e00f      	b.n	8005608 <HAL_RCC_OscConfig+0x378>
 80055e8:	4b57      	ldr	r3, [pc, #348]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	4a56      	ldr	r2, [pc, #344]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f023 0301 	bic.w	r3, r3, #1
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055f8:	4b53      	ldr	r3, [pc, #332]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	4a52      	ldr	r2, [pc, #328]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005600:	f023 0304 	bic.w	r3, r3, #4
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fd f818 	bl	8002644 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005616:	e00a      	b.n	800562e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fd f814 	bl	8002644 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e138      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562e:	4b46      	ldr	r3, [pc, #280]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ed      	beq.n	8005618 <HAL_RCC_OscConfig+0x388>
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563e:	f7fd f801 	bl	8002644 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005644:	e00a      	b.n	800565c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005646:	f7fc fffd 	bl	8002644 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f241 3288 	movw	r2, #5000	; 0x1388
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e121      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800565c:	4b3a      	ldr	r3, [pc, #232]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ed      	bne.n	8005646 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800566a:	7ffb      	ldrb	r3, [r7, #31]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4b35      	ldr	r3, [pc, #212]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d03c      	beq.n	8005702 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fc ffd0 	bl	8002644 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a8:	f7fc ffcc 	bl	8002644 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0f2      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80056bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0ef      	beq.n	80056a8 <HAL_RCC_OscConfig+0x418>
 80056c8:	e01b      	b.n	8005702 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ca:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fc ffb3 	bl	8002644 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e2:	f7fc ffaf 	bl	8002644 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0d5      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f4:	4b14      	ldr	r3, [pc, #80]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ef      	bne.n	80056e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80c9 	beq.w	800589e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b0c      	cmp	r3, #12
 8005716:	f000 8083 	beq.w	8005820 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d15e      	bne.n	80057e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <HAL_RCC_OscConfig+0x4b8>)
 8005728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fc ff89 	bl	8002644 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005734:	e00c      	b.n	8005750 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005736:	f7fc ff85 	bl	8002644 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d905      	bls.n	8005750 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e0ab      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
 8005748:	40021000 	.word	0x40021000
 800574c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005750:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ec      	bne.n	8005736 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575c:	4b52      	ldr	r3, [pc, #328]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	4b52      	ldr	r3, [pc, #328]	; (80058ac <HAL_RCC_OscConfig+0x61c>)
 8005762:	4013      	ands	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6a11      	ldr	r1, [r2, #32]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576c:	3a01      	subs	r2, #1
 800576e:	0112      	lsls	r2, r2, #4
 8005770:	4311      	orrs	r1, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005776:	0212      	lsls	r2, r2, #8
 8005778:	4311      	orrs	r1, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800577e:	0852      	lsrs	r2, r2, #1
 8005780:	3a01      	subs	r2, #1
 8005782:	0552      	lsls	r2, r2, #21
 8005784:	4311      	orrs	r1, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800578a:	0852      	lsrs	r2, r2, #1
 800578c:	3a01      	subs	r2, #1
 800578e:	0652      	lsls	r2, r2, #25
 8005790:	4311      	orrs	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005796:	06d2      	lsls	r2, r2, #27
 8005798:	430a      	orrs	r2, r1
 800579a:	4943      	ldr	r1, [pc, #268]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 800579c:	4313      	orrs	r3, r2
 800579e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc ff44 	bl	8002644 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c0:	f7fc ff40 	bl	8002644 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e066      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x530>
 80057de:	e05e      	b.n	800589e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 80057e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fc ff2a 	bl	8002644 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f4:	f7fc ff26 	bl	8002644 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e04c      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005806:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005812:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	4924      	ldr	r1, [pc, #144]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_RCC_OscConfig+0x620>)
 800581a:	4013      	ands	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
 800581e:	e03e      	b.n	800589e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e039      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800582c:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_RCC_OscConfig+0x618>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 0203 	and.w	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	429a      	cmp	r2, r3
 800583e:	d12c      	bne.n	800589a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	3b01      	subs	r3, #1
 800584c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d123      	bne.n	800589a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d11b      	bne.n	800589a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d113      	bne.n	800589a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	3b01      	subs	r3, #1
 8005880:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d109      	bne.n	800589a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	3b01      	subs	r3, #1
 8005894:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	019f800c 	.word	0x019f800c
 80058b0:	feeefffc 	.word	0xfeeefffc

080058b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e11e      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058cc:	4b91      	ldr	r3, [pc, #580]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d910      	bls.n	80058fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b8e      	ldr	r3, [pc, #568]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 020f 	bic.w	r2, r3, #15
 80058e2:	498c      	ldr	r1, [pc, #560]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b8a      	ldr	r3, [pc, #552]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e106      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d073      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b03      	cmp	r3, #3
 800590e:	d129      	bne.n	8005964 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005910:	4b81      	ldr	r3, [pc, #516]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0f4      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005920:	f000 f99e 	bl	8005c60 <RCC_GetSysClockFreqFromPLLSource>
 8005924:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4a7c      	ldr	r2, [pc, #496]	; (8005b1c <HAL_RCC_ClockConfig+0x268>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d93f      	bls.n	80059ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005942:	2b00      	cmp	r3, #0
 8005944:	d033      	beq.n	80059ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800594a:	2b00      	cmp	r3, #0
 800594c:	d12f      	bne.n	80059ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800594e:	4b72      	ldr	r3, [pc, #456]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005956:	4a70      	ldr	r2, [pc, #448]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800595e:	2380      	movs	r3, #128	; 0x80
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e024      	b.n	80059ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d107      	bne.n	800597c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596c:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0c6      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800597c:	4b66      	ldr	r3, [pc, #408]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0be      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800598c:	f000 f8ce 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8005990:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_RCC_ClockConfig+0x268>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d909      	bls.n	80059ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800599a:	4b5f      	ldr	r3, [pc, #380]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a2:	4a5d      	ldr	r2, [pc, #372]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b5a      	ldr	r3, [pc, #360]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4957      	ldr	r1, [pc, #348]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c0:	f7fc fe40 	bl	8002644 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fc fe3c 	bl	8002644 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e095      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d023      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a08:	4b43      	ldr	r3, [pc, #268]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a42      	ldr	r2, [pc, #264]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a20:	4b3d      	ldr	r3, [pc, #244]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a28:	4a3b      	ldr	r2, [pc, #236]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4936      	ldr	r1, [pc, #216]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d105      	bne.n	8005a56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a4a:	4b33      	ldr	r3, [pc, #204]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4a32      	ldr	r2, [pc, #200]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a56:	4b2f      	ldr	r3, [pc, #188]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d21d      	bcs.n	8005aa0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a64:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f023 020f 	bic.w	r2, r3, #15
 8005a6c:	4929      	ldr	r1, [pc, #164]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a74:	f7fc fde6 	bl	8002644 <HAL_GetTick>
 8005a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a7c:	f7fc fde2 	bl	8002644 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e03b      	b.n	8005b0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1ed      	bne.n	8005a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aac:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4917      	ldr	r1, [pc, #92]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	490f      	ldr	r1, [pc, #60]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ade:	f000 f825 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <HAL_RCC_ClockConfig+0x264>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	490c      	ldr	r1, [pc, #48]	; (8005b20 <HAL_RCC_ClockConfig+0x26c>)
 8005af0:	5ccb      	ldrb	r3, [r1, r3]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <HAL_RCC_ClockConfig+0x270>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <HAL_RCC_ClockConfig+0x274>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fc fd52 	bl	80025ac <HAL_InitTick>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40022000 	.word	0x40022000
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	04c4b400 	.word	0x04c4b400
 8005b20:	0800a340 	.word	0x0800a340
 8005b24:	20000004 	.word	0x20000004
 8005b28:	20000008 	.word	0x20000008

08005b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b32:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b3e:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e047      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b50:	4b26      	ldr	r3, [pc, #152]	; (8005bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e03e      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b56:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d136      	bne.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b62:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	3301      	adds	r3, #1
 8005b78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b80:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8a:	68d2      	ldr	r2, [r2, #12]
 8005b8c:	0a12      	lsrs	r2, r2, #8
 8005b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	617b      	str	r3, [r7, #20]
      break;
 8005b98:	e00c      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	0a12      	lsrs	r2, r2, #8
 8005ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	617b      	str	r3, [r7, #20]
      break;
 8005bb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	0e5b      	lsrs	r3, r3, #25
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e001      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bd4:	693b      	ldr	r3, [r7, #16]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40021000 	.word	0x40021000
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	016e3600 	.word	0x016e3600

08005bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000004 	.word	0x20000004

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4904      	ldr	r1, [pc, #16]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	0800a350 	.word	0x0800a350

08005c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c38:	f7ff ffda 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0adb      	lsrs	r3, r3, #11
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4904      	ldr	r1, [pc, #16]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	0800a350 	.word	0x0800a350

08005c60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c66:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d10c      	bne.n	8005c9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c8e:	68d2      	ldr	r2, [r2, #12]
 8005c90:	0a12      	lsrs	r2, r2, #8
 8005c92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	617b      	str	r3, [r7, #20]
    break;
 8005c9c:	e00c      	b.n	8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca8:	68d2      	ldr	r2, [r2, #12]
 8005caa:	0a12      	lsrs	r2, r2, #8
 8005cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	617b      	str	r3, [r7, #20]
    break;
 8005cb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	0e5b      	lsrs	r3, r3, #25
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cd2:	687b      	ldr	r3, [r7, #4]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	016e3600 	.word	0x016e3600
 8005ce8:	00f42400 	.word	0x00f42400

08005cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8098 	beq.w	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6593      	str	r3, [r2, #88]	; 0x58
 8005d26:	4b3d      	ldr	r3, [pc, #244]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d32:	2301      	movs	r3, #1
 8005d34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d36:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a39      	ldr	r2, [pc, #228]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d42:	f7fc fc7f 	bl	8002644 <HAL_GetTick>
 8005d46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d48:	e009      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fc fc7b 	bl	8002644 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d902      	bls.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d5c:	e005      	b.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5e:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ef      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d6a:	7cfb      	ldrb	r3, [r7, #19]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d159      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01e      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d019      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9e:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fc fc3b 	bl	8002644 <HAL_GetTick>
 8005dce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd0:	e00b      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fc fc37 	bl	8002644 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d902      	bls.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	74fb      	strb	r3, [r7, #19]
            break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0ec      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005df8:	7cfb      	ldrb	r3, [r7, #19]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10b      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e16:	7cfb      	ldrb	r3, [r7, #19]
 8005e18:	74bb      	strb	r3, [r7, #18]
 8005e1a:	e005      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e28:	7c7b      	ldrb	r3, [r7, #17]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d105      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2e:	4ba7      	ldr	r3, [pc, #668]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	4aa6      	ldr	r2, [pc, #664]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e46:	4ba1      	ldr	r3, [pc, #644]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f023 0203 	bic.w	r2, r3, #3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	499d      	ldr	r1, [pc, #628]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e68:	4b98      	ldr	r3, [pc, #608]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f023 020c 	bic.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4995      	ldr	r1, [pc, #596]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e8a:	4b90      	ldr	r3, [pc, #576]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	498c      	ldr	r1, [pc, #560]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005eac:	4b87      	ldr	r3, [pc, #540]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	4984      	ldr	r1, [pc, #528]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ece:	4b7f      	ldr	r3, [pc, #508]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	497b      	ldr	r1, [pc, #492]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef0:	4b76      	ldr	r3, [pc, #472]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	4973      	ldr	r1, [pc, #460]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f12:	4b6e      	ldr	r3, [pc, #440]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	496a      	ldr	r1, [pc, #424]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f34:	4b65      	ldr	r3, [pc, #404]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	4962      	ldr	r1, [pc, #392]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f56:	4b5d      	ldr	r3, [pc, #372]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4959      	ldr	r1, [pc, #356]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f78:	4b54      	ldr	r3, [pc, #336]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f7e:	f023 0203 	bic.w	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	4951      	ldr	r1, [pc, #324]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f9a:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4948      	ldr	r1, [pc, #288]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fbc:	4b43      	ldr	r3, [pc, #268]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	4940      	ldr	r1, [pc, #256]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fda:	d105      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fdc:	4b3b      	ldr	r3, [pc, #236]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ff4:	4b35      	ldr	r3, [pc, #212]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	4932      	ldr	r1, [pc, #200]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006012:	d105      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006014:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800601e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d015      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800602c:	4b27      	ldr	r3, [pc, #156]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	4924      	ldr	r1, [pc, #144]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800604a:	d105      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800604c:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006056:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d015      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	4916      	ldr	r1, [pc, #88]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006082:	d105      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006084:	4b11      	ldr	r3, [pc, #68]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a10      	ldr	r2, [pc, #64]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800608e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d019      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	4908      	ldr	r1, [pc, #32]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ba:	d109      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060bc:	4b03      	ldr	r3, [pc, #12]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a02      	ldr	r2, [pc, #8]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c6:	60d3      	str	r3, [r2, #12]
 80060c8:	e002      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d015      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060dc:	4b29      	ldr	r3, [pc, #164]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	4926      	ldr	r1, [pc, #152]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fa:	d105      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060fc:	4b21      	ldr	r3, [pc, #132]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a20      	ldr	r2, [pc, #128]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006106:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006122:	4918      	ldr	r1, [pc, #96]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d105      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800613a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d015      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615a:	490a      	ldr	r1, [pc, #40]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800616a:	d105      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4a04      	ldr	r2, [pc, #16]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006176:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006178:	7cbb      	ldrb	r3, [r7, #18]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e049      	b.n	800622e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fc f874 	bl	800229c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 ff68 	bl	800709c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e04c      	b.n	80062ea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <HAL_TIM_Base_Start+0xc0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d01d      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a22      	ldr	r2, [pc, #136]	; (80062fc <HAL_TIM_Base_Start+0xc4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d018      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <HAL_TIM_Base_Start+0xc8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <HAL_TIM_Base_Start+0xcc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00e      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <HAL_TIM_Base_Start+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <HAL_TIM_Base_Start+0xd4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_Base_Start+0x70>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <HAL_TIM_Base_Start+0xd8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d115      	bne.n	80062d4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	4b19      	ldr	r3, [pc, #100]	; (8006314 <HAL_TIM_Base_Start+0xdc>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d015      	beq.n	80062e6 <HAL_TIM_Base_Start+0xae>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d011      	beq.n	80062e6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d2:	e008      	b.n	80062e6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e000      	b.n	80062e8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40000c00 	.word	0x40000c00
 8006308:	40013400 	.word	0x40013400
 800630c:	40014000 	.word	0x40014000
 8006310:	40015000 	.word	0x40015000
 8006314:	00010007 	.word	0x00010007

08006318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e054      	b.n	80063da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a26      	ldr	r2, [pc, #152]	; (80063e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d022      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d01d      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d018      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00e      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d009      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_TIM_Base_Start_IT+0xe4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x80>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <HAL_TIM_Base_Start_IT+0xe8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d115      	bne.n	80063c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	4b19      	ldr	r3, [pc, #100]	; (8006404 <HAL_TIM_Base_Start_IT+0xec>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d015      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0xbe>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b0:	d011      	beq.n	80063d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c2:	e008      	b.n	80063d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e000      	b.n	80063d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40015000 	.word	0x40015000
 8006404:	00010007 	.word	0x00010007

08006408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e049      	b.n	80064ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f841 	bl	80064b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f000 fe28 	bl	800709c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <HAL_TIM_PWM_Start+0x24>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e03c      	b.n	800656a <HAL_TIM_PWM_Start+0x9e>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d109      	bne.n	800650a <HAL_TIM_PWM_Start+0x3e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	e02f      	b.n	800656a <HAL_TIM_PWM_Start+0x9e>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d109      	bne.n	8006524 <HAL_TIM_PWM_Start+0x58>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e022      	b.n	800656a <HAL_TIM_PWM_Start+0x9e>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d109      	bne.n	800653e <HAL_TIM_PWM_Start+0x72>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e015      	b.n	800656a <HAL_TIM_PWM_Start+0x9e>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b10      	cmp	r3, #16
 8006542:	d109      	bne.n	8006558 <HAL_TIM_PWM_Start+0x8c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e008      	b.n	800656a <HAL_TIM_PWM_Start+0x9e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e0a6      	b.n	80066c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xb6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006580:	e023      	b.n	80065ca <HAL_TIM_PWM_Start+0xfe>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xc6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006590:	e01b      	b.n	80065ca <HAL_TIM_PWM_Start+0xfe>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xd6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a0:	e013      	b.n	80065ca <HAL_TIM_PWM_Start+0xfe>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b0c      	cmp	r3, #12
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start+0xe6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065b0:	e00b      	b.n	80065ca <HAL_TIM_PWM_Start+0xfe>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_PWM_Start+0xf6>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c0:	e003      	b.n	80065ca <HAL_TIM_PWM_Start+0xfe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2201      	movs	r2, #1
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 f9dc 	bl	8007990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3a      	ldr	r2, [pc, #232]	; (80066c8 <HAL_TIM_PWM_Start+0x1fc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <HAL_TIM_PWM_Start+0x148>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a39      	ldr	r2, [pc, #228]	; (80066cc <HAL_TIM_PWM_Start+0x200>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_TIM_PWM_Start+0x148>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a37      	ldr	r2, [pc, #220]	; (80066d0 <HAL_TIM_PWM_Start+0x204>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_TIM_PWM_Start+0x148>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a36      	ldr	r2, [pc, #216]	; (80066d4 <HAL_TIM_PWM_Start+0x208>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_TIM_PWM_Start+0x148>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a34      	ldr	r2, [pc, #208]	; (80066d8 <HAL_TIM_PWM_Start+0x20c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_TIM_PWM_Start+0x148>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a33      	ldr	r2, [pc, #204]	; (80066dc <HAL_TIM_PWM_Start+0x210>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <HAL_TIM_PWM_Start+0x14c>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <HAL_TIM_PWM_Start+0x14e>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800662c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a25      	ldr	r2, [pc, #148]	; (80066c8 <HAL_TIM_PWM_Start+0x1fc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006640:	d01d      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <HAL_TIM_PWM_Start+0x214>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <HAL_TIM_PWM_Start+0x218>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <HAL_TIM_PWM_Start+0x21c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <HAL_TIM_PWM_Start+0x200>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <HAL_TIM_PWM_Start+0x204>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_TIM_PWM_Start+0x1b2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_TIM_PWM_Start+0x210>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d115      	bne.n	80066aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_TIM_PWM_Start+0x220>)
 8006686:	4013      	ands	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b06      	cmp	r3, #6
 800668e:	d015      	beq.n	80066bc <HAL_TIM_PWM_Start+0x1f0>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d011      	beq.n	80066bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a8:	e008      	b.n	80066bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e000      	b.n	80066be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40013400 	.word	0x40013400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800
 80066dc:	40015000 	.word	0x40015000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	00010007 	.word	0x00010007

080066f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e097      	b.n	8006834 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fb fe0b 	bl	8002334 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006734:	f023 0307 	bic.w	r3, r3, #7
 8006738:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f000 fca9 	bl	800709c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	4313      	orrs	r3, r2
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006790:	f023 030c 	bic.w	r3, r3, #12
 8006794:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	4313      	orrs	r3, r2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	031b      	lsls	r3, r3, #12
 80067c0:	4313      	orrs	r3, r2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	4313      	orrs	r3, r2
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006854:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800685c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006864:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d110      	bne.n	800688e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d102      	bne.n	8006878 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006872:	7b7b      	ldrb	r3, [r7, #13]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d001      	beq.n	800687c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e069      	b.n	8006950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688c:	e031      	b.n	80068f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d110      	bne.n	80068b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800689a:	7b3b      	ldrb	r3, [r7, #12]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e055      	b.n	8006950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b4:	e01d      	b.n	80068f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d108      	bne.n	80068ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d105      	bne.n	80068ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c2:	7b7b      	ldrb	r3, [r7, #13]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d102      	bne.n	80068ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068c8:	7b3b      	ldrb	r3, [r7, #12]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d001      	beq.n	80068d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e03e      	b.n	8006950 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_TIM_Encoder_Start+0xc4>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d008      	beq.n	8006910 <HAL_TIM_Encoder_Start+0xd4>
 80068fe:	e00f      	b.n	8006920 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f841 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 800690e:	e016      	b.n	800693e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	2104      	movs	r1, #4
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f839 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 800691e:	e00e      	b.n	800693e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f001 f831 	bl	8007990 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2201      	movs	r2, #1
 8006934:	2104      	movs	r1, #4
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f82a 	bl	8007990 <TIM_CCxChannelCmd>
      break;
 800693c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f042 0201 	orr.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0202 	mvn.w	r2, #2
 800698c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fb5c 	bl	8007060 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fb4e 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fb5f 	bl	8007074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0204 	mvn.w	r2, #4
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb36 	bl	8007060 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fb28 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fb39 	bl	8007074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d020      	beq.n	8006a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01b      	beq.n	8006a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0208 	mvn.w	r2, #8
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb10 	bl	8007060 <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb02 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb13 	bl	8007074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d020      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01b      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0210 	mvn.w	r2, #16
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2208      	movs	r2, #8
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 faea 	bl	8007060 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fadc 	bl	800704c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 faed 	bl	8007074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0201 	mvn.w	r2, #1
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fb f8d6 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00c      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 f8a9 	bl	8007c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00c      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f8a1 	bl	8007c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00c      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 faa7 	bl	8007088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00c      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f06f 0220 	mvn.w	r2, #32
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f869 	bl	8007c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00c      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f875 	bl	8007c6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00c      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f86d 	bl	8007c80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f865 	bl	8007c94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f85d 	bl	8007ca8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e0ff      	b.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b14      	cmp	r3, #20
 8006c22:	f200 80f0 	bhi.w	8006e06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006e07 	.word	0x08006e07
 8006c34:	08006e07 	.word	0x08006e07
 8006c38:	08006e07 	.word	0x08006e07
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006e07 	.word	0x08006e07
 8006c44:	08006e07 	.word	0x08006e07
 8006c48:	08006e07 	.word	0x08006e07
 8006c4c:	08006d03 	.word	0x08006d03
 8006c50:	08006e07 	.word	0x08006e07
 8006c54:	08006e07 	.word	0x08006e07
 8006c58:	08006e07 	.word	0x08006e07
 8006c5c:	08006d43 	.word	0x08006d43
 8006c60:	08006e07 	.word	0x08006e07
 8006c64:	08006e07 	.word	0x08006e07
 8006c68:	08006e07 	.word	0x08006e07
 8006c6c:	08006d85 	.word	0x08006d85
 8006c70:	08006e07 	.word	0x08006e07
 8006c74:	08006e07 	.word	0x08006e07
 8006c78:	08006e07 	.word	0x08006e07
 8006c7c:	08006dc5 	.word	0x08006dc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fabc 	bl	8007204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0204 	bic.w	r2, r2, #4
 8006caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6999      	ldr	r1, [r3, #24]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	619a      	str	r2, [r3, #24]
      break;
 8006cbe:	e0a5      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fb36 	bl	8007338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6999      	ldr	r1, [r3, #24]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	619a      	str	r2, [r3, #24]
      break;
 8006d00:	e084      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fba9 	bl	8007460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0208 	orr.w	r2, r2, #8
 8006d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0204 	bic.w	r2, r2, #4
 8006d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69d9      	ldr	r1, [r3, #28]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	61da      	str	r2, [r3, #28]
      break;
 8006d40:	e064      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fc1b 	bl	8007584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69d9      	ldr	r1, [r3, #28]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	021a      	lsls	r2, r3, #8
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	61da      	str	r2, [r3, #28]
      break;
 8006d82:	e043      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fc8e 	bl	80076ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0204 	bic.w	r2, r2, #4
 8006dae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006dc2:	e023      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fcd8 	bl	8007780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006e04:	e002      	b.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop

08006e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_TIM_ConfigClockSource+0x1c>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e0f6      	b.n	800702a <HAL_TIM_ConfigClockSource+0x20a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a6f      	ldr	r2, [pc, #444]	; (8007034 <HAL_TIM_ConfigClockSource+0x214>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 80c1 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006e7c:	4a6d      	ldr	r2, [pc, #436]	; (8007034 <HAL_TIM_ConfigClockSource+0x214>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f200 80c6 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e84:	4a6c      	ldr	r2, [pc, #432]	; (8007038 <HAL_TIM_ConfigClockSource+0x218>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f000 80b9 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006e8c:	4a6a      	ldr	r2, [pc, #424]	; (8007038 <HAL_TIM_ConfigClockSource+0x218>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f200 80be 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e94:	4a69      	ldr	r2, [pc, #420]	; (800703c <HAL_TIM_ConfigClockSource+0x21c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f000 80b1 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006e9c:	4a67      	ldr	r2, [pc, #412]	; (800703c <HAL_TIM_ConfigClockSource+0x21c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f200 80b6 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea4:	4a66      	ldr	r2, [pc, #408]	; (8007040 <HAL_TIM_ConfigClockSource+0x220>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f000 80a9 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006eac:	4a64      	ldr	r2, [pc, #400]	; (8007040 <HAL_TIM_ConfigClockSource+0x220>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f200 80ae 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb4:	4a63      	ldr	r2, [pc, #396]	; (8007044 <HAL_TIM_ConfigClockSource+0x224>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f000 80a1 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006ebc:	4a61      	ldr	r2, [pc, #388]	; (8007044 <HAL_TIM_ConfigClockSource+0x224>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f200 80a6 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec4:	4a60      	ldr	r2, [pc, #384]	; (8007048 <HAL_TIM_ConfigClockSource+0x228>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f000 8099 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006ecc:	4a5e      	ldr	r2, [pc, #376]	; (8007048 <HAL_TIM_ConfigClockSource+0x228>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f200 809e 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ed8:	f000 8091 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006edc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ee0:	f200 8096 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee8:	f000 8089 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef0:	f200 808e 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef8:	d03e      	beq.n	8006f78 <HAL_TIM_ConfigClockSource+0x158>
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efe:	f200 8087 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	f000 8086 	beq.w	8007016 <HAL_TIM_ConfigClockSource+0x1f6>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d87f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d01a      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x12a>
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d87b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d050      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x19e>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d877      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f20:	2b50      	cmp	r3, #80	; 0x50
 8006f22:	d03c      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x17e>
 8006f24:	2b50      	cmp	r3, #80	; 0x50
 8006f26:	d873      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d058      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x1be>
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d86f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d064      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d86b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d060      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d867      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d05c      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d05a      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x1de>
 8006f48:	e062      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	f000 fcf9 	bl	8007950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	609a      	str	r2, [r3, #8]
      break;
 8006f76:	e04f      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f88:	f000 fce2 	bl	8007950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f9a:	609a      	str	r2, [r3, #8]
      break;
 8006f9c:	e03c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fc54 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2150      	movs	r1, #80	; 0x50
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fcad 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e02c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 fc73 	bl	80078b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2160      	movs	r1, #96	; 0x60
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fc9d 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e01c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 fc34 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2140      	movs	r1, #64	; 0x40
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fc8d 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e00c      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f000 fc84 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 800700e:	e003      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
      break;
 8007014:	e000      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	00100070 	.word	0x00100070
 8007038:	00100060 	.word	0x00100060
 800703c:	00100050 	.word	0x00100050
 8007040:	00100040 	.word	0x00100040
 8007044:	00100030 	.word	0x00100030
 8007048:	00100020 	.word	0x00100020

0800704c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a4c      	ldr	r2, [pc, #304]	; (80071e0 <TIM_Base_SetConfig+0x144>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d017      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ba:	d013      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a49      	ldr	r2, [pc, #292]	; (80071e4 <TIM_Base_SetConfig+0x148>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00f      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a48      	ldr	r2, [pc, #288]	; (80071e8 <TIM_Base_SetConfig+0x14c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a47      	ldr	r2, [pc, #284]	; (80071ec <TIM_Base_SetConfig+0x150>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d007      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a46      	ldr	r2, [pc, #280]	; (80071f0 <TIM_Base_SetConfig+0x154>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a45      	ldr	r2, [pc, #276]	; (80071f4 <TIM_Base_SetConfig+0x158>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d108      	bne.n	80070f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a39      	ldr	r2, [pc, #228]	; (80071e0 <TIM_Base_SetConfig+0x144>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d023      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007104:	d01f      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a36      	ldr	r2, [pc, #216]	; (80071e4 <TIM_Base_SetConfig+0x148>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01b      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a35      	ldr	r2, [pc, #212]	; (80071e8 <TIM_Base_SetConfig+0x14c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d017      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a34      	ldr	r2, [pc, #208]	; (80071ec <TIM_Base_SetConfig+0x150>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a33      	ldr	r2, [pc, #204]	; (80071f0 <TIM_Base_SetConfig+0x154>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00f      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a33      	ldr	r2, [pc, #204]	; (80071f8 <TIM_Base_SetConfig+0x15c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a32      	ldr	r2, [pc, #200]	; (80071fc <TIM_Base_SetConfig+0x160>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a31      	ldr	r2, [pc, #196]	; (8007200 <TIM_Base_SetConfig+0x164>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2c      	ldr	r2, [pc, #176]	; (80071f4 <TIM_Base_SetConfig+0x158>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <TIM_Base_SetConfig+0x144>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d013      	beq.n	80071ac <TIM_Base_SetConfig+0x110>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <TIM_Base_SetConfig+0x154>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_Base_SetConfig+0x110>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <TIM_Base_SetConfig+0x15c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_Base_SetConfig+0x110>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a19      	ldr	r2, [pc, #100]	; (80071fc <TIM_Base_SetConfig+0x160>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0x110>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a18      	ldr	r2, [pc, #96]	; (8007200 <TIM_Base_SetConfig+0x164>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0x110>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <TIM_Base_SetConfig+0x158>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]
  }
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	40015000 	.word	0x40015000
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f023 0201 	bic.w	r2, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0302 	bic.w	r3, r3, #2
 8007250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a30      	ldr	r2, [pc, #192]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2f      	ldr	r2, [pc, #188]	; (8007324 <TIM_OC1_SetConfig+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <TIM_OC1_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a2d      	ldr	r2, [pc, #180]	; (800732c <TIM_OC1_SetConfig+0x128>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <TIM_OC1_SetConfig+0x12c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC1_SetConfig+0x88>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <TIM_OC1_SetConfig+0x130>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10c      	bne.n	80072a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0308 	bic.w	r3, r3, #8
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4313      	orrs	r3, r2
 800729c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 0304 	bic.w	r3, r3, #4
 80072a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <TIM_OC1_SetConfig+0x120>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00f      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <TIM_OC1_SetConfig+0x124>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1a      	ldr	r2, [pc, #104]	; (800732c <TIM_OC1_SetConfig+0x128>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d007      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a19      	ldr	r2, [pc, #100]	; (8007330 <TIM_OC1_SetConfig+0x12c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC1_SetConfig+0xd2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a18      	ldr	r2, [pc, #96]	; (8007334 <TIM_OC1_SetConfig+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d111      	bne.n	80072fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800
 8007334:	40015000 	.word	0x40015000

08007338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f023 0210 	bic.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0320 	bic.w	r3, r3, #32
 8007386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a2c      	ldr	r2, [pc, #176]	; (8007448 <TIM_OC2_SetConfig+0x110>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_OC2_SetConfig+0x74>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a2b      	ldr	r2, [pc, #172]	; (800744c <TIM_OC2_SetConfig+0x114>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_OC2_SetConfig+0x74>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <TIM_OC2_SetConfig+0x118>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d10d      	bne.n	80073c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <TIM_OC2_SetConfig+0x110>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <TIM_OC2_SetConfig+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <TIM_OC2_SetConfig+0x11c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <TIM_OC2_SetConfig+0x120>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1c      	ldr	r2, [pc, #112]	; (800745c <TIM_OC2_SetConfig+0x124>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0xc0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC2_SetConfig+0x118>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40013400 	.word	0x40013400
 8007450:	40015000 	.word	0x40015000
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0303 	bic.w	r3, r3, #3
 800749a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2b      	ldr	r2, [pc, #172]	; (800756c <TIM_OC3_SetConfig+0x10c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_OC3_SetConfig+0x72>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <TIM_OC3_SetConfig+0x110>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_OC3_SetConfig+0x72>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a29      	ldr	r2, [pc, #164]	; (8007574 <TIM_OC3_SetConfig+0x114>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10d      	bne.n	80074ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <TIM_OC3_SetConfig+0x10c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a1d      	ldr	r2, [pc, #116]	; (8007570 <TIM_OC3_SetConfig+0x110>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00f      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <TIM_OC3_SetConfig+0x118>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1c      	ldr	r2, [pc, #112]	; (800757c <TIM_OC3_SetConfig+0x11c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1b      	ldr	r2, [pc, #108]	; (8007580 <TIM_OC3_SetConfig+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_OC3_SetConfig+0xbe>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a16      	ldr	r2, [pc, #88]	; (8007574 <TIM_OC3_SetConfig+0x114>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d113      	bne.n	8007546 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800752c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40013400 	.word	0x40013400
 8007574:	40015000 	.word	0x40015000
 8007578:	40014000 	.word	0x40014000
 800757c:	40014400 	.word	0x40014400
 8007580:	40014800 	.word	0x40014800

08007584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	031b      	lsls	r3, r3, #12
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <TIM_OC4_SetConfig+0x110>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d007      	beq.n	80075f8 <TIM_OC4_SetConfig+0x74>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a2b      	ldr	r2, [pc, #172]	; (8007698 <TIM_OC4_SetConfig+0x114>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d003      	beq.n	80075f8 <TIM_OC4_SetConfig+0x74>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a2a      	ldr	r2, [pc, #168]	; (800769c <TIM_OC4_SetConfig+0x118>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d10d      	bne.n	8007614 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	031b      	lsls	r3, r3, #12
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <TIM_OC4_SetConfig+0x110>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <TIM_OC4_SetConfig+0x114>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00f      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <TIM_OC4_SetConfig+0x11c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <TIM_OC4_SetConfig+0x120>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <TIM_OC4_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC4_SetConfig+0xc0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <TIM_OC4_SetConfig+0x118>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d113      	bne.n	800766c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800764a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007652:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	019b      	lsls	r3, r3, #6
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	019b      	lsls	r3, r3, #6
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40013400 	.word	0x40013400
 800769c:	40015000 	.word	0x40015000
 80076a0:	40014000 	.word	0x40014000
 80076a4:	40014400 	.word	0x40014400
 80076a8:	40014800 	.word	0x40014800

080076ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a19      	ldr	r2, [pc, #100]	; (8007768 <TIM_OC5_SetConfig+0xbc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <TIM_OC5_SetConfig+0xc0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00f      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <TIM_OC5_SetConfig+0xc4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00b      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a16      	ldr	r2, [pc, #88]	; (8007774 <TIM_OC5_SetConfig+0xc8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <TIM_OC5_SetConfig+0xcc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_OC5_SetConfig+0x82>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a14      	ldr	r2, [pc, #80]	; (800777c <TIM_OC5_SetConfig+0xd0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d109      	bne.n	8007742 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40013400 	.word	0x40013400
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800
 800777c:	40015000 	.word	0x40015000

08007780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	051b      	lsls	r3, r3, #20
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a1a      	ldr	r2, [pc, #104]	; (8007840 <TIM_OC6_SetConfig+0xc0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a19      	ldr	r2, [pc, #100]	; (8007844 <TIM_OC6_SetConfig+0xc4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a18      	ldr	r2, [pc, #96]	; (8007848 <TIM_OC6_SetConfig+0xc8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC6_SetConfig+0xcc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC6_SetConfig+0xd0>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC6_SetConfig+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <TIM_OC6_SetConfig+0xd4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d109      	bne.n	8007818 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800
 8007854:	40015000 	.word	0x40015000

08007858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f023 030a 	bic.w	r3, r3, #10
 8007894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b087      	sub	sp, #28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	f023 0210 	bic.w	r2, r3, #16
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	f043 0307 	orr.w	r3, r3, #7
 800793c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800796a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	431a      	orrs	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4313      	orrs	r3, r2
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	609a      	str	r2, [r3, #8]
}
 8007984:	bf00      	nop
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 031f 	and.w	r3, r3, #31
 80079a2:	2201      	movs	r2, #1
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	43db      	mvns	r3, r3
 80079b2:	401a      	ands	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1a      	ldr	r2, [r3, #32]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	fa01 f303 	lsl.w	r3, r1, r3
 80079c8:	431a      	orrs	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e074      	b.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a34      	ldr	r2, [pc, #208]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d009      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a33      	ldr	r2, [pc, #204]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d004      	beq.n	8007a32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a31      	ldr	r2, [pc, #196]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d108      	bne.n	8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a21      	ldr	r2, [pc, #132]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d022      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a74:	d01d      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d018      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d013      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00e      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d009      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a18      	ldr	r2, [pc, #96]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d004      	beq.n	8007ab2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a11      	ldr	r2, [pc, #68]	; (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d10c      	bne.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40015000 	.word	0x40015000
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	40014000 	.word	0x40014000

08007b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e078      	b.n	8007c16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	; (8007c24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d11c      	bne.n	8007c04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	051b      	lsls	r3, r3, #20
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40015000 	.word	0x40015000

08007c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e042      	b.n	8007d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fa fa1f 	bl	8002124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2224      	movs	r2, #36	; 0x24
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0201 	bic.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 ff48 	bl	8008b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc49 	bl	80085a4 <UART_SetConfig>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e01b      	b.n	8007d54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ffc7 	bl	8008ce0 <UART_CheckIdleState>
 8007d52:	4603      	mov	r3, r0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b091      	sub	sp, #68	; 0x44
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d178      	bne.n	8007e66 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Transmit_IT+0x24>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e071      	b.n	8007e68 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2221      	movs	r2, #33	; 0x21
 8007dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007db8:	d12a      	bne.n	8007e10 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc2:	d107      	bne.n	8007dd4 <HAL_UART_Transmit_IT+0x78>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a29      	ldr	r2, [pc, #164]	; (8007e74 <HAL_UART_Transmit_IT+0x118>)
 8007dd0:	679a      	str	r2, [r3, #120]	; 0x78
 8007dd2:	e002      	b.n	8007dda <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a28      	ldr	r2, [pc, #160]	; (8007e78 <HAL_UART_Transmit_IT+0x11c>)
 8007dd8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3308      	adds	r3, #8
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8007dfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <HAL_UART_Transmit_IT+0x7e>
 8007e0e:	e028      	b.n	8007e62 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e18:	d107      	bne.n	8007e2a <HAL_UART_Transmit_IT+0xce>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <HAL_UART_Transmit_IT+0x120>)
 8007e26:	679a      	str	r2, [r3, #120]	; 0x78
 8007e28:	e002      	b.n	8007e30 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a14      	ldr	r2, [pc, #80]	; (8007e80 <HAL_UART_Transmit_IT+0x124>)
 8007e2e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4e:	623b      	str	r3, [r7, #32]
 8007e50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	69f9      	ldr	r1, [r7, #28]
 8007e54:	6a3a      	ldr	r2, [r7, #32]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e6      	bne.n	8007e30 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3744      	adds	r7, #68	; 0x44
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	080094a7 	.word	0x080094a7
 8007e78:	080093c7 	.word	0x080093c7
 8007e7c:	08009305 	.word	0x08009305
 8007e80:	0800924d 	.word	0x0800924d

08007e84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	; 0x28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d137      	bne.n	8007f0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_UART_Receive_IT+0x24>
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e030      	b.n	8007f0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <HAL_UART_Receive_IT+0x94>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d01f      	beq.n	8007efc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d018      	beq.n	8007efc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	69f9      	ldr	r1, [r7, #28]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e6      	bne.n	8007eca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007efc:	88fb      	ldrh	r3, [r7, #6]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f804 	bl	8008f10 <UART_Start_Receive_IT>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	e000      	b.n	8007f0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3728      	adds	r7, #40	; 0x28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40008000 	.word	0x40008000

08007f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b0ba      	sub	sp, #232	; 0xe8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11b      	bne.n	8007f90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d015      	beq.n	8007f90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d105      	bne.n	8007f7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 82e3 	beq.w	800854c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
      }
      return;
 8007f8e:	e2dd      	b.n	800854c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8123 	beq.w	80081e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f9e:	4b8d      	ldr	r3, [pc, #564]	; (80081d4 <HAL_UART_IRQHandler+0x2b8>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007faa:	4b8b      	ldr	r3, [pc, #556]	; (80081d8 <HAL_UART_IRQHandler+0x2bc>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8116 	beq.w	80081e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d011      	beq.n	8007fe4 <HAL_UART_IRQHandler+0xc8>
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fda:	f043 0201 	orr.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d011      	beq.n	8008014 <HAL_UART_IRQHandler+0xf8>
 8007ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2202      	movs	r2, #2
 8008002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	f043 0204 	orr.w	r2, r3, #4
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d011      	beq.n	8008044 <HAL_UART_IRQHandler+0x128>
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00b      	beq.n	8008044 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2204      	movs	r2, #4
 8008032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803a:	f043 0202 	orr.w	r2, r3, #2
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008054:	f003 0320 	and.w	r3, r3, #32
 8008058:	2b00      	cmp	r3, #0
 800805a:	d105      	bne.n	8008068 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800805c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008060:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <HAL_UART_IRQHandler+0x2b8>)
 8008062:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2208      	movs	r2, #8
 800806e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	f043 0208 	orr.w	r2, r3, #8
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008088:	2b00      	cmp	r3, #0
 800808a:	d012      	beq.n	80080b2 <HAL_UART_IRQHandler+0x196>
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00c      	beq.n	80080b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	f043 0220 	orr.w	r2, r3, #32
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8249 	beq.w	8008550 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d013      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d005      	beq.n	8008116 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800810a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800810e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008112:	2b00      	cmp	r3, #0
 8008114:	d054      	beq.n	80081c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f81c 	bl	8009154 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d146      	bne.n	80081b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3308      	adds	r3, #8
 8008130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800815a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800816e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d9      	bne.n	800812a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817c:	2b00      	cmp	r3, #0
 800817e:	d017      	beq.n	80081b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008186:	4a15      	ldr	r2, [pc, #84]	; (80081dc <HAL_UART_IRQHandler+0x2c0>)
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008190:	4618      	mov	r0, r3
 8008192:	f7fc fc47 	bl	8004a24 <HAL_DMA_Abort_IT>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d019      	beq.n	80081d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80081aa:	4610      	mov	r0, r2
 80081ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ae:	e00f      	b.n	80081d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f9e1 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b6:	e00b      	b.n	80081d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9dd 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081be:	e007      	b.n	80081d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f9d9 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80081ce:	e1bf      	b.n	8008550 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	bf00      	nop
    return;
 80081d2:	e1bd      	b.n	8008550 <HAL_UART_IRQHandler+0x634>
 80081d4:	10000001 	.word	0x10000001
 80081d8:	04000120 	.word	0x04000120
 80081dc:	08009221 	.word	0x08009221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	f040 8153 	bne.w	8008490 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 814c 	beq.w	8008490 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8145 	beq.w	8008490 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2210      	movs	r2, #16
 800820c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	f040 80bb 	bne.w	8008394 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800822c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 818f 	beq.w	8008554 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800823c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008240:	429a      	cmp	r2, r3
 8008242:	f080 8187 	bcs.w	8008554 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800824c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	f040 8087 	bne.w	8008372 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800827c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800828e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008292:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800829a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1da      	bne.n	8008264 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e1      	bne.n	80082ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800830e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800831c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e3      	bne.n	80082ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008340:	f023 0310 	bic.w	r3, r3, #16
 8008344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	65bb      	str	r3, [r7, #88]	; 0x58
 8008354:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e4      	bne.n	8008330 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc fb00 	bl	8004972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008384:	b29b      	uxth	r3, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	b29b      	uxth	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f8fd 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008392:	e0df      	b.n	8008554 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80d1 	beq.w	8008558 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80083b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80cc 	beq.w	8008558 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e2:	647b      	str	r3, [r7, #68]	; 0x44
 80083e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e4      	bne.n	80083c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	623b      	str	r3, [r7, #32]
   return(result);
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3308      	adds	r3, #8
 800841a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800841e:	633a      	str	r2, [r7, #48]	; 0x30
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e1      	bne.n	80083f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	60fb      	str	r3, [r7, #12]
   return(result);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0310 	bic.w	r3, r3, #16
 800845a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	617b      	str	r3, [r7, #20]
   return(result);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e4      	bne.n	8008446 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f87f 	bl	800858c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848e:	e063      	b.n	8008558 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00e      	beq.n	80084ba <HAL_UART_IRQHandler+0x59e>
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d008      	beq.n	80084ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fdb4 	bl	800a020 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b8:	e051      	b.n	800855e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d014      	beq.n	80084f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d03a      	beq.n	800855c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
    }
    return;
 80084ee:	e035      	b.n	800855c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <HAL_UART_IRQHandler+0x5f4>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f841 	bl	8009590 <UART_EndTransmit_IT>
    return;
 800850e:	e026      	b.n	800855e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <HAL_UART_IRQHandler+0x614>
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fd8d 	bl	800a048 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800852e:	e016      	b.n	800855e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d010      	beq.n	800855e <HAL_UART_IRQHandler+0x642>
 800853c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008540:	2b00      	cmp	r3, #0
 8008542:	da0c      	bge.n	800855e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fd75 	bl	800a034 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800854a:	e008      	b.n	800855e <HAL_UART_IRQHandler+0x642>
      return;
 800854c:	bf00      	nop
 800854e:	e006      	b.n	800855e <HAL_UART_IRQHandler+0x642>
    return;
 8008550:	bf00      	nop
 8008552:	e004      	b.n	800855e <HAL_UART_IRQHandler+0x642>
      return;
 8008554:	bf00      	nop
 8008556:	e002      	b.n	800855e <HAL_UART_IRQHandler+0x642>
      return;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <HAL_UART_IRQHandler+0x642>
    return;
 800855c:	bf00      	nop
  }
}
 800855e:	37e8      	adds	r7, #232	; 0xe8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085a8:	b08c      	sub	sp, #48	; 0x30
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	431a      	orrs	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4baa      	ldr	r3, [pc, #680]	; (800887c <UART_SetConfig+0x2d8>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085dc:	430b      	orrs	r3, r1
 80085de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a9f      	ldr	r2, [pc, #636]	; (8008880 <UART_SetConfig+0x2dc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860c:	4313      	orrs	r3, r2
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800861a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008624:	430b      	orrs	r3, r1
 8008626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f023 010f 	bic.w	r1, r3, #15
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a90      	ldr	r2, [pc, #576]	; (8008884 <UART_SetConfig+0x2e0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d125      	bne.n	8008694 <UART_SetConfig+0xf0>
 8008648:	4b8f      	ldr	r3, [pc, #572]	; (8008888 <UART_SetConfig+0x2e4>)
 800864a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	2b03      	cmp	r3, #3
 8008654:	d81a      	bhi.n	800868c <UART_SetConfig+0xe8>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0xb8>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	0800866d 	.word	0x0800866d
 8008660:	0800867d 	.word	0x0800867d
 8008664:	08008675 	.word	0x08008675
 8008668:	08008685 	.word	0x08008685
 800866c:	2301      	movs	r3, #1
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e116      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e112      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e10e      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e10a      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e106      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a7c      	ldr	r2, [pc, #496]	; (800888c <UART_SetConfig+0x2e8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d138      	bne.n	8008710 <UART_SetConfig+0x16c>
 800869e:	4b7a      	ldr	r3, [pc, #488]	; (8008888 <UART_SetConfig+0x2e4>)
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a4:	f003 030c 	and.w	r3, r3, #12
 80086a8:	2b0c      	cmp	r3, #12
 80086aa:	d82d      	bhi.n	8008708 <UART_SetConfig+0x164>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x110>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086e9 	.word	0x080086e9
 80086b8:	08008709 	.word	0x08008709
 80086bc:	08008709 	.word	0x08008709
 80086c0:	08008709 	.word	0x08008709
 80086c4:	080086f9 	.word	0x080086f9
 80086c8:	08008709 	.word	0x08008709
 80086cc:	08008709 	.word	0x08008709
 80086d0:	08008709 	.word	0x08008709
 80086d4:	080086f1 	.word	0x080086f1
 80086d8:	08008709 	.word	0x08008709
 80086dc:	08008709 	.word	0x08008709
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008701 	.word	0x08008701
 80086e8:	2300      	movs	r3, #0
 80086ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ee:	e0d8      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80086f0:	2302      	movs	r3, #2
 80086f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f6:	e0d4      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80086f8:	2304      	movs	r3, #4
 80086fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086fe:	e0d0      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008700:	2308      	movs	r3, #8
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008706:	e0cc      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008708:	2310      	movs	r3, #16
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870e:	e0c8      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a5e      	ldr	r2, [pc, #376]	; (8008890 <UART_SetConfig+0x2ec>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d125      	bne.n	8008766 <UART_SetConfig+0x1c2>
 800871a:	4b5b      	ldr	r3, [pc, #364]	; (8008888 <UART_SetConfig+0x2e4>)
 800871c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008724:	2b30      	cmp	r3, #48	; 0x30
 8008726:	d016      	beq.n	8008756 <UART_SetConfig+0x1b2>
 8008728:	2b30      	cmp	r3, #48	; 0x30
 800872a:	d818      	bhi.n	800875e <UART_SetConfig+0x1ba>
 800872c:	2b20      	cmp	r3, #32
 800872e:	d00a      	beq.n	8008746 <UART_SetConfig+0x1a2>
 8008730:	2b20      	cmp	r3, #32
 8008732:	d814      	bhi.n	800875e <UART_SetConfig+0x1ba>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <UART_SetConfig+0x19a>
 8008738:	2b10      	cmp	r3, #16
 800873a:	d008      	beq.n	800874e <UART_SetConfig+0x1aa>
 800873c:	e00f      	b.n	800875e <UART_SetConfig+0x1ba>
 800873e:	2300      	movs	r3, #0
 8008740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008744:	e0ad      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008746:	2302      	movs	r3, #2
 8008748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874c:	e0a9      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800874e:	2304      	movs	r3, #4
 8008750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008754:	e0a5      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008756:	2308      	movs	r3, #8
 8008758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800875c:	e0a1      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800875e:	2310      	movs	r3, #16
 8008760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008764:	e09d      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a4a      	ldr	r2, [pc, #296]	; (8008894 <UART_SetConfig+0x2f0>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d125      	bne.n	80087bc <UART_SetConfig+0x218>
 8008770:	4b45      	ldr	r3, [pc, #276]	; (8008888 <UART_SetConfig+0x2e4>)
 8008772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800877a:	2bc0      	cmp	r3, #192	; 0xc0
 800877c:	d016      	beq.n	80087ac <UART_SetConfig+0x208>
 800877e:	2bc0      	cmp	r3, #192	; 0xc0
 8008780:	d818      	bhi.n	80087b4 <UART_SetConfig+0x210>
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d00a      	beq.n	800879c <UART_SetConfig+0x1f8>
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d814      	bhi.n	80087b4 <UART_SetConfig+0x210>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <UART_SetConfig+0x1f0>
 800878e:	2b40      	cmp	r3, #64	; 0x40
 8008790:	d008      	beq.n	80087a4 <UART_SetConfig+0x200>
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x210>
 8008794:	2300      	movs	r3, #0
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879a:	e082      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800879c:	2302      	movs	r3, #2
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a2:	e07e      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087aa:	e07a      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b2:	e076      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e072      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a35      	ldr	r2, [pc, #212]	; (8008898 <UART_SetConfig+0x2f4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d12a      	bne.n	800881c <UART_SetConfig+0x278>
 80087c6:	4b30      	ldr	r3, [pc, #192]	; (8008888 <UART_SetConfig+0x2e4>)
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d4:	d01a      	beq.n	800880c <UART_SetConfig+0x268>
 80087d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087da:	d81b      	bhi.n	8008814 <UART_SetConfig+0x270>
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e0:	d00c      	beq.n	80087fc <UART_SetConfig+0x258>
 80087e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e6:	d815      	bhi.n	8008814 <UART_SetConfig+0x270>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <UART_SetConfig+0x250>
 80087ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f0:	d008      	beq.n	8008804 <UART_SetConfig+0x260>
 80087f2:	e00f      	b.n	8008814 <UART_SetConfig+0x270>
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fa:	e052      	b.n	80088a2 <UART_SetConfig+0x2fe>
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008802:	e04e      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880a:	e04a      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008812:	e046      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e042      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a17      	ldr	r2, [pc, #92]	; (8008880 <UART_SetConfig+0x2dc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d13a      	bne.n	800889c <UART_SetConfig+0x2f8>
 8008826:	4b18      	ldr	r3, [pc, #96]	; (8008888 <UART_SetConfig+0x2e4>)
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008834:	d01a      	beq.n	800886c <UART_SetConfig+0x2c8>
 8008836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800883a:	d81b      	bhi.n	8008874 <UART_SetConfig+0x2d0>
 800883c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008840:	d00c      	beq.n	800885c <UART_SetConfig+0x2b8>
 8008842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008846:	d815      	bhi.n	8008874 <UART_SetConfig+0x2d0>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <UART_SetConfig+0x2b0>
 800884c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008850:	d008      	beq.n	8008864 <UART_SetConfig+0x2c0>
 8008852:	e00f      	b.n	8008874 <UART_SetConfig+0x2d0>
 8008854:	2300      	movs	r3, #0
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e022      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e01e      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886a:	e01a      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e016      	b.n	80088a2 <UART_SetConfig+0x2fe>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887a:	e012      	b.n	80088a2 <UART_SetConfig+0x2fe>
 800887c:	cfff69f3 	.word	0xcfff69f3
 8008880:	40008000 	.word	0x40008000
 8008884:	40013800 	.word	0x40013800
 8008888:	40021000 	.word	0x40021000
 800888c:	40004400 	.word	0x40004400
 8008890:	40004800 	.word	0x40004800
 8008894:	40004c00 	.word	0x40004c00
 8008898:	40005000 	.word	0x40005000
 800889c:	2310      	movs	r3, #16
 800889e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4aae      	ldr	r2, [pc, #696]	; (8008b60 <UART_SetConfig+0x5bc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	f040 8097 	bne.w	80089dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088b2:	2b08      	cmp	r3, #8
 80088b4:	d823      	bhi.n	80088fe <UART_SetConfig+0x35a>
 80088b6:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <UART_SetConfig+0x318>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088ff 	.word	0x080088ff
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088ff 	.word	0x080088ff
 80088cc:	080088ef 	.word	0x080088ef
 80088d0:	080088ff 	.word	0x080088ff
 80088d4:	080088ff 	.word	0x080088ff
 80088d8:	080088ff 	.word	0x080088ff
 80088dc:	080088f7 	.word	0x080088f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e0:	f7fd f992 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088e6:	e010      	b.n	800890a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e8:	4b9e      	ldr	r3, [pc, #632]	; (8008b64 <UART_SetConfig+0x5c0>)
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088ec:	e00d      	b.n	800890a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ee:	f7fd f91d 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 80088f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088f4:	e009      	b.n	800890a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088fc:	e005      	b.n	800890a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8130 	beq.w	8008b72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	4a94      	ldr	r2, [pc, #592]	; (8008b68 <UART_SetConfig+0x5c4>)
 8008918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800891c:	461a      	mov	r2, r3
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	fbb3 f3f2 	udiv	r3, r3, r2
 8008924:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	4413      	add	r3, r2
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	429a      	cmp	r2, r3
 8008934:	d305      	bcc.n	8008942 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	429a      	cmp	r2, r3
 8008940:	d903      	bls.n	800894a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008948:	e113      	b.n	8008b72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	2200      	movs	r2, #0
 800894e:	60bb      	str	r3, [r7, #8]
 8008950:	60fa      	str	r2, [r7, #12]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	4a84      	ldr	r2, [pc, #528]	; (8008b68 <UART_SetConfig+0x5c4>)
 8008958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895c:	b29b      	uxth	r3, r3
 800895e:	2200      	movs	r2, #0
 8008960:	603b      	str	r3, [r7, #0]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800896c:	f7f8 f872 	bl	8000a54 <__aeabi_uldivmod>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4610      	mov	r0, r2
 8008976:	4619      	mov	r1, r3
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	f04f 0300 	mov.w	r3, #0
 8008980:	020b      	lsls	r3, r1, #8
 8008982:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008986:	0202      	lsls	r2, r0, #8
 8008988:	6979      	ldr	r1, [r7, #20]
 800898a:	6849      	ldr	r1, [r1, #4]
 800898c:	0849      	lsrs	r1, r1, #1
 800898e:	2000      	movs	r0, #0
 8008990:	460c      	mov	r4, r1
 8008992:	4605      	mov	r5, r0
 8008994:	eb12 0804 	adds.w	r8, r2, r4
 8008998:	eb43 0905 	adc.w	r9, r3, r5
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	469a      	mov	sl, r3
 80089a4:	4693      	mov	fp, r2
 80089a6:	4652      	mov	r2, sl
 80089a8:	465b      	mov	r3, fp
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	f7f8 f851 	bl	8000a54 <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4613      	mov	r3, r2
 80089b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c0:	d308      	bcc.n	80089d4 <UART_SetConfig+0x430>
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c8:	d204      	bcs.n	80089d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	60da      	str	r2, [r3, #12]
 80089d2:	e0ce      	b.n	8008b72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089da:	e0ca      	b.n	8008b72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e4:	d166      	bne.n	8008ab4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80089e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	d827      	bhi.n	8008a3e <UART_SetConfig+0x49a>
 80089ee:	a201      	add	r2, pc, #4	; (adr r2, 80089f4 <UART_SetConfig+0x450>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a21 	.word	0x08008a21
 80089fc:	08008a29 	.word	0x08008a29
 8008a00:	08008a3f 	.word	0x08008a3f
 8008a04:	08008a2f 	.word	0x08008a2f
 8008a08:	08008a3f 	.word	0x08008a3f
 8008a0c:	08008a3f 	.word	0x08008a3f
 8008a10:	08008a3f 	.word	0x08008a3f
 8008a14:	08008a37 	.word	0x08008a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a18:	f7fd f8f6 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8008a1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a1e:	e014      	b.n	8008a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a20:	f7fd f908 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8008a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a26:	e010      	b.n	8008a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a28:	4b4e      	ldr	r3, [pc, #312]	; (8008b64 <UART_SetConfig+0x5c0>)
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a2c:	e00d      	b.n	8008a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a2e:	f7fd f87d 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a34:	e009      	b.n	8008a4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a3c:	e005      	b.n	8008a4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8090 	beq.w	8008b72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	4a44      	ldr	r2, [pc, #272]	; (8008b68 <UART_SetConfig+0x5c4>)
 8008a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a64:	005a      	lsls	r2, r3, #1
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	441a      	add	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	2b0f      	cmp	r3, #15
 8008a7c:	d916      	bls.n	8008aac <UART_SetConfig+0x508>
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a84:	d212      	bcs.n	8008aac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f023 030f 	bic.w	r3, r3, #15
 8008a8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	8bfb      	ldrh	r3, [r7, #30]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	8bfa      	ldrh	r2, [r7, #30]
 8008aa8:	60da      	str	r2, [r3, #12]
 8008aaa:	e062      	b.n	8008b72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ab2:	e05e      	b.n	8008b72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d828      	bhi.n	8008b0e <UART_SetConfig+0x56a>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x520>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b0f 	.word	0x08008b0f
 8008ad4:	08008aff 	.word	0x08008aff
 8008ad8:	08008b0f 	.word	0x08008b0f
 8008adc:	08008b0f 	.word	0x08008b0f
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	08008b07 	.word	0x08008b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7fd f88e 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8008aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aee:	e014      	b.n	8008b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af0:	f7fd f8a0 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008af6:	e010      	b.n	8008b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af8:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <UART_SetConfig+0x5c0>)
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008afc:	e00d      	b.n	8008b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afe:	f7fd f815 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b04:	e009      	b.n	8008b1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b0c:	e005      	b.n	8008b1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b18:	bf00      	nop
    }

    if (pclk != 0U)
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d028      	beq.n	8008b72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	4a10      	ldr	r2, [pc, #64]	; (8008b68 <UART_SetConfig+0x5c4>)
 8008b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	441a      	add	r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	2b0f      	cmp	r3, #15
 8008b48:	d910      	bls.n	8008b6c <UART_SetConfig+0x5c8>
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b50:	d20c      	bcs.n	8008b6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60da      	str	r2, [r3, #12]
 8008b5c:	e009      	b.n	8008b72 <UART_SetConfig+0x5ce>
 8008b5e:	bf00      	nop
 8008b60:	40008000 	.word	0x40008000
 8008b64:	00f42400 	.word	0x00f42400
 8008b68:	0800a358 	.word	0x0800a358
      }
      else
      {
        ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3730      	adds	r7, #48	; 0x30
 8008b96:	46bd      	mov	sp, r7
 8008b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00a      	beq.n	8008c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	430a      	orrs	r2, r1
 8008c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c9a:	d10a      	bne.n	8008cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b098      	sub	sp, #96	; 0x60
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cf0:	f7f9 fca8 	bl	8002644 <HAL_GetTick>
 8008cf4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d12f      	bne.n	8008d64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f88e 	bl	8008e34 <UART_WaitOnFlagUntilTimeout>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d022      	beq.n	8008d64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d32:	653b      	str	r3, [r7, #80]	; 0x50
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e063      	b.n	8008e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d149      	bne.n	8008e06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f857 	bl	8008e34 <UART_WaitOnFlagUntilTimeout>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d03c      	beq.n	8008e06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008daa:	633b      	str	r3, [r7, #48]	; 0x30
 8008dac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e6      	bne.n	8008d8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dde:	61fa      	str	r2, [r7, #28]
 8008de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	69b9      	ldr	r1, [r7, #24]
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	617b      	str	r3, [r7, #20]
   return(result);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e012      	b.n	8008e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3758      	adds	r7, #88	; 0x58
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e44:	e04f      	b.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d04b      	beq.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e4e:	f7f9 fbf9 	bl	8002644 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d302      	bcc.n	8008e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e04e      	b.n	8008f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d037      	beq.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d034      	beq.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b40      	cmp	r3, #64	; 0x40
 8008e80:	d031      	beq.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d110      	bne.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2208      	movs	r2, #8
 8008e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 f95b 	bl	8009154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e029      	b.n	8008f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec0:	d111      	bne.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f941 	bl	8009154 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e00f      	b.n	8008f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	bf0c      	ite	eq
 8008ef6:	2301      	moveq	r3, #1
 8008ef8:	2300      	movne	r3, #0
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d0a0      	beq.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b0a3      	sub	sp, #140	; 0x8c
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	d10e      	bne.n	8008f62 <UART_Start_Receive_IT+0x52>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <UART_Start_Receive_IT+0x48>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f56:	e02d      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	22ff      	movs	r2, #255	; 0xff
 8008f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f60:	e028      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10d      	bne.n	8008f86 <UART_Start_Receive_IT+0x76>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <UART_Start_Receive_IT+0x6c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	22ff      	movs	r2, #255	; 0xff
 8008f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f7a:	e01b      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	227f      	movs	r2, #127	; 0x7f
 8008f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f84:	e016      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8e:	d10d      	bne.n	8008fac <UART_Start_Receive_IT+0x9c>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <UART_Start_Receive_IT+0x92>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	227f      	movs	r2, #127	; 0x7f
 8008f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fa0:	e008      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	223f      	movs	r2, #63	; 0x3f
 8008fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008faa:	e003      	b.n	8008fb4 <UART_Start_Receive_IT+0xa4>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2222      	movs	r2, #34	; 0x22
 8008fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fe8:	673a      	str	r2, [r7, #112]	; 0x70
 8008fea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e3      	bne.n	8008fc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009004:	d14f      	bne.n	80090a6 <UART_Start_Receive_IT+0x196>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	429a      	cmp	r2, r3
 8009010:	d349      	bcc.n	80090a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901a:	d107      	bne.n	800902c <UART_Start_Receive_IT+0x11c>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a47      	ldr	r2, [pc, #284]	; (8009144 <UART_Start_Receive_IT+0x234>)
 8009028:	675a      	str	r2, [r3, #116]	; 0x74
 800902a:	e002      	b.n	8009032 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4a46      	ldr	r2, [pc, #280]	; (8009148 <UART_Start_Receive_IT+0x238>)
 8009030:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01a      	beq.n	8009070 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800904e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800905c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800905e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800906a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e4      	bne.n	800903a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3308      	adds	r3, #8
 800908e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009090:	64ba      	str	r2, [r7, #72]	; 0x48
 8009092:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800909e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e5      	bne.n	8009070 <UART_Start_Receive_IT+0x160>
 80090a4:	e046      	b.n	8009134 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ae:	d107      	bne.n	80090c0 <UART_Start_Receive_IT+0x1b0>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a24      	ldr	r2, [pc, #144]	; (800914c <UART_Start_Receive_IT+0x23c>)
 80090bc:	675a      	str	r2, [r3, #116]	; 0x74
 80090be:	e002      	b.n	80090c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a23      	ldr	r2, [pc, #140]	; (8009150 <UART_Start_Receive_IT+0x240>)
 80090c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d019      	beq.n	8009102 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090e2:	677b      	str	r3, [r7, #116]	; 0x74
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
 80090ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e6      	bne.n	80090ce <UART_Start_Receive_IT+0x1be>
 8009100:	e018      	b.n	8009134 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	613b      	str	r3, [r7, #16]
   return(result);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f043 0320 	orr.w	r3, r3, #32
 8009116:	67bb      	str	r3, [r7, #120]	; 0x78
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009120:	623b      	str	r3, [r7, #32]
 8009122:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	61bb      	str	r3, [r7, #24]
   return(result);
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	378c      	adds	r7, #140	; 0x8c
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	08009cb9 	.word	0x08009cb9
 8009148:	08009959 	.word	0x08009959
 800914c:	080097a1 	.word	0x080097a1
 8009150:	080095e9 	.word	0x080095e9

08009154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b095      	sub	sp, #84	; 0x54
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	643b      	str	r3, [r7, #64]	; 0x40
 800917c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e6      	bne.n	800915c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	61fb      	str	r3, [r7, #28]
   return(result);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091a4:	f023 0301 	bic.w	r3, r3, #1
 80091a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e3      	bne.n	800918e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d118      	bne.n	8009200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	60bb      	str	r3, [r7, #8]
   return(result);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f023 0310 	bic.w	r3, r3, #16
 80091e2:	647b      	str	r3, [r7, #68]	; 0x44
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	613b      	str	r3, [r7, #16]
   return(result);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e6      	bne.n	80091ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009214:	bf00      	nop
 8009216:	3754      	adds	r7, #84	; 0x54
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff f99a 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800924c:	b480      	push	{r7}
 800924e:	b08f      	sub	sp, #60	; 0x3c
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925a:	2b21      	cmp	r3, #33	; 0x21
 800925c:	d14c      	bne.n	80092f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d132      	bne.n	80092d0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	61fb      	str	r3, [r7, #28]
   return(result);
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800928a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800928e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e6      	bne.n	800926a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6979      	ldr	r1, [r7, #20]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	613b      	str	r3, [r7, #16]
   return(result);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80092ce:	e013      	b.n	80092f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80092f8:	bf00      	nop
 80092fa:	373c      	adds	r7, #60	; 0x3c
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b091      	sub	sp, #68	; 0x44
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009312:	2b21      	cmp	r3, #33	; 0x21
 8009314:	d151      	bne.n	80093ba <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d132      	bne.n	8009388 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	623b      	str	r3, [r7, #32]
   return(result);
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	633b      	str	r3, [r7, #48]	; 0x30
 8009342:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e6      	bne.n	8009322 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	60fb      	str	r3, [r7, #12]
   return(result);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009368:	637b      	str	r3, [r7, #52]	; 0x34
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	69b9      	ldr	r1, [r7, #24]
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	617b      	str	r3, [r7, #20]
   return(result);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e6      	bne.n	8009354 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009386:	e018      	b.n	80093ba <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800939c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a2:	1c9a      	adds	r2, r3, #2
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80093ba:	bf00      	nop
 80093bc:	3744      	adds	r7, #68	; 0x44
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b091      	sub	sp, #68	; 0x44
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d4:	2b21      	cmp	r3, #33	; 0x21
 80093d6:	d160      	bne.n	800949a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80093de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80093e0:	e057      	b.n	8009492 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d133      	bne.n	8009456 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3308      	adds	r3, #8
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	e853 3f00 	ldrex	r3, [r3]
 80093fc:	623b      	str	r3, [r7, #32]
   return(result);
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009404:	63bb      	str	r3, [r7, #56]	; 0x38
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800940e:	633a      	str	r2, [r7, #48]	; 0x30
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e5      	bne.n	80093ee <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009436:	637b      	str	r3, [r7, #52]	; 0x34
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	617b      	str	r3, [r7, #20]
   return(result);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e6      	bne.n	8009422 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009454:	e021      	b.n	800949a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d013      	beq.n	800948c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800948c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800948e:	3b01      	subs	r3, #1
 8009490:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009492:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1a4      	bne.n	80093e2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009498:	e7ff      	b.n	800949a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800949a:	bf00      	nop
 800949c:	3744      	adds	r7, #68	; 0x44
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b091      	sub	sp, #68	; 0x44
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b4:	2b21      	cmp	r3, #33	; 0x21
 80094b6:	d165      	bne.n	8009584 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80094be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80094c0:	e05c      	b.n	800957c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d133      	bne.n	8009536 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e5      	bne.n	80094ce <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6979      	ldr	r1, [r7, #20]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	613b      	str	r3, [r7, #16]
   return(result);
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e6      	bne.n	8009502 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009534:	e026      	b.n	8009584 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009540:	2b00      	cmp	r3, #0
 8009542:	d018      	beq.n	8009576 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009558:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955e:	1c9a      	adds	r2, r3, #2
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009576:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009578:	3b01      	subs	r3, #1
 800957a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800957c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800957e:	2b00      	cmp	r3, #0
 8009580:	d19f      	bne.n	80094c2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009582:	e7ff      	b.n	8009584 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009584:	bf00      	nop
 8009586:	3744      	adds	r7, #68	; 0x44
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6979      	ldr	r1, [r7, #20]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	613b      	str	r3, [r7, #16]
   return(result);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e6      	bne.n	8009598 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2220      	movs	r2, #32
 80095ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fe ffc3 	bl	8008564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095de:	bf00      	nop
 80095e0:	3720      	adds	r7, #32
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b09c      	sub	sp, #112	; 0x70
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009600:	2b22      	cmp	r3, #34	; 0x22
 8009602:	f040 80be 	bne.w	8009782 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009610:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009614:	b2d9      	uxtb	r1, r3
 8009616:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800961a:	b2da      	uxtb	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009620:	400a      	ands	r2, r1
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 80a1 	bne.w	8009792 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800965e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009664:	66bb      	str	r3, [r7, #104]	; 0x68
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800966e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009670:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800967c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e6      	bne.n	8009650 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009694:	f023 0301 	bic.w	r3, r3, #1
 8009698:	667b      	str	r3, [r7, #100]	; 0x64
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096a2:	647a      	str	r2, [r7, #68]	; 0x44
 80096a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096aa:	e841 2300 	strex	r3, r2, [r1]
 80096ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e5      	bne.n	8009682 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a33      	ldr	r2, [pc, #204]	; (800979c <UART_RxISR_8BIT+0x1b4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d01f      	beq.n	8009714 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d018      	beq.n	8009714 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	623b      	str	r3, [r7, #32]
   return(result);
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096f6:	663b      	str	r3, [r7, #96]	; 0x60
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009700:	633b      	str	r3, [r7, #48]	; 0x30
 8009702:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d12e      	bne.n	800977a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009740:	61fb      	str	r3, [r7, #28]
 8009742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	617b      	str	r3, [r7, #20]
   return(result);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d103      	bne.n	800976a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2210      	movs	r2, #16
 8009768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fe ff0a 	bl	800858c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009778:	e00b      	b.n	8009792 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7f8 fc02 	bl	8001f84 <HAL_UART_RxCpltCallback>
}
 8009780:	e007      	b.n	8009792 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699a      	ldr	r2, [r3, #24]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0208 	orr.w	r2, r2, #8
 8009790:	619a      	str	r2, [r3, #24]
}
 8009792:	bf00      	nop
 8009794:	3770      	adds	r7, #112	; 0x70
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40008000 	.word	0x40008000

080097a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b09c      	sub	sp, #112	; 0x70
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b8:	2b22      	cmp	r3, #34	; 0x22
 80097ba:	f040 80be 	bne.w	800993a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097cc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80097ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80097d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80097d6:	4013      	ands	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	1c9a      	adds	r2, r3, #2
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009800:	b29b      	uxth	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 80a1 	bne.w	800994a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800981c:	667b      	str	r3, [r7, #100]	; 0x64
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009826:	657b      	str	r3, [r7, #84]	; 0x54
 8009828:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800982c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e6      	bne.n	8009808 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	f023 0301 	bic.w	r3, r3, #1
 8009850:	663b      	str	r3, [r7, #96]	; 0x60
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800985a:	643a      	str	r2, [r7, #64]	; 0x40
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e5      	bne.n	800983a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a33      	ldr	r2, [pc, #204]	; (8009954 <UART_RxISR_16BIT+0x1b4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d01f      	beq.n	80098cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d018      	beq.n	80098cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e6      	bne.n	800989a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d12e      	bne.n	8009932 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f023 0310 	bic.w	r3, r3, #16
 80098ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6979      	ldr	r1, [r7, #20]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	613b      	str	r3, [r7, #16]
   return(result);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b10      	cmp	r3, #16
 8009918:	d103      	bne.n	8009922 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2210      	movs	r2, #16
 8009920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7fe fe2e 	bl	800858c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009930:	e00b      	b.n	800994a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7f8 fb26 	bl	8001f84 <HAL_UART_RxCpltCallback>
}
 8009938:	e007      	b.n	800994a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0208 	orr.w	r2, r2, #8
 8009948:	619a      	str	r2, [r3, #24]
}
 800994a:	bf00      	nop
 800994c:	3770      	adds	r7, #112	; 0x70
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	40008000 	.word	0x40008000

08009958 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b0ac      	sub	sp, #176	; 0xb0
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009966:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800998e:	2b22      	cmp	r3, #34	; 0x22
 8009990:	f040 8182 	bne.w	8009c98 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800999a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800999e:	e125      	b.n	8009bec <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80099ae:	b2d9      	uxtb	r1, r3
 80099b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ba:	400a      	ands	r2, r1
 80099bc:	b2d2      	uxtb	r2, r2
 80099be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d053      	beq.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d011      	beq.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0xca>
 80099fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00b      	beq.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a18:	f043 0201 	orr.w	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d011      	beq.n	8009a52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00b      	beq.n	8009a52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	f043 0204 	orr.w	r2, r3, #4
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d011      	beq.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00b      	beq.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2204      	movs	r2, #4
 8009a70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a78:	f043 0202 	orr.w	r2, r3, #2
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d006      	beq.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7fe fd73 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f040 80a2 	bne.w	8009bec <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009acc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009ad0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e4      	bne.n	8009aa8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af4:	f023 0301 	bic.w	r3, r3, #1
 8009af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b06:	66ba      	str	r2, [r7, #104]	; 0x68
 8009b08:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009b0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e1      	bne.n	8009ade <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5f      	ldr	r2, [pc, #380]	; (8009cb0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d021      	beq.n	8009b7c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d01a      	beq.n	8009b7c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b68:	657b      	str	r3, [r7, #84]	; 0x54
 8009b6a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b70:	e841 2300 	strex	r3, r2, [r1]
 8009b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1e4      	bne.n	8009b46 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d130      	bne.n	8009be6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	f023 0310 	bic.w	r3, r3, #16
 8009b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bac:	643b      	str	r3, [r7, #64]	; 0x40
 8009bae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e4      	bne.n	8009b8a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d103      	bne.n	8009bd6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fe fcd4 	bl	800858c <HAL_UARTEx_RxEventCallback>
 8009be4:	e002      	b.n	8009bec <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7f8 f9cc 	bl	8001f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d006      	beq.n	8009c02 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f47f aecf 	bne.w	80099a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d049      	beq.n	8009ca8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c1a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d242      	bcs.n	8009ca8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e3      	bne.n	8009c22 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f043 0320 	orr.w	r3, r3, #32
 8009c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e4      	bne.n	8009c60 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c96:	e007      	b.n	8009ca8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0208 	orr.w	r2, r2, #8
 8009ca6:	619a      	str	r2, [r3, #24]
}
 8009ca8:	bf00      	nop
 8009caa:	37b0      	adds	r7, #176	; 0xb0
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	40008000 	.word	0x40008000
 8009cb4:	080095e9 	.word	0x080095e9

08009cb8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b0ae      	sub	sp, #184	; 0xb8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cc6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cee:	2b22      	cmp	r3, #34	; 0x22
 8009cf0:	f040 8186 	bne.w	800a000 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cfa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cfe:	e129      	b.n	8009f54 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009d12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009d16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d28:	1c9a      	adds	r2, r3, #2
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d053      	beq.n	8009dfe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d011      	beq.n	8009d86 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2201      	movs	r2, #1
 8009d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7c:	f043 0201 	orr.w	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d8a:	f003 0302 	and.w	r3, r3, #2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d011      	beq.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2202      	movs	r2, #2
 8009da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dac:	f043 0204 	orr.w	r2, r3, #4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009dba:	f003 0304 	and.w	r3, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d011      	beq.n	8009de6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ddc:	f043 0202 	orr.w	r2, r3, #2
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d006      	beq.n	8009dfe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe fbc1 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 80a4 	bne.w	8009f54 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e32:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e2      	bne.n	8009e0c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e1      	bne.n	8009e46 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a5f      	ldr	r2, [pc, #380]	; (800a018 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d021      	beq.n	8009ee4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01a      	beq.n	8009ee4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ed2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e4      	bne.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d130      	bne.n	8009f4e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f02:	f023 0310 	bic.w	r3, r3, #16
 8009f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f14:	647b      	str	r3, [r7, #68]	; 0x44
 8009f16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f1c:	e841 2300 	strex	r3, r2, [r1]
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e4      	bne.n	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	f003 0310 	and.w	r3, r3, #16
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d103      	bne.n	8009f3e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2210      	movs	r2, #16
 8009f3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fe fb20 	bl	800858c <HAL_UARTEx_RxEventCallback>
 8009f4c:	e002      	b.n	8009f54 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7f8 f818 	bl	8001f84 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f54:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d006      	beq.n	8009f6a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f47f aecb 	bne.w	8009d00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f70:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f74:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d049      	beq.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f82:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d242      	bcs.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	623b      	str	r3, [r7, #32]
   return(result);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009fae:	633a      	str	r2, [r7, #48]	; 0x30
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb6:	e841 2300 	strex	r3, r2, [r1]
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e3      	bne.n	8009f8a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a15      	ldr	r2, [pc, #84]	; (800a01c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009fc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f043 0320 	orr.w	r3, r3, #32
 8009fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	69b9      	ldr	r1, [r7, #24]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e4      	bne.n	8009fc8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ffe:	e007      	b.n	800a010 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0208 	orr.w	r2, r2, #8
 800a00e:	619a      	str	r2, [r3, #24]
}
 800a010:	bf00      	nop
 800a012:	37b8      	adds	r7, #184	; 0xb8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40008000 	.word	0x40008000
 800a01c:	080097a1 	.word	0x080097a1

0800a020 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_UARTEx_DisableFifoMode+0x16>
 800a06e:	2302      	movs	r3, #2
 800a070:	e027      	b.n	800a0c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2224      	movs	r2, #36	; 0x24
 800a07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 0201 	bic.w	r2, r2, #1
 800a098:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a0a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e02d      	b.n	800a142 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2224      	movs	r2, #36	; 0x24
 800a0f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0201 	bic.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f850 	bl	800a1c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d101      	bne.n	800a162 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a15e:	2302      	movs	r3, #2
 800a160:	e02d      	b.n	800a1be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2224      	movs	r2, #36	; 0x24
 800a16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f812 	bl	800a1c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d108      	bne.n	800a1ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1e8:	e031      	b.n	800a24e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	0e5b      	lsrs	r3, r3, #25
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	f003 0307 	and.w	r3, r3, #7
 800a200:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	0f5b      	lsrs	r3, r3, #29
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f003 0307 	and.w	r3, r3, #7
 800a210:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a212:	7bbb      	ldrb	r3, [r7, #14]
 800a214:	7b3a      	ldrb	r2, [r7, #12]
 800a216:	4911      	ldr	r1, [pc, #68]	; (800a25c <UARTEx_SetNbDataToProcess+0x94>)
 800a218:	5c8a      	ldrb	r2, [r1, r2]
 800a21a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a21e:	7b3a      	ldrb	r2, [r7, #12]
 800a220:	490f      	ldr	r1, [pc, #60]	; (800a260 <UARTEx_SetNbDataToProcess+0x98>)
 800a222:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a224:	fb93 f3f2 	sdiv	r3, r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	7b7a      	ldrb	r2, [r7, #13]
 800a234:	4909      	ldr	r1, [pc, #36]	; (800a25c <UARTEx_SetNbDataToProcess+0x94>)
 800a236:	5c8a      	ldrb	r2, [r1, r2]
 800a238:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a23c:	7b7a      	ldrb	r2, [r7, #13]
 800a23e:	4908      	ldr	r1, [pc, #32]	; (800a260 <UARTEx_SetNbDataToProcess+0x98>)
 800a240:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a242:	fb93 f3f2 	sdiv	r3, r3, r2
 800a246:	b29a      	uxth	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	0800a370 	.word	0x0800a370
 800a260:	0800a378 	.word	0x0800a378

0800a264 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	ed93 7a06 	vldr	s14, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	edd3 7a07 	vldr	s15, [r3, #28]
 800a27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	edd3 7a08 	vldr	s15, [r3, #32]
 800a284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	edd3 7a06 	vldr	s15, [r3, #24]
 800a294:	eeb1 7a67 	vneg.f32	s14, s15
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a29e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a2a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d006      	beq.n	800a2c8 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	330c      	adds	r3, #12
 800a2be:	220c      	movs	r2, #12
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 f804 	bl	800a2d0 <memset>
  }

}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <memset>:
 800a2d0:	4402      	add	r2, r0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d100      	bne.n	800a2da <memset+0xa>
 800a2d8:	4770      	bx	lr
 800a2da:	f803 1b01 	strb.w	r1, [r3], #1
 800a2de:	e7f9      	b.n	800a2d4 <memset+0x4>

0800a2e0 <__libc_init_array>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	4d0d      	ldr	r5, [pc, #52]	; (800a318 <__libc_init_array+0x38>)
 800a2e4:	4c0d      	ldr	r4, [pc, #52]	; (800a31c <__libc_init_array+0x3c>)
 800a2e6:	1b64      	subs	r4, r4, r5
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	2600      	movs	r6, #0
 800a2ec:	42a6      	cmp	r6, r4
 800a2ee:	d109      	bne.n	800a304 <__libc_init_array+0x24>
 800a2f0:	4d0b      	ldr	r5, [pc, #44]	; (800a320 <__libc_init_array+0x40>)
 800a2f2:	4c0c      	ldr	r4, [pc, #48]	; (800a324 <__libc_init_array+0x44>)
 800a2f4:	f000 f818 	bl	800a328 <_init>
 800a2f8:	1b64      	subs	r4, r4, r5
 800a2fa:	10a4      	asrs	r4, r4, #2
 800a2fc:	2600      	movs	r6, #0
 800a2fe:	42a6      	cmp	r6, r4
 800a300:	d105      	bne.n	800a30e <__libc_init_array+0x2e>
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	f855 3b04 	ldr.w	r3, [r5], #4
 800a308:	4798      	blx	r3
 800a30a:	3601      	adds	r6, #1
 800a30c:	e7ee      	b.n	800a2ec <__libc_init_array+0xc>
 800a30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a312:	4798      	blx	r3
 800a314:	3601      	adds	r6, #1
 800a316:	e7f2      	b.n	800a2fe <__libc_init_array+0x1e>
 800a318:	0800a388 	.word	0x0800a388
 800a31c:	0800a388 	.word	0x0800a388
 800a320:	0800a388 	.word	0x0800a388
 800a324:	0800a38c 	.word	0x0800a38c

0800a328 <_init>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

0800a334 <_fini>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr
