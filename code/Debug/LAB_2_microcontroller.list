
LAB_2_microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a24  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c3c  08007c3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007c3c  08007c3c  00017c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c44  08007c44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c44  08007c44  00017c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  08007c5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08007c5c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181a1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce8  00000000  00000000  00038224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001054  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  0003d44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187d2  00000000  00000000  00066201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114068  00000000  00000000  0007e9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bc4  00000000  00000000  00192a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00198600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007be4 	.word	0x08007be4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007be4 	.word	0x08007be4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 ff39 	bl	8001bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f930 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fb74 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 fb48 	bl	80013f4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d64:	f000 f9fe 	bl	8001164 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d68:	f000 f974 	bl	8001054 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000d6c:	f000 faf4 	bl	8001358 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d70:	f000 fa42 	bl	80011f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8000d74:	4882      	ldr	r0, [pc, #520]	; (8000f80 <main+0x230>)
 8000d76:	f004 fcc7 	bl	8005708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4881      	ldr	r0, [pc, #516]	; (8000f84 <main+0x234>)
 8000d7e:	f004 fd9d 	bl	80058bc <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d82:	217f      	movs	r1, #127	; 0x7f
 8000d84:	4880      	ldr	r0, [pc, #512]	; (8000f88 <main+0x238>)
 8000d86:	f002 fd4d 	bl	8003824 <HAL_ADCEx_Calibration_Start>
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	497f      	ldr	r1, [pc, #508]	; (8000f8c <main+0x23c>)
 8000d8e:	487e      	ldr	r0, [pc, #504]	; (8000f88 <main+0x238>)
 8000d90:	f001 fbd0 	bl	8002534 <HAL_ADC_Start_DMA>

  PID.Kp = 0.001;
 8000d94:	4b7e      	ldr	r3, [pc, #504]	; (8000f90 <main+0x240>)
 8000d96:	4a7f      	ldr	r2, [pc, #508]	; (8000f94 <main+0x244>)
 8000d98:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <main+0x240>)
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000da2:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <main+0x240>)
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4878      	ldr	r0, [pc, #480]	; (8000f90 <main+0x240>)
 8000dae:	f006 feb7 	bl	8007b20 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Average_ADC_Value();
 8000db2:	f000 fc1b 	bl	80015ec <Average_ADC_Value>
	  led2();
 8000db6:	f000 fbef 	bl	8001598 <led2>
	  if(mode == 1){
 8000dba:	4b77      	ldr	r3, [pc, #476]	; (8000f98 <main+0x248>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d1f7      	bne.n	8000db2 <main+0x62>
	 	  if(Vfeedback > 1){
 8000dc2:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <main+0x24c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	dd4d      	ble.n	8000e72 <main+0x122>
	 		  setSpd = (Vfeedback/360)*(1000-600)+600;
 8000dd6:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <main+0x24c>)
 8000dd8:	ed93 7a00 	vldr	s14, [r3]
 8000ddc:	eddf 6a70 	vldr	s13, [pc, #448]	; 8000fa0 <main+0x250>
 8000de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000fa4 <main+0x254>
 8000de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dec:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000fa8 <main+0x258>
 8000df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000df4:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <main+0x25c>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]
	 		  if(Vfeedback < 180){
 8000dfa:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <main+0x24c>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000fb0 <main+0x260>
 8000e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	d513      	bpl.n	8000e36 <main+0xe6>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	4868      	ldr	r0, [pc, #416]	; (8000fb4 <main+0x264>)
 8000e14:	f003 fba6 	bl	8004564 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4865      	ldr	r0, [pc, #404]	; (8000fb4 <main+0x264>)
 8000e1e:	f003 fba1 	bl	8004564 <HAL_GPIO_WritePin>
	 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8000e22:	4b62      	ldr	r3, [pc, #392]	; (8000fac <main+0x25c>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <main+0x234>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	ee17 2a90 	vmov	r2, s15
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
	 		  }
	 		  if(Vfeedback > 180){
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <main+0x24c>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000fb0 <main+0x260>
 8000e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	dd13      	ble.n	8000e72 <main+0x122>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4859      	ldr	r0, [pc, #356]	; (8000fb4 <main+0x264>)
 8000e50:	f003 fb88 	bl	8004564 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2120      	movs	r1, #32
 8000e58:	4856      	ldr	r0, [pc, #344]	; (8000fb4 <main+0x264>)
 8000e5a:	f003 fb83 	bl	8004564 <HAL_GPIO_WritePin>
	 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8000e5e:	4b53      	ldr	r3, [pc, #332]	; (8000fac <main+0x25c>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <main+0x234>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
	 		  }
	 	  }
	 	  if(Vfeedback < -1){
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <main+0x24c>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	d54f      	bpl.n	8000f26 <main+0x1d6>
	 		  setSpd = (-Vfeedback/360)*(1000-600)+600;
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <main+0x24c>)
 8000e88:	edd3 7a00 	vldr	s15, [r3]
 8000e8c:	eeb1 7a67 	vneg.f32	s14, s15
 8000e90:	eddf 6a43 	vldr	s13, [pc, #268]	; 8000fa0 <main+0x250>
 8000e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e98:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000fa4 <main+0x254>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000fa8 <main+0x258>
 8000ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <main+0x25c>)
 8000eaa:	edc3 7a00 	vstr	s15, [r3]
	 		  if(Vfeedback < -180){
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <main+0x24c>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000fb8 <main+0x268>
 8000eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec0:	d513      	bpl.n	8000eea <main+0x19a>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <main+0x264>)
 8000ec8:	f003 fb4c 	bl	8004564 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <main+0x264>)
 8000ed2:	f003 fb47 	bl	8004564 <HAL_GPIO_WritePin>
	 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <main+0x25c>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <main+0x234>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee4:	ee17 2a90 	vmov	r2, s15
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
	 		  }
	 		  if(Vfeedback > -180){
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <main+0x24c>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000fb8 <main+0x268>
 8000ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efc:	dd13      	ble.n	8000f26 <main+0x1d6>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2110      	movs	r1, #16
 8000f02:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <main+0x264>)
 8000f04:	f003 fb2e 	bl	8004564 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <main+0x264>)
 8000f0e:	f003 fb29 	bl	8004564 <HAL_GPIO_WritePin>
	 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <main+0x25c>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <main+0x234>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f20:	ee17 2a90 	vmov	r2, s15
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
	 		  }
	 	  }
	 	  if(Vfeedback < 1 && Vfeedback > -1)
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <main+0x24c>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f38:	d521      	bpl.n	8000f7e <main+0x22e>
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <main+0x24c>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4c:	dd17      	ble.n	8000f7e <main+0x22e>
	 	  {
	 		  setSpd = 0;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <main+0x25c>)
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
	 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <main+0x264>)
 8000f5c:	f003 fb02 	bl	8004564 <HAL_GPIO_WritePin>
	 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2120      	movs	r1, #32
 8000f64:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <main+0x264>)
 8000f66:	f003 fafd 	bl	8004564 <HAL_GPIO_WritePin>
	 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <main+0x25c>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <main+0x234>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f78:	ee17 2a90 	vmov	r2, s15
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000f7e:	e718      	b.n	8000db2 <main+0x62>
 8000f80:	200001d8 	.word	0x200001d8
 8000f84:	2000018c 	.word	0x2000018c
 8000f88:	2000002c 	.word	0x2000002c
 8000f8c:	20000224 	.word	0x20000224
 8000f90:	20000240 	.word	0x20000240
 8000f94:	3a83126f 	.word	0x3a83126f
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000270 	.word	0x20000270
 8000fa0:	43b40000 	.word	0x43b40000
 8000fa4:	43c80000 	.word	0x43c80000
 8000fa8:	44160000 	.word	0x44160000
 8000fac:	20000274 	.word	0x20000274
 8000fb0:	43340000 	.word	0x43340000
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	c3340000 	.word	0xc3340000

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	2238      	movs	r2, #56	; 0x38
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 fdde 	bl	8007b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f003 fb0a 	bl	80045f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ffe:	2355      	movs	r3, #85	; 0x55
 8001000:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fba4 	bl	8004760 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800101e:	f000 fbcb 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001026:	2303      	movs	r3, #3
 8001028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2104      	movs	r1, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fea2 	bl	8004d84 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001046:	f000 fbb7 	bl	80017b8 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3750      	adds	r7, #80	; 0x50
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fd8d 	bl	8007b8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_ADC1_Init+0x104>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b37      	ldr	r3, [pc, #220]	; (8001158 <MX_ADC1_Init+0x104>)
 800107c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_ADC1_Init+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_ADC1_Init+0x104>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <MX_ADC1_Init+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_ADC1_Init+0x104>)
 8001096:	2201      	movs	r2, #1
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MX_ADC1_Init+0x104>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_ADC1_Init+0x104>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_ADC1_Init+0x104>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_ADC1_Init+0x104>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_ADC1_Init+0x104>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <MX_ADC1_Init+0x104>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_ADC1_Init+0x104>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_ADC1_Init+0x104>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_ADC1_Init+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <MX_ADC1_Init+0x104>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_ADC1_Init+0x104>)
 80010de:	f001 f86d 	bl	80021bc <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 fb66 	bl	80017b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_ADC1_Init+0x104>)
 80010f8:	f002 fc28 	bl	800394c <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001102:	f000 fb59 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_ADC1_Init+0x108>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800110e:	2307      	movs	r3, #7
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	; 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC1_Init+0x104>)
 8001124:	f001 fd62 	bl	8002bec <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800112e:	f000 fb43 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_ADC1_Init+0x10c>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001136:	230c      	movs	r3, #12
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_ADC1_Init+0x104>)
 8001140:	f001 fd54 	bl	8002bec <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800114a:	f000 fb35 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3730      	adds	r7, #48	; 0x30
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000002c 	.word	0x2000002c
 800115c:	04300002 	.word	0x04300002
 8001160:	08600004 	.word	0x08600004

08001164 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 800116a:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <MX_LPUART1_UART_Init+0x90>)
 800116c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 80011a8:	f005 fe4c 	bl	8006e44 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 fb01 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 80011ba:	f006 fbe7 	bl	800798c <HAL_UARTEx_SetTxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011c4:	f000 faf8 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 80011cc:	f006 fc1c 	bl	8007a08 <HAL_UARTEx_SetRxFifoThreshold>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011d6:	f000 faef 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	f006 fb9d 	bl	800791a <HAL_UARTEx_DisableFifoMode>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011e6:	f000 fae7 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200000f8 	.word	0x200000f8
 80011f4:	40008000 	.word	0x40008000

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b09c      	sub	sp, #112	; 0x70
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2234      	movs	r2, #52	; 0x34
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 fcaa 	bl	8007b8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001238:	4b45      	ldr	r3, [pc, #276]	; (8001350 <MX_TIM1_Init+0x158>)
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <MX_TIM1_Init+0x15c>)
 800123c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <MX_TIM1_Init+0x158>)
 8001240:	22a9      	movs	r2, #169	; 0xa9
 8001242:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <MX_TIM1_Init+0x158>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <MX_TIM1_Init+0x158>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <MX_TIM1_Init+0x158>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_TIM1_Init+0x158>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_TIM1_Init+0x158>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001264:	483a      	ldr	r0, [pc, #232]	; (8001350 <MX_TIM1_Init+0x158>)
 8001266:	f004 f9f7 	bl	8005658 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 faa2 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800127e:	4619      	mov	r1, r3
 8001280:	4833      	ldr	r0, [pc, #204]	; (8001350 <MX_TIM1_Init+0x158>)
 8001282:	f004 fe91 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800128c:	f000 fa94 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001290:	482f      	ldr	r0, [pc, #188]	; (8001350 <MX_TIM1_Init+0x158>)
 8001292:	f004 fab1 	bl	80057f8 <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800129c:	f000 fa8c 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b0:	4619      	mov	r1, r3
 80012b2:	4827      	ldr	r0, [pc, #156]	; (8001350 <MX_TIM1_Init+0x158>)
 80012b4:	f005 fc56 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012be:	f000 fa7b 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	481a      	ldr	r0, [pc, #104]	; (8001350 <MX_TIM1_Init+0x158>)
 80012e8:	f004 fd4a 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012f2:	f000 fa61 	bl	80017b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800131c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM1_Init+0x158>)
 8001334:	f005 fcac 	bl	8006c90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800133e:	f000 fa3b 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM1_Init+0x158>)
 8001344:	f000 fb7e 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3770      	adds	r7, #112	; 0x70
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000018c 	.word	0x2000018c
 8001354:	40012c00 	.word	0x40012c00

08001358 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM5_Init+0x94>)
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_TIM5_Init+0x98>)
 800137a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_TIM5_Init+0x94>)
 800137e:	22a9      	movs	r2, #169	; 0xa9
 8001380:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM5_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM5_Init+0x94>)
 800138a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_TIM5_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_TIM5_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_TIM5_Init+0x94>)
 800139e:	f004 f95b 	bl	8005658 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013a8:	f000 fa06 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM5_Init+0x94>)
 80013ba:	f004 fdf5 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 f9f8 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM5_Init+0x94>)
 80013d6:	f005 fbc5 	bl	8006b64 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013e0:	f000 f9ea 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200001d8 	.word	0x200001d8
 80013f0:	40000c00 	.word	0x40000c00

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <MX_DMA_Init+0x50>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6493      	str	r3, [r2, #72]	; 0x48
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <MX_DMA_Init+0x50>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6493      	str	r3, [r2, #72]	; 0x48
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	200b      	movs	r0, #11
 8001430:	f002 fc6f 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001434:	200b      	movs	r0, #11
 8001436:	f002 fc86 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a38      	ldr	r2, [pc, #224]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_GPIO_Init+0xfc>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a32      	ldr	r2, [pc, #200]	; (8001544 <MX_GPIO_Init+0xfc>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <MX_GPIO_Init+0xfc>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_GPIO_Init+0xfc>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_GPIO_Init+0xfc>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <MX_GPIO_Init+0xfc>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <MX_GPIO_Init+0xfc>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f003 f84d 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2130      	movs	r1, #48	; 0x30
 80014ce:	481e      	ldr	r0, [pc, #120]	; (8001548 <MX_GPIO_Init+0x100>)
 80014d0:	f003 f848 	bl	8004564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4818      	ldr	r0, [pc, #96]	; (800154c <MX_GPIO_Init+0x104>)
 80014ec:	f002 feb8 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014f0:	2320      	movs	r3, #32
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f002 fea9 	bl	8004260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150e:	2330      	movs	r3, #48	; 0x30
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <MX_GPIO_Init+0x100>)
 8001526:	f002 fe9b 	bl	8004260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2028      	movs	r0, #40	; 0x28
 8001530:	f002 fbef 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001534:	2028      	movs	r0, #40	; 0x28
 8001536:	f002 fc06 	bl	8003d46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800

08001550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001560:	d112      	bne.n	8001588 <HAL_GPIO_EXTI_Callback+0x38>
		if (mode == 1){
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_GPIO_EXTI_Callback+0x44>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d103      	bne.n	8001572 <HAL_GPIO_EXTI_Callback+0x22>
				mode = 2;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_GPIO_EXTI_Callback+0x44>)
 800156c:	2202      	movs	r2, #2
 800156e:	801a      	strh	r2, [r3, #0]
		else {
				mode = 1;

			}
		}
}
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_EXTI_Callback+0x38>
		else if (mode == 2){
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_GPIO_EXTI_Callback+0x44>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d103      	bne.n	8001582 <HAL_GPIO_EXTI_Callback+0x32>
				mode = 3;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_GPIO_EXTI_Callback+0x44>)
 800157c:	2203      	movs	r2, #3
 800157e:	801a      	strh	r2, [r3, #0]
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_EXTI_Callback+0x38>
				mode = 1;
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_GPIO_EXTI_Callback+0x44>)
 8001584:	2201      	movs	r2, #1
 8001586:	801a      	strh	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	20000000 	.word	0x20000000

08001598 <led2>:
void led2(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	if (mode == 1){
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <led2+0x50>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <led2+0x1a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2120      	movs	r1, #32
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ac:	f002 ffda 	bl	8004564 <HAL_GPIO_WritePin>
	else if (mode == 3) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}

}
 80015b0:	e017      	b.n	80015e2 <led2+0x4a>
	else if (mode == 2){
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <led2+0x50>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d106      	bne.n	80015c8 <led2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f002 ffcf 	bl	8004564 <HAL_GPIO_WritePin>
}
 80015c6:	e00c      	b.n	80015e2 <led2+0x4a>
	else if (mode == 3) {
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <led2+0x50>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d108      	bne.n	80015e2 <led2+0x4a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015d0:	2120      	movs	r1, #32
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f002 ffdd 	bl	8004594 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80015da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015de:	f000 fb65 	bl	8001cac <HAL_Delay>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000

080015ec <Average_ADC_Value>:
////start next ADC
//HAL_ADC_Start_IT(&hadc1);
//}
//}

void Average_ADC_Value() {
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
    uint32_t sum_adc1 = 0, sum_adc2 = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e015      	b.n	800162c <Average_ADC_Value+0x40>
        sum_adc1 += ADC_RawRead[i*2];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4a15      	ldr	r2, [pc, #84]	; (800165c <Average_ADC_Value+0x70>)
 8001606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
        sum_adc2 += ADC_RawRead[i*2+1];
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3301      	adds	r3, #1
 8001618:	4a10      	ldr	r2, [pc, #64]	; (800165c <Average_ADC_Value+0x70>)
 800161a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161e:	461a      	mov	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4413      	add	r3, r2
 8001624:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3301      	adds	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d9e6      	bls.n	8001600 <Average_ADC_Value+0x14>
//        sum_adc3 += ADC_RawRead[i*3+2];
    }
    avg_adc1 = sum_adc1 / 5;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <Average_ADC_Value+0x74>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <Average_ADC_Value+0x78>)
 800163e:	6013      	str	r3, [r2, #0]
    avg_adc2 = sum_adc2 / 5;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <Average_ADC_Value+0x74>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <Average_ADC_Value+0x7c>)
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000224 	.word	0x20000224
 8001660:	cccccccd 	.word	0xcccccccd
 8001664:	20000238 	.word	0x20000238
 8001668:	2000023c 	.word	0x2000023c
 800166c:	00000000 	.word	0x00000000

08001670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if (htim == &htim5 )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d17c      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x10a>
  {
	  ADCReadRaw = (avg_adc2/4095.0)*360.0;
 8001680:	4b44      	ldr	r3, [pc, #272]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff09 	bl	800049c <__aeabi_ui2d>
 800168a:	a33f      	add	r3, pc, #252	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f8a8 	bl	80007e4 <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016a2:	f7fe ff75 	bl	8000590 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f981 	bl	80009b4 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a39      	ldr	r2, [pc, #228]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016b6:	6013      	str	r3, [r2, #0]
	  set_pos = (avg_adc1/4095.0)*360.0;
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe feed 	bl	800049c <__aeabi_ui2d>
 80016c2:	a331      	add	r3, pc, #196	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7ff f88c 	bl	80007e4 <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016da:	f7fe ff59 	bl	8000590 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f965 	bl	80009b4 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016ee:	6013      	str	r3, [r2, #0]
	  pos = ADCReadRaw;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016f6:	6013      	str	r3, [r2, #0]
//	  ADCReadOld = ADCReadRaw;

	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos)*1000);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a04 	vldr	s15, [r7, #16]
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	edd3 6a01 	vldr	s13, [r3, #4]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	edd3 7a03 	vldr	s15, [r3, #12]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800172e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	edd3 6a02 	vldr	s13, [r3, #8]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	edd3 7a04 	vldr	s15, [r3, #16]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001768:	edd7 7a03 	vldr	s15, [r7, #12]
 800176c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80017b0 <HAL_TIM_PeriodElapsedCallback+0x140>
 8001770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
  }
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40affe00 	.word	0x40affe00
 8001790:	200001d8 	.word	0x200001d8
 8001794:	2000023c 	.word	0x2000023c
 8001798:	40768000 	.word	0x40768000
 800179c:	20000264 	.word	0x20000264
 80017a0:	20000238 	.word	0x20000238
 80017a4:	2000026c 	.word	0x2000026c
 80017a8:	20000268 	.word	0x20000268
 80017ac:	20000240 	.word	0x20000240
 80017b0:	447a0000 	.word	0x447a0000
 80017b4:	20000270 	.word	0x20000270

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017fa:	f002 ffa1 	bl	8004740 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b09e      	sub	sp, #120	; 0x78
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2254      	movs	r2, #84	; 0x54
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f006 f9ad 	bl	8007b8c <memset>
  if(hadc->Instance==ADC1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800183a:	d167      	bne.n	800190c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800183c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001840:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001842:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fcb5 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001858:	f7ff ffae 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_ADC_MspInit+0x108>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <HAL_ADC_MspInit+0x108>)
 8001862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_ADC_MspInit+0x108>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_ADC_MspInit+0x108>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a26      	ldr	r2, [pc, #152]	; (8001914 <HAL_ADC_MspInit+0x108>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_ADC_MspInit+0x108>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800188c:	2303      	movs	r3, #3
 800188e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001890:	2303      	movs	r3, #3
 8001892:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f002 fcdd 	bl	8004260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_ADC_MspInit+0x110>)
 80018aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018ae:	2205      	movs	r2, #5
 80018b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018d6:	2220      	movs	r2, #32
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018e2:	f002 fa4b 	bl	8003d7c <HAL_DMA_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80018ec:	f7ff ff64 	bl	80017b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_ADC_MspInit+0x10c>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2012      	movs	r0, #18
 8001902:	f002 fa06 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001906:	2012      	movs	r0, #18
 8001908:	f002 fa1d 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3778      	adds	r7, #120	; 0x78
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	20000098 	.word	0x20000098
 800191c:	40020008 	.word	0x40020008

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09e      	sub	sp, #120	; 0x78
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2254      	movs	r2, #84	; 0x54
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f006 f923 	bl	8007b8c <memset>
  if(huart->Instance==LPUART1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_UART_MspInit+0xa8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d136      	bne.n	80019be <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001950:	2320      	movs	r3, #32
 8001952:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fc2d 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001968:	f7ff ff26 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_UART_MspInit+0xac>)
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	4a16      	ldr	r2, [pc, #88]	; (80019cc <HAL_UART_MspInit+0xac>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_UART_MspInit+0xac>)
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_UART_MspInit+0xac>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_UART_MspInit+0xac>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_UART_MspInit+0xac>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800199c:	230c      	movs	r3, #12
 800199e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80019ac:	230c      	movs	r3, #12
 80019ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f002 fc51 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3778      	adds	r7, #120	; 0x78
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40008000 	.word	0x40008000
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_TIM_Base_MspInit+0x68>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10c      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	4a15      	ldr	r2, [pc, #84]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	6613      	str	r3, [r2, #96]	; 0x60
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019fa:	e018      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_Base_MspInit+0x70>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d113      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6593      	str	r3, [r2, #88]	; 0x58
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x6c>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2032      	movs	r0, #50	; 0x32
 8001a24:	f002 f975 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a28:	2032      	movs	r0, #50	; 0x32
 8001a2a:	f002 f98c 	bl	8003d46 <HAL_NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40000c00 	.word	0x40000c00

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_TIM_MspPostInit+0x64>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d11b      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_TIM_MspPostInit+0x68>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_TIM_MspPostInit+0x6c>)
 8001a9a:	f002 fbe1 	bl	8004260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000800 	.word	0x48000800

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f8b6 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Channel1_IRQHandler+0x10>)
 8001b0e:	f002 fa58 	bl	8003fc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000098 	.word	0x20000098

08001b1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <ADC1_2_IRQHandler+0x10>)
 8001b22:	f000 fddb 	bl	80026dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000002c 	.word	0x2000002c

08001b30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b38:	f002 fd46 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM5_IRQHandler+0x10>)
 8001b46:	f003 ffcb 	bl	8005ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200001d8 	.word	0x200001d8

08001b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7c:	f7ff ffea 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <LoopForever+0xe>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	; (8001bc4 <LoopForever+0x16>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f005 fff9 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001baa:	f7ff f8d1 	bl	8000d50 <main>

08001bae <LoopForever>:

LoopForever:
    b LoopForever
 8001bae:	e7fe      	b.n	8001bae <LoopForever>
  ldr   r0, =_estack
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bbc:	08007c4c 	.word	0x08007c4c
  ldr r2, =_sbss
 8001bc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bc4:	2000027c 	.word	0x2000027c

08001bc8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC3_IRQHandler>

08001bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f002 f891 	bl	8003cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f80e 	bl	8001bfc <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	e001      	b.n	8001bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bec:	f7ff fdea 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_InitTick+0x68>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_InitTick+0x6c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_InitTick+0x68>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 f89c 	bl	8003d62 <HAL_SYSTICK_Config>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	d809      	bhi.n	8001c4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c36:	2200      	movs	r2, #0
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3e:	f002 f868 	bl	8003d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_InitTick+0x70>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e004      	b.n	8001c5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c80:	6013      	str	r3, [r2, #0]
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000278 	.word	0x20000278
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000278 	.word	0x20000278

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d004      	beq.n	8001cd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_Delay+0x40>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd0:	bf00      	nop
 8001cd2:	f7ff ffdf 	bl	8001c94 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d8f7      	bhi.n	8001cd2 <HAL_Delay+0x26>
  {
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000000c 	.word	0x2000000c

08001cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LL_ADC_SetOffset+0x44>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	03fff000 	.word	0x03fff000

08001da0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3360      	adds	r3, #96	; 0x60
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3360      	adds	r3, #96	; 0x60
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3360      	adds	r3, #96	; 0x60
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3360      	adds	r3, #96	; 0x60
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	615a      	str	r2, [r3, #20]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3330      	adds	r3, #48	; 0x30
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	211f      	movs	r1, #31
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 011f 	and.w	r1, r3, #31
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3314      	adds	r3, #20
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0e5b      	lsrs	r3, r3, #25
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0d1b      	lsrs	r3, r3, #20
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2107      	movs	r1, #7
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0d1b      	lsrs	r3, r3, #20
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0318 	and.w	r3, r3, #24
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fb4:	40d9      	lsrs	r1, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	400b      	ands	r3, r1
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0007ffff 	.word	0x0007ffff

08001fd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6093      	str	r3, [r2, #8]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002098:	d101      	bne.n	800209e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	f043 0202 	orr.w	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <LL_ADC_IsEnabled+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_IsEnabled+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d101      	bne.n	800213a <LL_ADC_IsDisableOngoing+0x18>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_IsDisableOngoing+0x1a>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d101      	bne.n	8002188 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d101      	bne.n	80021ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1a9      	b.n	800252a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fb11 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff19 	bl	8002034 <LL_ADC_IsDeepPowerDownEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff feff 	bl	8002010 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff34 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff18 	bl	800205c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222c:	4b9c      	ldr	r3, [pc, #624]	; (80024a0 <HAL_ADC_Init+0x2e4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	4a9c      	ldr	r2, [pc, #624]	; (80024a4 <HAL_ADC_Init+0x2e8>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002240:	e002      	b.n	8002248 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff16 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10d      	bne.n	800227a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff76 	bl	8002170 <LL_ADC_REG_IsConversionOngoing>
 8002284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8142 	bne.w	8002518 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 813e 	bne.w	8002518 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff23 	bl	80020fc <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d141      	bne.n	8002340 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_Init+0x114>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a77      	ldr	r2, [pc, #476]	; (80024a8 <HAL_ADC_Init+0x2ec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10f      	bne.n	80022f0 <HAL_ADC_Init+0x134>
 80022d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022d4:	f7ff ff12 	bl	80020fc <LL_ADC_IsEnabled>
 80022d8:	4604      	mov	r4, r0
 80022da:	4873      	ldr	r0, [pc, #460]	; (80024a8 <HAL_ADC_Init+0x2ec>)
 80022dc:	f7ff ff0e 	bl	80020fc <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4323      	orrs	r3, r4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e012      	b.n	8002316 <HAL_ADC_Init+0x15a>
 80022f0:	486e      	ldr	r0, [pc, #440]	; (80024ac <HAL_ADC_Init+0x2f0>)
 80022f2:	f7ff ff03 	bl	80020fc <LL_ADC_IsEnabled>
 80022f6:	4604      	mov	r4, r0
 80022f8:	486d      	ldr	r0, [pc, #436]	; (80024b0 <HAL_ADC_Init+0x2f4>)
 80022fa:	f7ff feff 	bl	80020fc <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	431c      	orrs	r4, r3
 8002302:	486c      	ldr	r0, [pc, #432]	; (80024b4 <HAL_ADC_Init+0x2f8>)
 8002304:	f7ff fefa 	bl	80020fc <LL_ADC_IsEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	4323      	orrs	r3, r4
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002322:	d004      	beq.n	800232e <HAL_ADC_Init+0x172>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_ADC_Init+0x2ec>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Init+0x176>
 800232e:	4a62      	ldr	r2, [pc, #392]	; (80024b8 <HAL_ADC_Init+0x2fc>)
 8002330:	e000      	b.n	8002334 <HAL_ADC_Init+0x178>
 8002332:	4a62      	ldr	r2, [pc, #392]	; (80024bc <HAL_ADC_Init+0x300>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f7ff fcd8 	bl	8001cf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7f5b      	ldrb	r3, [r3, #29]
 8002344:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800234a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002350:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002356:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236a:	2b01      	cmp	r3, #1
 800236c:	d106      	bne.n	800237c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	045b      	lsls	r3, r3, #17
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_ADC_Init+0x304>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fee5 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 80023cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d17f      	bne.n	80024d4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d17c      	bne.n	80024d4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f6:	f023 0302 	bic.w	r3, r3, #2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d017      	beq.n	800243c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800241a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002424:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6911      	ldr	r1, [r2, #16]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800243a:	e013      	b.n	8002464 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800244a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002460:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12a      	bne.n	80024c4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002478:	f023 0304 	bic.w	r3, r3, #4
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002484:	4311      	orrs	r1, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002490:	430a      	orrs	r2, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	611a      	str	r2, [r3, #16]
 800249e:	e019      	b.n	80024d4 <HAL_ADC_Init+0x318>
 80024a0:	20000004 	.word	0x20000004
 80024a4:	053e2d63 	.word	0x053e2d63
 80024a8:	50000100 	.word	0x50000100
 80024ac:	50000400 	.word	0x50000400
 80024b0:	50000500 	.word	0x50000500
 80024b4:	50000600 	.word	0x50000600
 80024b8:	50000300 	.word	0x50000300
 80024bc:	50000700 	.word	0x50000700
 80024c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d10c      	bne.n	80024f6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f023 010f 	bic.w	r1, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
 80024f4:	e007      	b.n	8002506 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020f 	bic.w	r2, r2, #15
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	65da      	str	r2, [r3, #92]	; 0x5c
 8002516:	e007      	b.n	8002528 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002528:	7ffb      	ldrb	r3, [r7, #31]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop

08002534 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002548:	d004      	beq.n	8002554 <HAL_ADC_Start_DMA+0x20>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5a      	ldr	r2, [pc, #360]	; (80026b8 <HAL_ADC_Start_DMA+0x184>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_ADC_Start_DMA+0x24>
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_ADC_Start_DMA+0x188>)
 8002556:	e000      	b.n	800255a <HAL_ADC_Start_DMA+0x26>
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_ADC_Start_DMA+0x18c>)
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd3c 	bl	8001fd8 <LL_ADC_GetMultimode>
 8002560:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe02 	bl	8002170 <LL_ADC_REG_IsConversionOngoing>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 809b 	bne.w	80026aa <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Start_DMA+0x4e>
 800257e:	2302      	movs	r3, #2
 8002580:	e096      	b.n	80026b0 <HAL_ADC_Start_DMA+0x17c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <HAL_ADC_Start_DMA+0x190>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d008      	beq.n	80025a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d002      	beq.n	80025a6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d17a      	bne.n	800269c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 ff60 	bl	800346c <ADC_Enable>
 80025ac:	4603      	mov	r3, r0
 80025ae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d16d      	bne.n	8002692 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3a      	ldr	r2, [pc, #232]	; (80026b8 <HAL_ADC_Start_DMA+0x184>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_ADC_Start_DMA+0xb4>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_ADC_Start_DMA+0x194>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d002      	beq.n	80025e4 <HAL_ADC_Start_DMA+0xb0>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e003      	b.n	80025ec <HAL_ADC_Start_DMA+0xb8>
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_ADC_Start_DMA+0x198>)
 80025e6:	e001      	b.n	80025ec <HAL_ADC_Start_DMA+0xb8>
 80025e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d002      	beq.n	80025fa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f023 0206 	bic.w	r2, r3, #6
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	661a      	str	r2, [r3, #96]	; 0x60
 800261e:	e002      	b.n	8002626 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_ADC_Start_DMA+0x19c>)
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_ADC_Start_DMA+0x1a0>)
 8002634:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_ADC_Start_DMA+0x1a4>)
 800263c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	221c      	movs	r2, #28
 8002644:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0210 	orr.w	r2, r2, #16
 800265c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3340      	adds	r3, #64	; 0x40
 8002678:	4619      	mov	r1, r3
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f001 fc25 	bl	8003ecc <HAL_DMA_Start_IT>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fd5c 	bl	8002148 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002690:	e00d      	b.n	80026ae <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800269a:	e008      	b.n	80026ae <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80026a8:	e001      	b.n	80026ae <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	50000100 	.word	0x50000100
 80026bc:	50000300 	.word	0x50000300
 80026c0:	50000700 	.word	0x50000700
 80026c4:	50000600 	.word	0x50000600
 80026c8:	50000500 	.word	0x50000500
 80026cc:	50000400 	.word	0x50000400
 80026d0:	08003657 	.word	0x08003657
 80026d4:	0800372f 	.word	0x0800372f
 80026d8:	0800374b 	.word	0x0800374b

080026dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002700:	d004      	beq.n	800270c <HAL_ADC_IRQHandler+0x30>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a8e      	ldr	r2, [pc, #568]	; (8002940 <HAL_ADC_IRQHandler+0x264>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_ADC_IRQHandler+0x34>
 800270c:	4b8d      	ldr	r3, [pc, #564]	; (8002944 <HAL_ADC_IRQHandler+0x268>)
 800270e:	e000      	b.n	8002712 <HAL_ADC_IRQHandler+0x36>
 8002710:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <HAL_ADC_IRQHandler+0x26c>)
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fc60 	bl	8001fd8 <LL_ADC_GetMultimode>
 8002718:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d017      	beq.n	8002754 <HAL_ADC_IRQHandler+0x78>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f001 f8f6 	bl	8003938 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <HAL_ADC_IRQHandler+0x8c>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8094 	beq.w	800289c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 808e 	beq.w	800289c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fb79 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d072      	beq.n	800288e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a64      	ldr	r2, [pc, #400]	; (8002940 <HAL_ADC_IRQHandler+0x264>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_ADC_IRQHandler+0xea>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_ADC_IRQHandler+0x270>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d002      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xe6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e003      	b.n	80027ca <HAL_ADC_IRQHandler+0xee>
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_ADC_IRQHandler+0x274>)
 80027c4:	e001      	b.n	80027ca <HAL_ADC_IRQHandler+0xee>
 80027c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d008      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d002      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d104      	bne.n	80027ee <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	e014      	b.n	8002818 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a53      	ldr	r2, [pc, #332]	; (8002940 <HAL_ADC_IRQHandler+0x264>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_ADC_IRQHandler+0x130>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a53      	ldr	r2, [pc, #332]	; (800294c <HAL_ADC_IRQHandler+0x270>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d002      	beq.n	8002808 <HAL_ADC_IRQHandler+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e003      	b.n	8002810 <HAL_ADC_IRQHandler+0x134>
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_ADC_IRQHandler+0x274>)
 800280a:	e001      	b.n	8002810 <HAL_ADC_IRQHandler+0x134>
 800280c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002810:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d135      	bne.n	800288e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d12e      	bne.n	800288e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fc9b 	bl	8002170 <LL_ADC_REG_IsConversionOngoing>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11a      	bne.n	8002876 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 020c 	bic.w	r2, r2, #12
 800284e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d112      	bne.n	800288e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
 8002874:	e00b      	b.n	800288e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f984 	bl	8002b9c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	220c      	movs	r2, #12
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_IRQHandler+0x1d4>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80b3 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80ad 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fb14 	bl	8001f12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80028ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff facf 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028f6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_ADC_IRQHandler+0x264>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_ADC_IRQHandler+0x23a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_ADC_IRQHandler+0x270>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d002      	beq.n	8002912 <HAL_ADC_IRQHandler+0x236>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e003      	b.n	800291a <HAL_ADC_IRQHandler+0x23e>
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_ADC_IRQHandler+0x274>)
 8002914:	e001      	b.n	800291a <HAL_ADC_IRQHandler+0x23e>
 8002916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4293      	cmp	r3, r2
 8002920:	d008      	beq.n	8002934 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d002      	beq.n	8002934 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d10f      	bne.n	8002954 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	e01f      	b.n	800297e <HAL_ADC_IRQHandler+0x2a2>
 800293e:	bf00      	nop
 8002940:	50000100 	.word	0x50000100
 8002944:	50000300 	.word	0x50000300
 8002948:	50000700 	.word	0x50000700
 800294c:	50000500 	.word	0x50000500
 8002950:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a8b      	ldr	r2, [pc, #556]	; (8002b88 <HAL_ADC_IRQHandler+0x4ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_ADC_IRQHandler+0x296>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a8a      	ldr	r2, [pc, #552]	; (8002b8c <HAL_ADC_IRQHandler+0x4b0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_IRQHandler+0x292>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e003      	b.n	8002976 <HAL_ADC_IRQHandler+0x29a>
 800296e:	4b88      	ldr	r3, [pc, #544]	; (8002b90 <HAL_ADC_IRQHandler+0x4b4>)
 8002970:	e001      	b.n	8002976 <HAL_ADC_IRQHandler+0x29a>
 8002972:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002976:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d047      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_IRQHandler+0x2c2>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03f      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d13a      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d133      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12e      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fbeb 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11a      	bne.n	80029fc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d112      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ff67 	bl	80038e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2260      	movs	r2, #96	; 0x60
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x374>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8be 	bl	8002bc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x3a4>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 ff4d 	bl	8003910 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x3d4>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 ff3f 	bl	8003924 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d043      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x466>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03e      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002acc:	2301      	movs	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	e021      	b.n	8002b16 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_IRQHandler+0x410>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <HAL_ADC_IRQHandler+0x4ac>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_IRQHandler+0x414>
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_ADC_IRQHandler+0x4b8>)
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_IRQHandler+0x416>
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_ADC_IRQHandler+0x4bc>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa7e 	bl	8001ff4 <LL_ADC_GetMultiDMATransfer>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
 8002b02:	e008      	b.n	8002b16 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002b12:	2301      	movs	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10e      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f043 0202 	orr.w	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f84f 	bl	8002bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x4a2>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b76:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 febf 	bl	80038fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	; 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	50000100 	.word	0x50000100
 8002b8c:	50000500 	.word	0x50000500
 8002b90:	50000400 	.word	0x50000400
 8002b94:	50000300 	.word	0x50000300
 8002b98:	50000700 	.word	0x50000700

08002b9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0b6      	sub	sp, #216	; 0xd8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x24>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	f000 bc13 	b.w	8003436 <HAL_ADC_ConfigChannel+0x84a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff faa7 	bl	8002170 <LL_ADC_REG_IsConversionOngoing>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 83f3 	bne.w	8003410 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff f93f 	bl	8001eba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fa95 	bl	8002170 <LL_ADC_REG_IsConversionOngoing>
 8002c46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff faa1 	bl	8002196 <LL_ADC_INJ_IsConversionOngoing>
 8002c54:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 81d9 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 81d4 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c74:	d10f      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7ff f959 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f8ed 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>
 8002c94:	e00e      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f7ff f948 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f8dd 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d022      	beq.n	8002d1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6919      	ldr	r1, [r3, #16]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ce6:	f7ff f837 	bl	8001d58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff f883 	bl	8001e02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x126>
 8002d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x128>
 8002d12:	2300      	movs	r3, #0
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff f88f 	bl	8001e38 <LL_ADC_SetOffsetSaturation>
 8002d1a:	e17b      	b.n	8003014 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f83c 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x15c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f831 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	f003 021f 	and.w	r2, r3, #31
 8002d46:	e01e      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x19a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f826 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d76:	2320      	movs	r3, #32
 8002d78:	e004      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x1b2>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0e9b      	lsrs	r3, r3, #26
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	e018      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1e4>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e004      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d106      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fff5 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe ffd9 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x222>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe ffce 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	e01e      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x260>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe ffc3 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e004      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x278>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	e018      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x2aa>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e004      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d106      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe ff92 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2102      	movs	r1, #2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe ff76 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x2e8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe ff6b 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	e01e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x326>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe ff60 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e004      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x33e>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	e016      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x36c>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e004      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe ff31 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2103      	movs	r1, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe ff15 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x3aa>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2103      	movs	r1, #3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ff0a 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	e017      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x3da>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe feff 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d105      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x3f2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	e011      	b.n	8003002 <HAL_ADC_ConfigChannel+0x416>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e003      	b.n	8003002 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003002:	429a      	cmp	r2, r3
 8003004:	d106      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	2103      	movs	r1, #3
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fedc 	bl	8001dcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f86f 	bl	80020fc <LL_ADC_IsEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 813d 	bne.w	80032a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f7fe ffac 	bl	8001f90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4aa2      	ldr	r2, [pc, #648]	; (80032c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	f040 812e 	bne.w	80032a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_ADC_ConfigChannel+0x480>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	3301      	adds	r3, #1
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2b09      	cmp	r3, #9
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e019      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x4b4>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800307e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2b09      	cmp	r3, #9
 8003098:	bf94      	ite	ls
 800309a:	2301      	movls	r3, #1
 800309c:	2300      	movhi	r3, #0
 800309e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d079      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x4d4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	3301      	adds	r3, #1
 80030b8:	069b      	lsls	r3, r3, #26
 80030ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030be:	e015      	b.n	80030ec <HAL_ADC_ConfigChannel+0x500>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80030d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80030dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	069b      	lsls	r3, r3, #26
 80030e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_ADC_ConfigChannel+0x520>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	e017      	b.n	800313c <HAL_ADC_ConfigChannel+0x550>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800311e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e003      	b.n	8003130 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	ea42 0103 	orr.w	r1, r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x576>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	3301      	adds	r3, #1
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	051b      	lsls	r3, r3, #20
 8003160:	e018      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5a8>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e003      	b.n	8003186 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003194:	430b      	orrs	r3, r1
 8003196:	e07e      	b.n	8003296 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x5c8>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	3301      	adds	r3, #1
 80031ac:	069b      	lsls	r3, r3, #26
 80031ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b2:	e015      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x5f4>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80031cc:	2320      	movs	r3, #32
 80031ce:	e003      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x614>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	e017      	b.n	8003230 <HAL_ADC_ConfigChannel+0x644>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	61fb      	str	r3, [r7, #28]
  return result;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10d      	bne.n	800325c <HAL_ADC_ConfigChannel+0x670>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	3301      	adds	r3, #1
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	3b1e      	subs	r3, #30
 8003254:	051b      	lsls	r3, r3, #20
 8003256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325a:	e01b      	b.n	8003294 <HAL_ADC_ConfigChannel+0x6a8>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	613b      	str	r3, [r7, #16]
  return result;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e003      	b.n	8003280 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	051b      	lsls	r3, r3, #20
 8003290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003294:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329a:	4619      	mov	r1, r3
 800329c:	f7fe fe4c 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_ADC_ConfigChannel+0x6e0>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80be 	beq.w	800342a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b6:	d004      	beq.n	80032c2 <HAL_ADC_ConfigChannel+0x6d6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10a      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x6ec>
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80032c4:	e009      	b.n	80032da <HAL_ADC_ConfigChannel+0x6ee>
 80032c6:	bf00      	nop
 80032c8:	407f0000 	.word	0x407f0000
 80032cc:	80080000 	.word	0x80080000
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000300 	.word	0x50000300
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_ADC_ConfigChannel+0x854>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fd2e 	bl	8001d3c <LL_ADC_GetCommonPathInternalCh>
 80032e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a56      	ldr	r2, [pc, #344]	; (8003444 <HAL_ADC_ConfigChannel+0x858>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x70c>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_ADC_ConfigChannel+0x85c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d13a      	bne.n	800336e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d134      	bne.n	800336e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330c:	d005      	beq.n	800331a <HAL_ADC_ConfigChannel+0x72e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4e      	ldr	r2, [pc, #312]	; (800344c <HAL_ADC_ConfigChannel+0x860>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f040 8085 	bne.w	8003424 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d004      	beq.n	800332e <HAL_ADC_ConfigChannel+0x742>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_ADC_ConfigChannel+0x864>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x746>
 800332e:	4a49      	ldr	r2, [pc, #292]	; (8003454 <HAL_ADC_ConfigChannel+0x868>)
 8003330:	e000      	b.n	8003334 <HAL_ADC_ConfigChannel+0x748>
 8003332:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_ADC_ConfigChannel+0x854>)
 8003334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f7fe fce9 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003344:	4b44      	ldr	r3, [pc, #272]	; (8003458 <HAL_ADC_ConfigChannel+0x86c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	4a44      	ldr	r2, [pc, #272]	; (800345c <HAL_ADC_ConfigChannel+0x870>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800335e:	e002      	b.n	8003366 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f9      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800336c:	e05a      	b.n	8003424 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <HAL_ADC_ConfigChannel+0x874>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d125      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11f      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_ADC_ConfigChannel+0x864>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d104      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x7ac>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a34      	ldr	r2, [pc, #208]	; (8003464 <HAL_ADC_ConfigChannel+0x878>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d047      	beq.n	8003428 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a0:	d004      	beq.n	80033ac <HAL_ADC_ConfigChannel+0x7c0>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_ADC_ConfigChannel+0x864>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x7c4>
 80033ac:	4a29      	ldr	r2, [pc, #164]	; (8003454 <HAL_ADC_ConfigChannel+0x868>)
 80033ae:	e000      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x7c6>
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_ADC_ConfigChannel+0x854>)
 80033b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ba:	4619      	mov	r1, r3
 80033bc:	4610      	mov	r0, r2
 80033be:	f7fe fcaa 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c2:	e031      	b.n	8003428 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a27      	ldr	r2, [pc, #156]	; (8003468 <HAL_ADC_ConfigChannel+0x87c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12d      	bne.n	800342a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d127      	bne.n	800342a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <HAL_ADC_ConfigChannel+0x864>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ec:	d004      	beq.n	80033f8 <HAL_ADC_ConfigChannel+0x80c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_ADC_ConfigChannel+0x864>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x810>
 80033f8:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_ADC_ConfigChannel+0x868>)
 80033fa:	e000      	b.n	80033fe <HAL_ADC_ConfigChannel+0x812>
 80033fc:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_ADC_ConfigChannel+0x854>)
 80033fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003402:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f7fe fc84 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
 800340e:	e00c      	b.n	800342a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003422:	e002      	b.n	800342a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003432:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003436:	4618      	mov	r0, r3
 8003438:	37d8      	adds	r7, #216	; 0xd8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	50000700 	.word	0x50000700
 8003444:	c3210000 	.word	0xc3210000
 8003448:	90c00010 	.word	0x90c00010
 800344c:	50000600 	.word	0x50000600
 8003450:	50000100 	.word	0x50000100
 8003454:	50000300 	.word	0x50000300
 8003458:	20000004 	.word	0x20000004
 800345c:	053e2d63 	.word	0x053e2d63
 8003460:	c7520000 	.word	0xc7520000
 8003464:	50000500 	.word	0x50000500
 8003468:	cb840000 	.word	0xcb840000

0800346c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fe3d 	bl	80020fc <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d176      	bne.n	8003576 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	4b3c      	ldr	r3, [pc, #240]	; (8003580 <ADC_Enable+0x114>)
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	f043 0210 	orr.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e062      	b.n	8003578 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fdf8 	bl	80020ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c4:	d004      	beq.n	80034d0 <ADC_Enable+0x64>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <ADC_Enable+0x118>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <ADC_Enable+0x68>
 80034d0:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <ADC_Enable+0x11c>)
 80034d2:	e000      	b.n	80034d6 <ADC_Enable+0x6a>
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <ADC_Enable+0x120>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc30 	bl	8001d3c <LL_ADC_GetCommonPathInternalCh>
 80034dc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <ADC_Enable+0x124>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <ADC_Enable+0x128>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003500:	e002      	b.n	8003508 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800350e:	f7fe fbc1 	bl	8001c94 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003514:	e028      	b.n	8003568 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fdee 	bl	80020fc <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fdbe 	bl	80020ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003530:	f7fe fbb0 	bl	8001c94 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d914      	bls.n	8003568 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d00d      	beq.n	8003568 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d1cf      	bne.n	8003516 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	8000003f 	.word	0x8000003f
 8003584:	50000100 	.word	0x50000100
 8003588:	50000300 	.word	0x50000300
 800358c:	50000700 	.word	0x50000700
 8003590:	20000004 	.word	0x20000004
 8003594:	053e2d63 	.word	0x053e2d63

08003598 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fdbc 	bl	8002122 <LL_ADC_IsDisableOngoing>
 80035aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fda3 	bl	80020fc <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d047      	beq.n	800364c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d144      	bne.n	800364c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030d 	and.w	r3, r3, #13
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10c      	bne.n	80035ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fd7d 	bl	80020d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2203      	movs	r2, #3
 80035e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035e2:	f7fe fb57 	bl	8001c94 <HAL_GetTick>
 80035e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035e8:	e029      	b.n	800363e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e023      	b.n	800364e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003606:	f7fe fb45 	bl	8001c94 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d914      	bls.n	800363e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1dc      	bne.n	8003606 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800366c:	2b00      	cmp	r3, #0
 800366e:	d14b      	bne.n	8003708 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d021      	beq.n	80036ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fc00 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d032      	beq.n	8003700 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d12b      	bne.n	8003700 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11f      	bne.n	8003700 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80036cc:	e018      	b.n	8003700 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d111      	bne.n	8003700 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fa4b 	bl	8002b9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003706:	e00e      	b.n	8003726 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff fa5f 	bl	8002bd8 <HAL_ADC_ErrorCallback>
}
 800371a:	e004      	b.n	8003726 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fa37 	bl	8002bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003768:	f043 0204 	orr.w	r2, r3, #4
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fa31 	bl	8002bd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <LL_ADC_IsEnabled>:
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <LL_ADC_IsEnabled+0x18>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <LL_ADC_IsEnabled+0x1a>
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_StartCalibration>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80037b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_IsCalibrationOnGoing>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ea:	d101      	bne.n	80037f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_ADC_REG_IsConversionOngoing>:
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d101      	bne.n	8003816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_ADCEx_Calibration_Start+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e04d      	b.n	80038dc <HAL_ADCEx_Calibration_Start+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fea5 	bl	8003598 <ADC_Disable>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d136      	bne.n	80038c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003860:	f023 0302 	bic.w	r3, r3, #2
 8003864:	f043 0202 	orr.w	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff96 	bl	80037a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003878:	e014      	b.n	80038a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3301      	adds	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d90d      	bls.n	80038a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f023 0312 	bic.w	r3, r3, #18
 8003890:	f043 0210 	orr.w	r2, r3, #16
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e01b      	b.n	80038dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff94 	bl	80037d6 <LL_ADC_IsCalibrationOnGoing>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e2      	bne.n	800387a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	f023 0303 	bic.w	r3, r3, #3
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c4:	e005      	b.n	80038d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f043 0210 	orr.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	0004de01 	.word	0x0004de01

080038e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b0a1      	sub	sp, #132	; 0x84
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003966:	2302      	movs	r3, #2
 8003968:	e0e7      	b.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003972:	2300      	movs	r3, #0
 8003974:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003976:	2300      	movs	r3, #0
 8003978:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003982:	d102      	bne.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003984:	4b6f      	ldr	r3, [pc, #444]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	e009      	b.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d102      	bne.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003994:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	e001      	b.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0be      	b.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff ff1d 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 80039c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff17 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 80a0 	bne.w	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 809c 	bne.w	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e8:	d004      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d101      	bne.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039f4:	4b56      	ldr	r3, [pc, #344]	; (8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80039f6:	e000      	b.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039f8:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80039fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d04b      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a16:	035b      	lsls	r3, r3, #13
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a28:	d004      	beq.n	8003a34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a45      	ldr	r2, [pc, #276]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10f      	bne.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a38:	f7ff fea1 	bl	800377e <LL_ADC_IsEnabled>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4841      	ldr	r0, [pc, #260]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a40:	f7ff fe9d 	bl	800377e <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4323      	orrs	r3, r4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e012      	b.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a54:	483c      	ldr	r0, [pc, #240]	; (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a56:	f7ff fe92 	bl	800377e <LL_ADC_IsEnabled>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	483b      	ldr	r0, [pc, #236]	; (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a5e:	f7ff fe8e 	bl	800377e <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	431c      	orrs	r4, r3
 8003a66:	483c      	ldr	r0, [pc, #240]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a68:	f7ff fe89 	bl	800377e <LL_ADC_IsEnabled>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4323      	orrs	r3, r4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d056      	beq.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	6892      	ldr	r2, [r2, #8]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	431a      	orrs	r2, r3
 8003a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a98:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9a:	e047      	b.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab0:	d004      	beq.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10f      	bne.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003abc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ac0:	f7ff fe5d 	bl	800377e <LL_ADC_IsEnabled>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	481f      	ldr	r0, [pc, #124]	; (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ac8:	f7ff fe59 	bl	800377e <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4323      	orrs	r3, r4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e012      	b.n	8003b02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003adc:	481a      	ldr	r0, [pc, #104]	; (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ade:	f7ff fe4e 	bl	800377e <LL_ADC_IsEnabled>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4819      	ldr	r0, [pc, #100]	; (8003b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ae6:	f7ff fe4a 	bl	800377e <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	431c      	orrs	r4, r3
 8003aee:	481a      	ldr	r0, [pc, #104]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003af0:	f7ff fe45 	bl	800377e <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b16:	e009      	b.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b2a:	e000      	b.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3784      	adds	r7, #132	; 0x84
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd90      	pop	{r4, r7, pc}
 8003b42:	bf00      	nop
 8003b44:	50000100 	.word	0x50000100
 8003b48:	50000400 	.word	0x50000400
 8003b4c:	50000500 	.word	0x50000500
 8003b50:	50000300 	.word	0x50000300
 8003b54:	50000700 	.word	0x50000700
 8003b58:	50000600 	.word	0x50000600

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <__NVIC_EnableIRQ+0x38>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc8:	d301      	bcc.n	8003cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <SysTick_Config+0x40>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f7ff ff8e 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000e010 	.word	0xe000e010

08003cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff29 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff40 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff90 	bl	8003c50 <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5f 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff33 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa4 	bl	8003cb8 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e08d      	b.n	8003eaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <HAL_DMA_Init+0x138>)
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d80f      	bhi.n	8003dba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <HAL_DMA_Init+0x13c>)
 8003da2:	4413      	add	r3, r2
 8003da4:	4a45      	ldr	r2, [pc, #276]	; (8003ebc <HAL_DMA_Init+0x140>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	009a      	lsls	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_DMA_Init+0x144>)
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
 8003db8:	e00e      	b.n	8003dd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <HAL_DMA_Init+0x148>)
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a3d      	ldr	r2, [pc, #244]	; (8003ebc <HAL_DMA_Init+0x140>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	009a      	lsls	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <HAL_DMA_Init+0x14c>)
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9b6 	bl	800419c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e38:	d102      	bne.n	8003e40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d010      	beq.n	8003e80 <HAL_DMA_Init+0x104>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d80c      	bhi.n	8003e80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9d6 	bl	8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	e008      	b.n	8003e92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40020407 	.word	0x40020407
 8003eb8:	bffdfff8 	.word	0xbffdfff8
 8003ebc:	cccccccd 	.word	0xcccccccd
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	bffdfbf8 	.word	0xbffdfbf8
 8003ec8:	40020400 	.word	0x40020400

08003ecc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_DMA_Start_IT+0x20>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e066      	b.n	8003fba <HAL_DMA_Start_IT+0xee>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d155      	bne.n	8003fac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f8fb 	bl	8004120 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 020e 	orr.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e00f      	b.n	8003f64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 020a 	orr.w	r2, r2, #10
 8003f62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e005      	b.n	8003fb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d026      	beq.n	800403c <HAL_DMA_IRQHandler+0x7a>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d021      	beq.n	800403c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0204 	bic.w	r2, r2, #4
 8004014:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f003 021f 	and.w	r2, r3, #31
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2104      	movs	r1, #4
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d071      	beq.n	8004116 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800403a:	e06c      	b.n	8004116 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2202      	movs	r2, #2
 8004046:	409a      	lsls	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02e      	beq.n	80040ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d029      	beq.n	80040ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 020a 	bic.w	r2, r2, #10
 8004076:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2102      	movs	r1, #2
 800408e:	fa01 f202 	lsl.w	r2, r1, r2
 8004092:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d038      	beq.n	8004116 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040ac:	e033      	b.n	8004116 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2208      	movs	r2, #8
 80040b8:	409a      	lsls	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02a      	beq.n	8004118 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d025      	beq.n	8004118 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020e 	bic.w	r2, r2, #14
 80040da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	f003 021f 	and.w	r2, r3, #31
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004116:	bf00      	nop
 8004118:	bf00      	nop
}
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004136:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2101      	movs	r1, #1
 8004158:	fa01 f202 	lsl.w	r2, r1, r2
 800415c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b10      	cmp	r3, #16
 800416c:	d108      	bne.n	8004180 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800417e:	e007      	b.n	8004190 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d802      	bhi.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e001      	b.n	80041ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80041b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3b08      	subs	r3, #8
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	009a      	lsls	r2, r3, #2
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40020407 	.word	0x40020407
 8004208:	40020800 	.word	0x40020800
 800420c:	40020820 	.word	0x40020820
 8004210:	cccccccd 	.word	0xcccccccd
 8004214:	40020880 	.word	0x40020880

08004218 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800423a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	1000823f 	.word	0x1000823f
 800425c:	40020940 	.word	0x40020940

08004260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800426e:	e15a      	b.n	8004526 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 814c 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d005      	beq.n	80042a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800429c:	2b02      	cmp	r3, #2
 800429e:	d130      	bne.n	8004302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4013      	ands	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042d6:	2201      	movs	r2, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 0201 	and.w	r2, r3, #1
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b03      	cmp	r3, #3
 800430c:	d017      	beq.n	800433e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d123      	bne.n	8004392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	08da      	lsrs	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3208      	adds	r2, #8
 8004352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	220f      	movs	r2, #15
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	08da      	lsrs	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3208      	adds	r2, #8
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0203 	and.w	r2, r3, #3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80a6 	beq.w	8004520 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_GPIO_Init+0x2e4>)
 80043d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d8:	4a5a      	ldr	r2, [pc, #360]	; (8004544 <HAL_GPIO_Init+0x2e4>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6613      	str	r3, [r2, #96]	; 0x60
 80043e0:	4b58      	ldr	r3, [pc, #352]	; (8004544 <HAL_GPIO_Init+0x2e4>)
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ec:	4a56      	ldr	r2, [pc, #344]	; (8004548 <HAL_GPIO_Init+0x2e8>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4013      	ands	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004416:	d01f      	beq.n	8004458 <HAL_GPIO_Init+0x1f8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a4c      	ldr	r2, [pc, #304]	; (800454c <HAL_GPIO_Init+0x2ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d019      	beq.n	8004454 <HAL_GPIO_Init+0x1f4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_GPIO_Init+0x2f0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_GPIO_Init+0x1f0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <HAL_GPIO_Init+0x2f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00d      	beq.n	800444c <HAL_GPIO_Init+0x1ec>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a49      	ldr	r2, [pc, #292]	; (8004558 <HAL_GPIO_Init+0x2f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <HAL_GPIO_Init+0x1e8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a48      	ldr	r2, [pc, #288]	; (800455c <HAL_GPIO_Init+0x2fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_GPIO_Init+0x1e4>
 8004440:	2305      	movs	r3, #5
 8004442:	e00a      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004444:	2306      	movs	r3, #6
 8004446:	e008      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004448:	2304      	movs	r3, #4
 800444a:	e006      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 800444c:	2303      	movs	r3, #3
 800444e:	e004      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004450:	2302      	movs	r3, #2
 8004452:	e002      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_GPIO_Init+0x1fa>
 8004458:	2300      	movs	r3, #0
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	f002 0203 	and.w	r2, r2, #3
 8004460:	0092      	lsls	r2, r2, #2
 8004462:	4093      	lsls	r3, r2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800446a:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_GPIO_Init+0x2e8>)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004478:	4b39      	ldr	r3, [pc, #228]	; (8004560 <HAL_GPIO_Init+0x300>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800449c:	4a30      	ldr	r2, [pc, #192]	; (8004560 <HAL_GPIO_Init+0x300>)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <HAL_GPIO_Init+0x300>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c6:	4a26      	ldr	r2, [pc, #152]	; (8004560 <HAL_GPIO_Init+0x300>)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <HAL_GPIO_Init+0x300>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_GPIO_Init+0x300>)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_GPIO_Init+0x300>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <HAL_GPIO_Init+0x300>)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3301      	adds	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f ae9d 	bne.w	8004270 <HAL_GPIO_Init+0x10>
  }
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40021000 	.word	0x40021000
 8004548:	40010000 	.word	0x40010000
 800454c:	48000400 	.word	0x48000400
 8004550:	48000800 	.word	0x48000800
 8004554:	48000c00 	.word	0x48000c00
 8004558:	48001000 	.word	0x48001000
 800455c:	48001400 	.word	0x48001400
 8004560:	40010400 	.word	0x40010400

08004564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	807b      	strh	r3, [r7, #2]
 8004570:	4613      	mov	r3, r2
 8004572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004574:	787b      	ldrb	r3, [r7, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004580:	e002      	b.n	8004588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	041a      	lsls	r2, r3, #16
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	43d9      	mvns	r1, r3
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	400b      	ands	r3, r1
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d006      	beq.n	80045ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045de:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fc ffb2 	bl	8001550 <HAL_GPIO_EXTI_Callback>
  }
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40010400 	.word	0x40010400

080045f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d141      	bne.n	800468a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004606:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d131      	bne.n	8004678 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800461a:	4a46      	ldr	r2, [pc, #280]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800462c:	4a41      	ldr	r2, [pc, #260]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004632:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004634:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2232      	movs	r2, #50	; 0x32
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	0c9b      	lsrs	r3, r3, #18
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464a:	e002      	b.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3b01      	subs	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004652:	4b38      	ldr	r3, [pc, #224]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d102      	bne.n	8004666 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f2      	bne.n	800464c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d158      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e057      	b.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004678:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467e:	4a2d      	ldr	r2, [pc, #180]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004688:	e04d      	b.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004690:	d141      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004692:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d131      	bne.n	8004704 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046a0:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a6:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046b8:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2232      	movs	r2, #50	; 0x32
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d6:	e002      	b.n	80046de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3b01      	subs	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d102      	bne.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f2      	bne.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d112      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e011      	b.n	8004728 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470a:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004714:	e007      	b.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800471e:	4a05      	ldr	r2, [pc, #20]	; (8004734 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004724:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40007000 	.word	0x40007000
 8004738:	20000004 	.word	0x20000004
 800473c:	431bde83 	.word	0x431bde83

08004740 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800474a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800474e:	6093      	str	r3, [r2, #8]
}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40007000 	.word	0x40007000

08004760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e2fe      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d075      	beq.n	800486a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477e:	4b97      	ldr	r3, [pc, #604]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004788:	4b94      	ldr	r3, [pc, #592]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d102      	bne.n	800479e <HAL_RCC_OscConfig+0x3e>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_OscConfig+0x44>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b8d      	ldr	r3, [pc, #564]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05b      	beq.n	8004868 <HAL_RCC_OscConfig+0x108>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d157      	bne.n	8004868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e2d9      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x74>
 80047c6:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a84      	ldr	r2, [pc, #528]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x98>
 80047de:	4b7f      	ldr	r3, [pc, #508]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7e      	ldr	r2, [pc, #504]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b7c      	ldr	r3, [pc, #496]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a7b      	ldr	r2, [pc, #492]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047f8:	4b78      	ldr	r3, [pc, #480]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a77      	ldr	r2, [pc, #476]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b75      	ldr	r3, [pc, #468]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a74      	ldr	r2, [pc, #464]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fa3c 	bl	8001c94 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004820:	f7fd fa38 	bl	8001c94 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e29e      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004832:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0xc0>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fd fa28 	bl	8001c94 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004848:	f7fd fa24 	bl	8001c94 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e28a      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800485a:	4b60      	ldr	r3, [pc, #384]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0xe8>
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d075      	beq.n	8004962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004876:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004880:	4b56      	ldr	r3, [pc, #344]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d102      	bne.n	8004896 <HAL_RCC_OscConfig+0x136>
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d002      	beq.n	800489c <HAL_RCC_OscConfig+0x13c>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b04      	cmp	r3, #4
 800489a:	d11f      	bne.n	80048dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800489c:	4b4f      	ldr	r3, [pc, #316]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_OscConfig+0x154>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e25d      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b49      	ldr	r3, [pc, #292]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	4946      	ldr	r1, [pc, #280]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048c8:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <HAL_RCC_OscConfig+0x280>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd f995 	bl	8001bfc <HAL_InitTick>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d043      	beq.n	8004960 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e249      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e4:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd f9d0 	bl	8001c94 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f8:	f7fd f9cc 	bl	8001c94 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e232      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800490a:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	492d      	ldr	r1, [pc, #180]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
 800492a:	e01a      	b.n	8004962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd f9ac 	bl	8001c94 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fd f9a8 	bl	8001c94 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e20e      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1e0>
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004960:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d041      	beq.n	80049f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01c      	beq.n	80049b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 8004978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fd f985 	bl	8001c94 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498e:	f7fd f981 	bl	8001c94 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1e7      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049a0:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCC_OscConfig+0x22e>
 80049ae:	e020      	b.n	80049f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x27c>)
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd f968 	bl	8001c94 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c6:	e00d      	b.n	80049e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fd f964 	bl	8001c94 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d906      	bls.n	80049e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1ca      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e4:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ea      	bne.n	80049c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a6 	beq.w	8004b4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a00:	2300      	movs	r3, #0
 8004a02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a04:	4b84      	ldr	r3, [pc, #528]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x2b4>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x2b6>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	4a7e      	ldr	r2, [pc, #504]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6593      	str	r3, [r2, #88]	; 0x58
 8004a26:	4b7c      	ldr	r3, [pc, #496]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a36:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_OscConfig+0x4bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d118      	bne.n	8004a74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a42:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCC_OscConfig+0x4bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <HAL_RCC_OscConfig+0x4bc>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4e:	f7fd f921 	bl	8001c94 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fd f91d 	bl	8001c94 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e183      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a68:	4b6c      	ldr	r3, [pc, #432]	; (8004c1c <HAL_RCC_OscConfig+0x4bc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d108      	bne.n	8004a8e <HAL_RCC_OscConfig+0x32e>
 8004a7c:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	4a65      	ldr	r2, [pc, #404]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a8c:	e024      	b.n	8004ad8 <HAL_RCC_OscConfig+0x378>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b05      	cmp	r3, #5
 8004a94:	d110      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x358>
 8004a96:	4b60      	ldr	r3, [pc, #384]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	4a5e      	ldr	r2, [pc, #376]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	4a5a      	ldr	r2, [pc, #360]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab6:	e00f      	b.n	8004ad8 <HAL_RCC_OscConfig+0x378>
 8004ab8:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a56      	ldr	r2, [pc, #344]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fd f8d8 	bl	8001c94 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd f8d4 	bl	8001c94 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e138      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ed      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x388>
 8004b0c:	e015      	b.n	8004b3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fd f8c1 	bl	8001c94 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fd f8bd 	bl	8001c94 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e121      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2c:	4b3a      	ldr	r3, [pc, #232]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1ed      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03c      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b66:	4a2c      	ldr	r2, [pc, #176]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fd f890 	bl	8001c94 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b78:	f7fd f88c 	bl	8001c94 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0f2      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ef      	beq.n	8004b78 <HAL_RCC_OscConfig+0x418>
 8004b98:	e01b      	b.n	8004bd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd f873 	bl	8001c94 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb2:	f7fd f86f 	bl	8001c94 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0d5      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1ef      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80c9 	beq.w	8004d6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	f000 8083 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d15e      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7fd f849 	bl	8001c94 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c04:	e00c      	b.n	8004c20 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd f845 	bl	8001c94 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d905      	bls.n	8004c20 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0ab      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c20:	4b55      	ldr	r3, [pc, #340]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ec      	bne.n	8004c06 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2c:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCC_OscConfig+0x61c>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6a11      	ldr	r1, [r2, #32]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c3c:	3a01      	subs	r2, #1
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c46:	0212      	lsls	r2, r2, #8
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c4e:	0852      	lsrs	r2, r2, #1
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0552      	lsls	r2, r2, #21
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c5a:	0852      	lsrs	r2, r2, #1
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	0652      	lsls	r2, r2, #25
 8004c60:	4311      	orrs	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c66:	06d2      	lsls	r2, r2, #27
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	4943      	ldr	r1, [pc, #268]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c70:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a40      	ldr	r2, [pc, #256]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c7c:	4b3e      	ldr	r3, [pc, #248]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fd f804 	bl	8001c94 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fd f800 	bl	8001c94 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e066      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca2:	4b35      	ldr	r3, [pc, #212]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x530>
 8004cae:	e05e      	b.n	8004d6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fc ffea 	bl	8001c94 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc ffe6 	bl	8001c94 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e04c      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd6:	4b28      	ldr	r3, [pc, #160]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	4924      	ldr	r1, [pc, #144]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_RCC_OscConfig+0x620>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	60cb      	str	r3, [r1, #12]
 8004cee:	e03e      	b.n	8004d6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e039      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x618>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d12c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d123      	bne.n	8004d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11b      	bne.n	8004d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d113      	bne.n	8004d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	3b01      	subs	r3, #1
 8004d64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	019f800c 	.word	0x019f800c
 8004d80:	feeefffc 	.word	0xfeeefffc

08004d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e11e      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b91      	ldr	r3, [pc, #580]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 020f 	bic.w	r2, r3, #15
 8004db2:	498c      	ldr	r1, [pc, #560]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b8a      	ldr	r3, [pc, #552]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e106      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d073      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d129      	bne.n	8004e34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de0:	4b81      	ldr	r3, [pc, #516]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0f4      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004df0:	f000 f99e 	bl	8005130 <RCC_GetSysClockFreqFromPLLSource>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4a7c      	ldr	r2, [pc, #496]	; (8004fec <HAL_RCC_ClockConfig+0x268>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d93f      	bls.n	8004e7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004dfe:	4b7a      	ldr	r3, [pc, #488]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d033      	beq.n	8004e7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d12f      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e1e:	4b72      	ldr	r3, [pc, #456]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	4a70      	ldr	r2, [pc, #448]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e024      	b.n	8004e7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e3c:	4b6a      	ldr	r3, [pc, #424]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0c6      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e4c:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0be      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e5c:	f000 f8ce 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4a61      	ldr	r2, [pc, #388]	; (8004fec <HAL_RCC_ClockConfig+0x268>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d909      	bls.n	8004e7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e6a:	4b5f      	ldr	r3, [pc, #380]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e72:	4a5d      	ldr	r2, [pc, #372]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b5a      	ldr	r3, [pc, #360]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4957      	ldr	r1, [pc, #348]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fc ff00 	bl	8001c94 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fc fefc 	bl	8001c94 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e095      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b4e      	ldr	r3, [pc, #312]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d023      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a42      	ldr	r2, [pc, #264]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ee2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ef8:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b39      	ldr	r3, [pc, #228]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4936      	ldr	r1, [pc, #216]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d105      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f26:	4b2f      	ldr	r3, [pc, #188]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d21d      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 020f 	bic.w	r2, r3, #15
 8004f3c:	4929      	ldr	r1, [pc, #164]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f44:	f7fc fea6 	bl	8001c94 <HAL_GetTick>
 8004f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4c:	f7fc fea2 	bl	8001c94 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e03b      	b.n	8004fda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d1ed      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4917      	ldr	r1, [pc, #92]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	490f      	ldr	r1, [pc, #60]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fae:	f000 f825 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <HAL_RCC_ClockConfig+0x264>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	490c      	ldr	r1, [pc, #48]	; (8004ff0 <HAL_RCC_ClockConfig+0x26c>)
 8004fc0:	5ccb      	ldrb	r3, [r1, r3]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x270>)
 8004fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x274>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc fe12 	bl	8001bfc <HAL_InitTick>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	04c4b400 	.word	0x04c4b400
 8004ff0:	08007bfc 	.word	0x08007bfc
 8004ff4:	20000004 	.word	0x20000004
 8004ff8:	20000008 	.word	0x20000008

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005002:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b04      	cmp	r3, #4
 800500c:	d102      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e047      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005014:	4b27      	ldr	r3, [pc, #156]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d102      	bne.n	8005026 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	e03e      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005026:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b0c      	cmp	r3, #12
 8005030:	d136      	bne.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	3301      	adds	r3, #1
 8005048:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d10c      	bne.n	800506a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800505a:	68d2      	ldr	r2, [r2, #12]
 800505c:	0a12      	lsrs	r2, r2, #8
 800505e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
      break;
 8005068:	e00c      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005074:	68d2      	ldr	r2, [r2, #12]
 8005076:	0a12      	lsrs	r2, r2, #8
 8005078:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800507c:	fb02 f303 	mul.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
      break;
 8005082:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	0e5b      	lsrs	r3, r3, #25
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	3301      	adds	r3, #1
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e001      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050a4:	693b      	ldr	r3, [r7, #16]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	016e3600 	.word	0x016e3600

080050c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004

080050d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050dc:	f7ff fff0 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4904      	ldr	r1, [pc, #16]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000
 8005100:	08007c0c 	.word	0x08007c0c

08005104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005108:	f7ff ffda 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0adb      	lsrs	r3, r3, #11
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4904      	ldr	r1, [pc, #16]	; (800512c <HAL_RCC_GetPCLK2Freq+0x28>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	08007c0c 	.word	0x08007c0c

08005130 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005136:	4b1e      	ldr	r3, [pc, #120]	; (80051b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d10c      	bne.n	800516e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	fbb2 f3f3 	udiv	r3, r2, r3
 800515c:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800515e:	68d2      	ldr	r2, [r2, #12]
 8005160:	0a12      	lsrs	r2, r2, #8
 8005162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	617b      	str	r3, [r7, #20]
    break;
 800516c:	e00c      	b.n	8005188 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005178:	68d2      	ldr	r2, [r2, #12]
 800517a:	0a12      	lsrs	r2, r2, #8
 800517c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
    break;
 8005186:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0e5b      	lsrs	r3, r3, #25
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051a2:	687b      	ldr	r3, [r7, #4]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	016e3600 	.word	0x016e3600
 80051b8:	00f42400 	.word	0x00f42400

080051bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051c4:	2300      	movs	r3, #0
 80051c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c8:	2300      	movs	r3, #0
 80051ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8098 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051da:	2300      	movs	r3, #0
 80051dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	4b40      	ldr	r3, [pc, #256]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005202:	2301      	movs	r3, #1
 8005204:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005206:	4b3a      	ldr	r3, [pc, #232]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a39      	ldr	r2, [pc, #228]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005212:	f7fc fd3f 	bl	8001c94 <HAL_GetTick>
 8005216:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005218:	e009      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521a:	f7fc fd3b 	bl	8001c94 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d902      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	74fb      	strb	r3, [r7, #19]
        break;
 800522c:	e005      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800522e:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0ef      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d159      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01e      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d019      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005268:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529a:	f7fc fcfb 	bl	8001c94 <HAL_GetTick>
 800529e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a0:	e00b      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc fcf7 	bl	8001c94 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d902      	bls.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	74fb      	strb	r3, [r7, #19]
            break;
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ec      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052e4:	e008      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	74bb      	strb	r3, [r7, #18]
 80052ea:	e005      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f8:	7c7b      	ldrb	r3, [r7, #17]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d105      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fe:	4ba7      	ldr	r3, [pc, #668]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	4aa6      	ldr	r2, [pc, #664]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005308:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005316:	4ba1      	ldr	r3, [pc, #644]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 0203 	bic.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	499d      	ldr	r1, [pc, #628]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005338:	4b98      	ldr	r3, [pc, #608]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f023 020c 	bic.w	r2, r3, #12
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4995      	ldr	r1, [pc, #596]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800535a:	4b90      	ldr	r3, [pc, #576]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	498c      	ldr	r1, [pc, #560]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800537c:	4b87      	ldr	r3, [pc, #540]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	4984      	ldr	r1, [pc, #528]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800539e:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	497b      	ldr	r1, [pc, #492]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053c0:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	4973      	ldr	r1, [pc, #460]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e2:	4b6e      	ldr	r3, [pc, #440]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	496a      	ldr	r1, [pc, #424]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005404:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	4962      	ldr	r1, [pc, #392]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005426:	4b5d      	ldr	r3, [pc, #372]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4959      	ldr	r1, [pc, #356]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005448:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	4951      	ldr	r1, [pc, #324]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546a:	4b4c      	ldr	r3, [pc, #304]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4948      	ldr	r1, [pc, #288]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d015      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4940      	ldr	r1, [pc, #256]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054aa:	d105      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ac:	4b3b      	ldr	r3, [pc, #236]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a3a      	ldr	r2, [pc, #232]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054c4:	4b35      	ldr	r3, [pc, #212]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	4932      	ldr	r1, [pc, #200]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e2:	d105      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e4:	4b2d      	ldr	r3, [pc, #180]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d015      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054fc:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	4924      	ldr	r1, [pc, #144]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005526:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	4916      	ldr	r1, [pc, #88]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005552:	d105      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005554:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a10      	ldr	r2, [pc, #64]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4908      	ldr	r1, [pc, #32]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558a:	d109      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a02      	ldr	r2, [pc, #8]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	60d3      	str	r3, [r2, #12]
 8005598:	e002      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d015      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055ac:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	4926      	ldr	r1, [pc, #152]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	4918      	ldr	r1, [pc, #96]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800561c:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005646:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005648:	7cbb      	ldrb	r3, [r7, #18]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000

08005658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e049      	b.n	80056fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc f9a6 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 fdc4 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e054      	b.n	80057ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d01d      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1f      	ldr	r2, [pc, #124]	; (80057e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_TIM_Base_Start_IT+0xe4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x80>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d115      	bne.n	80057b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b06      	cmp	r3, #6
 8005798:	d015      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xbe>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d011      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	e008      	b.n	80057c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e000      	b.n	80057c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40015000 	.word	0x40015000
 80057f4:	00010007 	.word	0x00010007

080057f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f841 	bl	80058a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 fcf4 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_TIM_PWM_Start+0x24>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e03c      	b.n	800595a <HAL_TIM_PWM_Start+0x9e>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d109      	bne.n	80058fa <HAL_TIM_PWM_Start+0x3e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	bf14      	ite	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	2300      	moveq	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	e02f      	b.n	800595a <HAL_TIM_PWM_Start+0x9e>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d109      	bne.n	8005914 <HAL_TIM_PWM_Start+0x58>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e022      	b.n	800595a <HAL_TIM_PWM_Start+0x9e>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b0c      	cmp	r3, #12
 8005918:	d109      	bne.n	800592e <HAL_TIM_PWM_Start+0x72>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	e015      	b.n	800595a <HAL_TIM_PWM_Start+0x9e>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b10      	cmp	r3, #16
 8005932:	d109      	bne.n	8005948 <HAL_TIM_PWM_Start+0x8c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e008      	b.n	800595a <HAL_TIM_PWM_Start+0x9e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0a6      	b.n	8005ab0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <HAL_TIM_PWM_Start+0xb6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005970:	e023      	b.n	80059ba <HAL_TIM_PWM_Start+0xfe>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Start+0xc6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005980:	e01b      	b.n	80059ba <HAL_TIM_PWM_Start+0xfe>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Start+0xd6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	e013      	b.n	80059ba <HAL_TIM_PWM_Start+0xfe>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b0c      	cmp	r3, #12
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Start+0xe6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059a0:	e00b      	b.n	80059ba <HAL_TIM_PWM_Start+0xfe>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xf6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059b0:	e003      	b.n	80059ba <HAL_TIM_PWM_Start+0xfe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 f8a8 	bl	8006b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a3a      	ldr	r2, [pc, #232]	; (8005ab8 <HAL_TIM_PWM_Start+0x1fc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d018      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x148>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a39      	ldr	r2, [pc, #228]	; (8005abc <HAL_TIM_PWM_Start+0x200>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x148>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a37      	ldr	r2, [pc, #220]	; (8005ac0 <HAL_TIM_PWM_Start+0x204>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x148>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a36      	ldr	r2, [pc, #216]	; (8005ac4 <HAL_TIM_PWM_Start+0x208>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x148>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_TIM_PWM_Start+0x20c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x148>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a33      	ldr	r2, [pc, #204]	; (8005acc <HAL_TIM_PWM_Start+0x210>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x14c>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_PWM_Start+0x14e>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <HAL_TIM_PWM_Start+0x214>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_TIM_PWM_Start+0x218>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <HAL_TIM_PWM_Start+0x21c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a19      	ldr	r2, [pc, #100]	; (8005abc <HAL_TIM_PWM_Start+0x200>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <HAL_TIM_PWM_Start+0x204>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x1b2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIM_PWM_Start+0x210>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d115      	bne.n	8005a9a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_TIM_PWM_Start+0x220>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d015      	beq.n	8005aac <HAL_TIM_PWM_Start+0x1f0>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a86:	d011      	beq.n	8005aac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a98:	e008      	b.n	8005aac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e000      	b.n	8005aae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40013400 	.word	0x40013400
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800
 8005acc:	40015000 	.word	0x40015000
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	00010007 	.word	0x00010007

08005ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d020      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0202 	mvn.w	r2, #2
 8005b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0303 	and.w	r3, r3, #3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fb5c 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb4e 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fb5f 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0204 	mvn.w	r2, #4
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb36 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fb28 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb39 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d020      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0208 	mvn.w	r2, #8
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fb10 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb02 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fb13 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d020      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0210 	mvn.w	r2, #16
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 faea 	bl	80061e8 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fadc 	bl	80061d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 faed 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0201 	mvn.w	r2, #1
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fb fd12 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f8a9 	bl	8006dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f8a1 	bl	8006de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 faa7 	bl	8006210 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00c      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0220 	mvn.w	r2, #32
 8005cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f869 	bl	8006db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00c      	beq.n	8005d0a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f875 	bl	8006df4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 f86d 	bl	8006e08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00c      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 f865 	bl	8006e1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00c      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f85d 	bl	8006e30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e0ff      	b.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b14      	cmp	r3, #20
 8005daa:	f200 80f0 	bhi.w	8005f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005f8f 	.word	0x08005f8f
 8005dbc:	08005f8f 	.word	0x08005f8f
 8005dc0:	08005f8f 	.word	0x08005f8f
 8005dc4:	08005e49 	.word	0x08005e49
 8005dc8:	08005f8f 	.word	0x08005f8f
 8005dcc:	08005f8f 	.word	0x08005f8f
 8005dd0:	08005f8f 	.word	0x08005f8f
 8005dd4:	08005e8b 	.word	0x08005e8b
 8005dd8:	08005f8f 	.word	0x08005f8f
 8005ddc:	08005f8f 	.word	0x08005f8f
 8005de0:	08005f8f 	.word	0x08005f8f
 8005de4:	08005ecb 	.word	0x08005ecb
 8005de8:	08005f8f 	.word	0x08005f8f
 8005dec:	08005f8f 	.word	0x08005f8f
 8005df0:	08005f8f 	.word	0x08005f8f
 8005df4:	08005f0d 	.word	0x08005f0d
 8005df8:	08005f8f 	.word	0x08005f8f
 8005dfc:	08005f8f 	.word	0x08005f8f
 8005e00:	08005f8f 	.word	0x08005f8f
 8005e04:	08005f4d 	.word	0x08005f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fabc 	bl	800638c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0208 	orr.w	r2, r2, #8
 8005e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
      break;
 8005e46:	e0a5      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fb36 	bl	80064c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
      break;
 8005e88:	e084      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fba9 	bl	80065e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0204 	bic.w	r2, r2, #4
 8005eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69d9      	ldr	r1, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	61da      	str	r2, [r3, #28]
      break;
 8005ec8:	e064      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fc1b 	bl	800670c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	021a      	lsls	r2, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	61da      	str	r2, [r3, #28]
      break;
 8005f0a:	e043      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fc8e 	bl	8006834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f4a:	e023      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fcd8 	bl	8006908 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f8c:	e002      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e0f6      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x20a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a6f      	ldr	r2, [pc, #444]	; (80061bc <HAL_TIM_ConfigClockSource+0x214>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	f000 80c1 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006004:	4a6d      	ldr	r2, [pc, #436]	; (80061bc <HAL_TIM_ConfigClockSource+0x214>)
 8006006:	4293      	cmp	r3, r2
 8006008:	f200 80c6 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800600c:	4a6c      	ldr	r2, [pc, #432]	; (80061c0 <HAL_TIM_ConfigClockSource+0x218>)
 800600e:	4293      	cmp	r3, r2
 8006010:	f000 80b9 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006014:	4a6a      	ldr	r2, [pc, #424]	; (80061c0 <HAL_TIM_ConfigClockSource+0x218>)
 8006016:	4293      	cmp	r3, r2
 8006018:	f200 80be 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800601c:	4a69      	ldr	r2, [pc, #420]	; (80061c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	f000 80b1 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006024:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <HAL_TIM_ConfigClockSource+0x21c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	f200 80b6 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800602c:	4a66      	ldr	r2, [pc, #408]	; (80061c8 <HAL_TIM_ConfigClockSource+0x220>)
 800602e:	4293      	cmp	r3, r2
 8006030:	f000 80a9 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006034:	4a64      	ldr	r2, [pc, #400]	; (80061c8 <HAL_TIM_ConfigClockSource+0x220>)
 8006036:	4293      	cmp	r3, r2
 8006038:	f200 80ae 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800603c:	4a63      	ldr	r2, [pc, #396]	; (80061cc <HAL_TIM_ConfigClockSource+0x224>)
 800603e:	4293      	cmp	r3, r2
 8006040:	f000 80a1 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006044:	4a61      	ldr	r2, [pc, #388]	; (80061cc <HAL_TIM_ConfigClockSource+0x224>)
 8006046:	4293      	cmp	r3, r2
 8006048:	f200 80a6 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800604c:	4a60      	ldr	r2, [pc, #384]	; (80061d0 <HAL_TIM_ConfigClockSource+0x228>)
 800604e:	4293      	cmp	r3, r2
 8006050:	f000 8099 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006054:	4a5e      	ldr	r2, [pc, #376]	; (80061d0 <HAL_TIM_ConfigClockSource+0x228>)
 8006056:	4293      	cmp	r3, r2
 8006058:	f200 809e 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800605c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006060:	f000 8091 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006064:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006068:	f200 8096 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800606c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006070:	f000 8089 	beq.w	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 8006074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006078:	f200 808e 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006080:	d03e      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	f200 8087 	bhi.w	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	f000 8086 	beq.w	800619e <HAL_TIM_ConfigClockSource+0x1f6>
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d87f      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 8006098:	2b70      	cmp	r3, #112	; 0x70
 800609a:	d01a      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x12a>
 800609c:	2b70      	cmp	r3, #112	; 0x70
 800609e:	d87b      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060a0:	2b60      	cmp	r3, #96	; 0x60
 80060a2:	d050      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x19e>
 80060a4:	2b60      	cmp	r3, #96	; 0x60
 80060a6:	d877      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060a8:	2b50      	cmp	r3, #80	; 0x50
 80060aa:	d03c      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0x17e>
 80060ac:	2b50      	cmp	r3, #80	; 0x50
 80060ae:	d873      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d058      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0x1be>
 80060b4:	2b40      	cmp	r3, #64	; 0x40
 80060b6:	d86f      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060b8:	2b30      	cmp	r3, #48	; 0x30
 80060ba:	d064      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d86b      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d060      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d867      	bhi.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d05a      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x1de>
 80060d0:	e062      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060e2:	f000 fcf9 	bl	8006ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	609a      	str	r2, [r3, #8]
      break;
 80060fe:	e04f      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006110:	f000 fce2 	bl	8006ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e03c      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006132:	461a      	mov	r2, r3
 8006134:	f000 fc54 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2150      	movs	r1, #80	; 0x50
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fcad 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006144:	e02c      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006152:	461a      	mov	r2, r3
 8006154:	f000 fc73 	bl	8006a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2160      	movs	r1, #96	; 0x60
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fc9d 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006164:	e01c      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006172:	461a      	mov	r2, r3
 8006174:	f000 fc34 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2140      	movs	r1, #64	; 0x40
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fc8d 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006184:	e00c      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 fc84 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 8006196:	e003      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e000      	b.n	80061a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800619e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	00100070 	.word	0x00100070
 80061c0:	00100060 	.word	0x00100060
 80061c4:	00100050 	.word	0x00100050
 80061c8:	00100040 	.word	0x00100040
 80061cc:	00100030 	.word	0x00100030
 80061d0:	00100020 	.word	0x00100020

080061d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a4c      	ldr	r2, [pc, #304]	; (8006368 <TIM_Base_SetConfig+0x144>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d017      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d013      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a49      	ldr	r2, [pc, #292]	; (800636c <TIM_Base_SetConfig+0x148>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00f      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a48      	ldr	r2, [pc, #288]	; (8006370 <TIM_Base_SetConfig+0x14c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00b      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a47      	ldr	r2, [pc, #284]	; (8006374 <TIM_Base_SetConfig+0x150>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a46      	ldr	r2, [pc, #280]	; (8006378 <TIM_Base_SetConfig+0x154>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_Base_SetConfig+0x48>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a45      	ldr	r2, [pc, #276]	; (800637c <TIM_Base_SetConfig+0x158>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d108      	bne.n	800627e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a39      	ldr	r2, [pc, #228]	; (8006368 <TIM_Base_SetConfig+0x144>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a36      	ldr	r2, [pc, #216]	; (800636c <TIM_Base_SetConfig+0x148>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a35      	ldr	r2, [pc, #212]	; (8006370 <TIM_Base_SetConfig+0x14c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a34      	ldr	r2, [pc, #208]	; (8006374 <TIM_Base_SetConfig+0x150>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a33      	ldr	r2, [pc, #204]	; (8006378 <TIM_Base_SetConfig+0x154>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a33      	ldr	r2, [pc, #204]	; (8006380 <TIM_Base_SetConfig+0x15c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a32      	ldr	r2, [pc, #200]	; (8006384 <TIM_Base_SetConfig+0x160>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a31      	ldr	r2, [pc, #196]	; (8006388 <TIM_Base_SetConfig+0x164>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2c      	ldr	r2, [pc, #176]	; (800637c <TIM_Base_SetConfig+0x158>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <TIM_Base_SetConfig+0x144>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <TIM_Base_SetConfig+0x110>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1a      	ldr	r2, [pc, #104]	; (8006378 <TIM_Base_SetConfig+0x154>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00f      	beq.n	8006334 <TIM_Base_SetConfig+0x110>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <TIM_Base_SetConfig+0x15c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00b      	beq.n	8006334 <TIM_Base_SetConfig+0x110>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a19      	ldr	r2, [pc, #100]	; (8006384 <TIM_Base_SetConfig+0x160>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <TIM_Base_SetConfig+0x110>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <TIM_Base_SetConfig+0x164>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0x110>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <TIM_Base_SetConfig+0x158>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]
  }
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40013400 	.word	0x40013400
 800637c:	40015000 	.word	0x40015000
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0201 	bic.w	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0302 	bic.w	r3, r3, #2
 80063d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a30      	ldr	r2, [pc, #192]	; (80064a8 <TIM_OC1_SetConfig+0x11c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_OC1_SetConfig+0x88>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a2f      	ldr	r2, [pc, #188]	; (80064ac <TIM_OC1_SetConfig+0x120>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00f      	beq.n	8006414 <TIM_OC1_SetConfig+0x88>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a2e      	ldr	r2, [pc, #184]	; (80064b0 <TIM_OC1_SetConfig+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_OC1_SetConfig+0x88>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <TIM_OC1_SetConfig+0x128>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_OC1_SetConfig+0x88>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <TIM_OC1_SetConfig+0x12c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC1_SetConfig+0x88>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <TIM_OC1_SetConfig+0x130>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d10c      	bne.n	800642e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0308 	bic.w	r3, r3, #8
 800641a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <TIM_OC1_SetConfig+0x11c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <TIM_OC1_SetConfig+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <TIM_OC1_SetConfig+0x120>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <TIM_OC1_SetConfig+0xd2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1b      	ldr	r2, [pc, #108]	; (80064b0 <TIM_OC1_SetConfig+0x124>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_OC1_SetConfig+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <TIM_OC1_SetConfig+0x128>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_OC1_SetConfig+0xd2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <TIM_OC1_SetConfig+0x12c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC1_SetConfig+0xd2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <TIM_OC1_SetConfig+0x130>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40013400 	.word	0x40013400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	40015000 	.word	0x40015000

080064c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f023 0210 	bic.w	r2, r3, #16
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0320 	bic.w	r3, r3, #32
 800650e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a2c      	ldr	r2, [pc, #176]	; (80065d0 <TIM_OC2_SetConfig+0x110>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_OC2_SetConfig+0x74>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a2b      	ldr	r2, [pc, #172]	; (80065d4 <TIM_OC2_SetConfig+0x114>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0x74>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <TIM_OC2_SetConfig+0x118>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10d      	bne.n	8006550 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <TIM_OC2_SetConfig+0x110>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <TIM_OC2_SetConfig+0xc0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <TIM_OC2_SetConfig+0x114>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00f      	beq.n	8006580 <TIM_OC2_SetConfig+0xc0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1e      	ldr	r2, [pc, #120]	; (80065dc <TIM_OC2_SetConfig+0x11c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00b      	beq.n	8006580 <TIM_OC2_SetConfig+0xc0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <TIM_OC2_SetConfig+0x120>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <TIM_OC2_SetConfig+0xc0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <TIM_OC2_SetConfig+0x124>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_OC2_SetConfig+0xc0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <TIM_OC2_SetConfig+0x118>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d113      	bne.n	80065a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800658e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40013400 	.word	0x40013400
 80065d8:	40015000 	.word	0x40015000
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <TIM_OC3_SetConfig+0x10c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <TIM_OC3_SetConfig+0x72>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2a      	ldr	r2, [pc, #168]	; (80066f8 <TIM_OC3_SetConfig+0x110>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0x72>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <TIM_OC3_SetConfig+0x114>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <TIM_OC3_SetConfig+0x10c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <TIM_OC3_SetConfig+0xbe>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <TIM_OC3_SetConfig+0x110>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00f      	beq.n	80066a6 <TIM_OC3_SetConfig+0xbe>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <TIM_OC3_SetConfig+0x118>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00b      	beq.n	80066a6 <TIM_OC3_SetConfig+0xbe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <TIM_OC3_SetConfig+0x11c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <TIM_OC3_SetConfig+0xbe>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1b      	ldr	r2, [pc, #108]	; (8006708 <TIM_OC3_SetConfig+0x120>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_OC3_SetConfig+0xbe>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <TIM_OC3_SetConfig+0x114>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d113      	bne.n	80066ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400
 80066fc:	40015000 	.word	0x40015000
 8006700:	40014000 	.word	0x40014000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800

0800670c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800673a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <TIM_OC4_SetConfig+0x110>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d007      	beq.n	8006780 <TIM_OC4_SetConfig+0x74>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <TIM_OC4_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC4_SetConfig+0x74>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <TIM_OC4_SetConfig+0x118>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10d      	bne.n	800679c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1f      	ldr	r2, [pc, #124]	; (800681c <TIM_OC4_SetConfig+0x110>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <TIM_OC4_SetConfig+0xc0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <TIM_OC4_SetConfig+0x114>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_OC4_SetConfig+0xc0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <TIM_OC4_SetConfig+0x11c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC4_SetConfig+0xc0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1d      	ldr	r2, [pc, #116]	; (800682c <TIM_OC4_SetConfig+0x120>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC4_SetConfig+0xc0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <TIM_OC4_SetConfig+0x124>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC4_SetConfig+0xc0>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a17      	ldr	r2, [pc, #92]	; (8006824 <TIM_OC4_SetConfig+0x118>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d113      	bne.n	80067f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	019b      	lsls	r3, r3, #6
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40013400 	.word	0x40013400
 8006824:	40015000 	.word	0x40015000
 8006828:	40014000 	.word	0x40014000
 800682c:	40014400 	.word	0x40014400
 8006830:	40014800 	.word	0x40014800

08006834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <TIM_OC5_SetConfig+0xbc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <TIM_OC5_SetConfig+0x82>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <TIM_OC5_SetConfig+0xc0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00f      	beq.n	80068b6 <TIM_OC5_SetConfig+0x82>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <TIM_OC5_SetConfig+0xc4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00b      	beq.n	80068b6 <TIM_OC5_SetConfig+0x82>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a16      	ldr	r2, [pc, #88]	; (80068fc <TIM_OC5_SetConfig+0xc8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <TIM_OC5_SetConfig+0x82>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <TIM_OC5_SetConfig+0xcc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC5_SetConfig+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <TIM_OC5_SetConfig+0xd0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d109      	bne.n	80068ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800
 8006904:	40015000 	.word	0x40015000

08006908 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800694e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	051b      	lsls	r3, r3, #20
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a1a      	ldr	r2, [pc, #104]	; (80069c8 <TIM_OC6_SetConfig+0xc0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d013      	beq.n	800698c <TIM_OC6_SetConfig+0x84>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a19      	ldr	r2, [pc, #100]	; (80069cc <TIM_OC6_SetConfig+0xc4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00f      	beq.n	800698c <TIM_OC6_SetConfig+0x84>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <TIM_OC6_SetConfig+0xc8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00b      	beq.n	800698c <TIM_OC6_SetConfig+0x84>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <TIM_OC6_SetConfig+0xcc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_OC6_SetConfig+0x84>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <TIM_OC6_SetConfig+0xd0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC6_SetConfig+0x84>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <TIM_OC6_SetConfig+0xd4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d109      	bne.n	80069a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800
 80069dc:	40015000 	.word	0x40015000

080069e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 030a 	bic.w	r3, r3, #10
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f023 0210 	bic.w	r2, r3, #16
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f043 0307 	orr.w	r3, r3, #7
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	609a      	str	r2, [r3, #8]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	021a      	lsls	r2, r3, #8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	609a      	str	r2, [r3, #8]
}
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a1a      	ldr	r2, [r3, #32]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e074      	b.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a34      	ldr	r2, [pc, #208]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a33      	ldr	r2, [pc, #204]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a31      	ldr	r2, [pc, #196]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a21      	ldr	r2, [pc, #132]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d01d      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10c      	bne.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40012c00 	.word	0x40012c00
 8006c78:	40013400 	.word	0x40013400
 8006c7c:	40015000 	.word	0x40015000
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40000c00 	.word	0x40000c00
 8006c8c:	40014000 	.word	0x40014000

08006c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e078      	b.n	8006d9e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d11c      	bne.n	8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	051b      	lsls	r3, r3, #20
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40015000 	.word	0x40015000

08006db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e042      	b.n	8006edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fa fd59 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2224      	movs	r2, #36	; 0x24
 8006e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb24 	bl	80074dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f825 	bl	8006ee4 <UART_SetConfig>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e01b      	b.n	8006edc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fba3 	bl	8007620 <UART_CheckIdleState>
 8006eda:	4603      	mov	r3, r0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee8:	b08c      	sub	sp, #48	; 0x30
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4baa      	ldr	r3, [pc, #680]	; (80071bc <UART_SetConfig+0x2d8>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a9f      	ldr	r2, [pc, #636]	; (80071c0 <UART_SetConfig+0x2dc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006f5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f64:	430b      	orrs	r3, r1
 8006f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	f023 010f 	bic.w	r1, r3, #15
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a90      	ldr	r2, [pc, #576]	; (80071c4 <UART_SetConfig+0x2e0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d125      	bne.n	8006fd4 <UART_SetConfig+0xf0>
 8006f88:	4b8f      	ldr	r3, [pc, #572]	; (80071c8 <UART_SetConfig+0x2e4>)
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d81a      	bhi.n	8006fcc <UART_SetConfig+0xe8>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0xb8>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	e116      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fba:	e112      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	e10e      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e10a      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e106      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a7c      	ldr	r2, [pc, #496]	; (80071cc <UART_SetConfig+0x2e8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d138      	bne.n	8007050 <UART_SetConfig+0x16c>
 8006fde:	4b7a      	ldr	r3, [pc, #488]	; (80071c8 <UART_SetConfig+0x2e4>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b0c      	cmp	r3, #12
 8006fea:	d82d      	bhi.n	8007048 <UART_SetConfig+0x164>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0x110>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007029 	.word	0x08007029
 8006ff8:	08007049 	.word	0x08007049
 8006ffc:	08007049 	.word	0x08007049
 8007000:	08007049 	.word	0x08007049
 8007004:	08007039 	.word	0x08007039
 8007008:	08007049 	.word	0x08007049
 800700c:	08007049 	.word	0x08007049
 8007010:	08007049 	.word	0x08007049
 8007014:	08007031 	.word	0x08007031
 8007018:	08007049 	.word	0x08007049
 800701c:	08007049 	.word	0x08007049
 8007020:	08007049 	.word	0x08007049
 8007024:	08007041 	.word	0x08007041
 8007028:	2300      	movs	r3, #0
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702e:	e0d8      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007030:	2302      	movs	r3, #2
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007036:	e0d4      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800703e:	e0d0      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007046:	e0cc      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704e:	e0c8      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a5e      	ldr	r2, [pc, #376]	; (80071d0 <UART_SetConfig+0x2ec>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d125      	bne.n	80070a6 <UART_SetConfig+0x1c2>
 800705a:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <UART_SetConfig+0x2e4>)
 800705c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007060:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d016      	beq.n	8007096 <UART_SetConfig+0x1b2>
 8007068:	2b30      	cmp	r3, #48	; 0x30
 800706a:	d818      	bhi.n	800709e <UART_SetConfig+0x1ba>
 800706c:	2b20      	cmp	r3, #32
 800706e:	d00a      	beq.n	8007086 <UART_SetConfig+0x1a2>
 8007070:	2b20      	cmp	r3, #32
 8007072:	d814      	bhi.n	800709e <UART_SetConfig+0x1ba>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <UART_SetConfig+0x19a>
 8007078:	2b10      	cmp	r3, #16
 800707a:	d008      	beq.n	800708e <UART_SetConfig+0x1aa>
 800707c:	e00f      	b.n	800709e <UART_SetConfig+0x1ba>
 800707e:	2300      	movs	r3, #0
 8007080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007084:	e0ad      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007086:	2302      	movs	r3, #2
 8007088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708c:	e0a9      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800708e:	2304      	movs	r3, #4
 8007090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007094:	e0a5      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007096:	2308      	movs	r3, #8
 8007098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709c:	e0a1      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800709e:	2310      	movs	r3, #16
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a4:	e09d      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a4a      	ldr	r2, [pc, #296]	; (80071d4 <UART_SetConfig+0x2f0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d125      	bne.n	80070fc <UART_SetConfig+0x218>
 80070b0:	4b45      	ldr	r3, [pc, #276]	; (80071c8 <UART_SetConfig+0x2e4>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070ba:	2bc0      	cmp	r3, #192	; 0xc0
 80070bc:	d016      	beq.n	80070ec <UART_SetConfig+0x208>
 80070be:	2bc0      	cmp	r3, #192	; 0xc0
 80070c0:	d818      	bhi.n	80070f4 <UART_SetConfig+0x210>
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d00a      	beq.n	80070dc <UART_SetConfig+0x1f8>
 80070c6:	2b80      	cmp	r3, #128	; 0x80
 80070c8:	d814      	bhi.n	80070f4 <UART_SetConfig+0x210>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <UART_SetConfig+0x1f0>
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d008      	beq.n	80070e4 <UART_SetConfig+0x200>
 80070d2:	e00f      	b.n	80070f4 <UART_SetConfig+0x210>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e082      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070dc:	2302      	movs	r3, #2
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e07e      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ea:	e07a      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f2:	e076      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fa:	e072      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a35      	ldr	r2, [pc, #212]	; (80071d8 <UART_SetConfig+0x2f4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d12a      	bne.n	800715c <UART_SetConfig+0x278>
 8007106:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <UART_SetConfig+0x2e4>)
 8007108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007114:	d01a      	beq.n	800714c <UART_SetConfig+0x268>
 8007116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711a:	d81b      	bhi.n	8007154 <UART_SetConfig+0x270>
 800711c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007120:	d00c      	beq.n	800713c <UART_SetConfig+0x258>
 8007122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007126:	d815      	bhi.n	8007154 <UART_SetConfig+0x270>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <UART_SetConfig+0x250>
 800712c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007130:	d008      	beq.n	8007144 <UART_SetConfig+0x260>
 8007132:	e00f      	b.n	8007154 <UART_SetConfig+0x270>
 8007134:	2300      	movs	r3, #0
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e052      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800713c:	2302      	movs	r3, #2
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e04e      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007144:	2304      	movs	r3, #4
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714a:	e04a      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800714c:	2308      	movs	r3, #8
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007152:	e046      	b.n	80071e2 <UART_SetConfig+0x2fe>
 8007154:	2310      	movs	r3, #16
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715a:	e042      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <UART_SetConfig+0x2dc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d13a      	bne.n	80071dc <UART_SetConfig+0x2f8>
 8007166:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <UART_SetConfig+0x2e4>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007174:	d01a      	beq.n	80071ac <UART_SetConfig+0x2c8>
 8007176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800717a:	d81b      	bhi.n	80071b4 <UART_SetConfig+0x2d0>
 800717c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007180:	d00c      	beq.n	800719c <UART_SetConfig+0x2b8>
 8007182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007186:	d815      	bhi.n	80071b4 <UART_SetConfig+0x2d0>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <UART_SetConfig+0x2b0>
 800718c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007190:	d008      	beq.n	80071a4 <UART_SetConfig+0x2c0>
 8007192:	e00f      	b.n	80071b4 <UART_SetConfig+0x2d0>
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719a:	e022      	b.n	80071e2 <UART_SetConfig+0x2fe>
 800719c:	2302      	movs	r3, #2
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a2:	e01e      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80071a4:	2304      	movs	r3, #4
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071aa:	e01a      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80071ac:	2308      	movs	r3, #8
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e016      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80071b4:	2310      	movs	r3, #16
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ba:	e012      	b.n	80071e2 <UART_SetConfig+0x2fe>
 80071bc:	cfff69f3 	.word	0xcfff69f3
 80071c0:	40008000 	.word	0x40008000
 80071c4:	40013800 	.word	0x40013800
 80071c8:	40021000 	.word	0x40021000
 80071cc:	40004400 	.word	0x40004400
 80071d0:	40004800 	.word	0x40004800
 80071d4:	40004c00 	.word	0x40004c00
 80071d8:	40005000 	.word	0x40005000
 80071dc:	2310      	movs	r3, #16
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4aae      	ldr	r2, [pc, #696]	; (80074a0 <UART_SetConfig+0x5bc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f040 8097 	bne.w	800731c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d823      	bhi.n	800723e <UART_SetConfig+0x35a>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <UART_SetConfig+0x318>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007221 	.word	0x08007221
 8007200:	0800723f 	.word	0x0800723f
 8007204:	08007229 	.word	0x08007229
 8007208:	0800723f 	.word	0x0800723f
 800720c:	0800722f 	.word	0x0800722f
 8007210:	0800723f 	.word	0x0800723f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	0800723f 	.word	0x0800723f
 800721c:	08007237 	.word	0x08007237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007220:	f7fd ff5a 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8007224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007226:	e010      	b.n	800724a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007228:	4b9e      	ldr	r3, [pc, #632]	; (80074a4 <UART_SetConfig+0x5c0>)
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800722c:	e00d      	b.n	800724a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800722e:	f7fd fee5 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007234:	e009      	b.n	800724a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800723c:	e005      	b.n	800724a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8130 	beq.w	80074b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	4a94      	ldr	r2, [pc, #592]	; (80074a8 <UART_SetConfig+0x5c4>)
 8007258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800725c:	461a      	mov	r2, r3
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	fbb3 f3f2 	udiv	r3, r3, r2
 8007264:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	4413      	add	r3, r2
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	429a      	cmp	r2, r3
 8007274:	d305      	bcc.n	8007282 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	429a      	cmp	r2, r3
 8007280:	d903      	bls.n	800728a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007288:	e113      	b.n	80074b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	60bb      	str	r3, [r7, #8]
 8007290:	60fa      	str	r2, [r7, #12]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	4a84      	ldr	r2, [pc, #528]	; (80074a8 <UART_SetConfig+0x5c4>)
 8007298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729c:	b29b      	uxth	r3, r3
 800729e:	2200      	movs	r2, #0
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072ac:	f7f9 fbd2 	bl	8000a54 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4610      	mov	r0, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	020b      	lsls	r3, r1, #8
 80072c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072c6:	0202      	lsls	r2, r0, #8
 80072c8:	6979      	ldr	r1, [r7, #20]
 80072ca:	6849      	ldr	r1, [r1, #4]
 80072cc:	0849      	lsrs	r1, r1, #1
 80072ce:	2000      	movs	r0, #0
 80072d0:	460c      	mov	r4, r1
 80072d2:	4605      	mov	r5, r0
 80072d4:	eb12 0804 	adds.w	r8, r2, r4
 80072d8:	eb43 0905 	adc.w	r9, r3, r5
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	469a      	mov	sl, r3
 80072e4:	4693      	mov	fp, r2
 80072e6:	4652      	mov	r2, sl
 80072e8:	465b      	mov	r3, fp
 80072ea:	4640      	mov	r0, r8
 80072ec:	4649      	mov	r1, r9
 80072ee:	f7f9 fbb1 	bl	8000a54 <__aeabi_uldivmod>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4613      	mov	r3, r2
 80072f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007300:	d308      	bcc.n	8007314 <UART_SetConfig+0x430>
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007308:	d204      	bcs.n	8007314 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	e0ce      	b.n	80074b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800731a:	e0ca      	b.n	80074b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007324:	d166      	bne.n	80073f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800732a:	2b08      	cmp	r3, #8
 800732c:	d827      	bhi.n	800737e <UART_SetConfig+0x49a>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <UART_SetConfig+0x450>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007359 	.word	0x08007359
 8007338:	08007361 	.word	0x08007361
 800733c:	08007369 	.word	0x08007369
 8007340:	0800737f 	.word	0x0800737f
 8007344:	0800736f 	.word	0x0800736f
 8007348:	0800737f 	.word	0x0800737f
 800734c:	0800737f 	.word	0x0800737f
 8007350:	0800737f 	.word	0x0800737f
 8007354:	08007377 	.word	0x08007377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007358:	f7fd febe 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 800735c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800735e:	e014      	b.n	800738a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fd fed0 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8007364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007366:	e010      	b.n	800738a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007368:	4b4e      	ldr	r3, [pc, #312]	; (80074a4 <UART_SetConfig+0x5c0>)
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800736c:	e00d      	b.n	800738a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736e:	f7fd fe45 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007374:	e009      	b.n	800738a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800737c:	e005      	b.n	800738a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8090 	beq.w	80074b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	4a44      	ldr	r2, [pc, #272]	; (80074a8 <UART_SetConfig+0x5c4>)
 8007398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800739c:	461a      	mov	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a4:	005a      	lsls	r2, r3, #1
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	441a      	add	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	2b0f      	cmp	r3, #15
 80073bc:	d916      	bls.n	80073ec <UART_SetConfig+0x508>
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c4:	d212      	bcs.n	80073ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f023 030f 	bic.w	r3, r3, #15
 80073ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	b29a      	uxth	r2, r3
 80073dc:	8bfb      	ldrh	r3, [r7, #30]
 80073de:	4313      	orrs	r3, r2
 80073e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	8bfa      	ldrh	r2, [r7, #30]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e062      	b.n	80074b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073f2:	e05e      	b.n	80074b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d828      	bhi.n	800744e <UART_SetConfig+0x56a>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0x520>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fd fe56 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 800742c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fd fe68 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007436:	e010      	b.n	800745a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <UART_SetConfig+0x5c0>)
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800743c:	e00d      	b.n	800745a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fd fddd 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007444:	e009      	b.n	800745a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007458:	bf00      	nop
    }

    if (pclk != 0U)
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d028      	beq.n	80074b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <UART_SetConfig+0x5c4>)
 8007466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800746a:	461a      	mov	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	441a      	add	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d910      	bls.n	80074ac <UART_SetConfig+0x5c8>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007490:	d20c      	bcs.n	80074ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	b29a      	uxth	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60da      	str	r2, [r3, #12]
 800749c:	e009      	b.n	80074b2 <UART_SetConfig+0x5ce>
 800749e:	bf00      	nop
 80074a0:	40008000 	.word	0x40008000
 80074a4:	00f42400 	.word	0x00f42400
 80074a8:	08007c14 	.word	0x08007c14
      }
      else
      {
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80074ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3730      	adds	r7, #48	; 0x30
 80074d6:	46bd      	mov	sp, r7
 80074d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075da:	d10a      	bne.n	80075f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b098      	sub	sp, #96	; 0x60
 8007624:	af02      	add	r7, sp, #8
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007630:	f7fa fb30 	bl	8001c94 <HAL_GetTick>
 8007634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b08      	cmp	r3, #8
 8007642:	d12f      	bne.n	80076a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800764c:	2200      	movs	r2, #0
 800764e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f88e 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d022      	beq.n	80076a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007672:	653b      	str	r3, [r7, #80]	; 0x50
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767c:	647b      	str	r3, [r7, #68]	; 0x44
 800767e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e6      	bne.n	800765e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e063      	b.n	800776c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d149      	bne.n	8007746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ba:	2200      	movs	r2, #0
 80076bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f857 	bl	8007774 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d03c      	beq.n	8007746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	623b      	str	r3, [r7, #32]
   return(result);
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
 80076ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e6      	bne.n	80076cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	60fb      	str	r3, [r7, #12]
   return(result);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	64bb      	str	r3, [r7, #72]	; 0x48
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3308      	adds	r3, #8
 800771c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771e:	61fa      	str	r2, [r7, #28]
 8007720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	69b9      	ldr	r1, [r7, #24]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	617b      	str	r3, [r7, #20]
   return(result);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e5      	bne.n	80076fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e012      	b.n	800776c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3758      	adds	r7, #88	; 0x58
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007784:	e04f      	b.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d04b      	beq.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778e:	f7fa fa81 	bl	8001c94 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	429a      	cmp	r2, r3
 800779c:	d302      	bcc.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e04e      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d037      	beq.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b80      	cmp	r3, #128	; 0x80
 80077ba:	d034      	beq.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d031      	beq.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d110      	bne.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2208      	movs	r2, #8
 80077d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f838 	bl	800784e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2208      	movs	r2, #8
 80077e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e029      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007800:	d111      	bne.n	8007826 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f81e 	bl	800784e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e00f      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69da      	ldr	r2, [r3, #28]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4013      	ands	r3, r2
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	429a      	cmp	r2, r3
 8007834:	bf0c      	ite	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	2300      	movne	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	429a      	cmp	r2, r3
 8007842:	d0a0      	beq.n	8007786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800784e:	b480      	push	{r7}
 8007850:	b095      	sub	sp, #84	; 0x54
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007874:	643b      	str	r3, [r7, #64]	; 0x40
 8007876:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	61fb      	str	r3, [r7, #28]
   return(result);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d118      	bne.n	80078fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f023 0310 	bic.w	r3, r3, #16
 80078dc:	647b      	str	r3, [r7, #68]	; 0x44
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6979      	ldr	r1, [r7, #20]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	613b      	str	r3, [r7, #16]
   return(result);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e6      	bne.n	80078c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800790e:	bf00      	nop
 8007910:	3754      	adds	r7, #84	; 0x54
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_UARTEx_DisableFifoMode+0x16>
 800792c:	2302      	movs	r3, #2
 800792e:	e027      	b.n	8007980 <HAL_UARTEx_DisableFifoMode+0x66>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2224      	movs	r2, #36	; 0x24
 800793c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800795e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e02d      	b.n	8007a00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2224      	movs	r2, #36	; 0x24
 80079b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0201 	bic.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f84f 	bl	8007a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e02d      	b.n	8007a7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2224      	movs	r2, #36	; 0x24
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f811 	bl	8007a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aa4:	e031      	b.n	8007b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aaa:	2308      	movs	r3, #8
 8007aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	0e5b      	lsrs	r3, r3, #25
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0f5b      	lsrs	r3, r3, #29
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	7b3a      	ldrb	r2, [r7, #12]
 8007ad2:	4911      	ldr	r1, [pc, #68]	; (8007b18 <UARTEx_SetNbDataToProcess+0x94>)
 8007ad4:	5c8a      	ldrb	r2, [r1, r2]
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ada:	7b3a      	ldrb	r2, [r7, #12]
 8007adc:	490f      	ldr	r1, [pc, #60]	; (8007b1c <UARTEx_SetNbDataToProcess+0x98>)
 8007ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	7b7a      	ldrb	r2, [r7, #13]
 8007af0:	4909      	ldr	r1, [pc, #36]	; (8007b18 <UARTEx_SetNbDataToProcess+0x94>)
 8007af2:	5c8a      	ldrb	r2, [r1, r2]
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007af8:	7b7a      	ldrb	r2, [r7, #13]
 8007afa:	4908      	ldr	r1, [pc, #32]	; (8007b1c <UARTEx_SetNbDataToProcess+0x98>)
 8007afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	08007c2c 	.word	0x08007c2c
 8007b1c:	08007c34 	.word	0x08007c34

08007b20 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	edd3 7a07 	vldr	s15, [r3, #28]
 8007b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007b50:	eeb1 7a67 	vneg.f32	s14, s15
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	edd3 7a08 	vldr	s15, [r3, #32]
 8007b5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1a      	ldr	r2, [r3, #32]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d006      	beq.n	8007b84 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	220c      	movs	r2, #12
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f804 	bl	8007b8c <memset>
  }

}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <memset>:
 8007b8c:	4402      	add	r2, r0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d100      	bne.n	8007b96 <memset+0xa>
 8007b94:	4770      	bx	lr
 8007b96:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9a:	e7f9      	b.n	8007b90 <memset+0x4>

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f000 f818 	bl	8007be4 <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08007c44 	.word	0x08007c44
 8007bd8:	08007c44 	.word	0x08007c44
 8007bdc:	08007c44 	.word	0x08007c44
 8007be0:	08007c48 	.word	0x08007c48

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
