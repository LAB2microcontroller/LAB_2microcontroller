
LAB_2_microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006620  08006620  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006628  08006628  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000010  08006640  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08006640  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001748e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1c  00000000  00000000  00037511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001041  00000000  00000000  0003b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  0003c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001869d  00000000  00000000  000653f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011403a  00000000  00000000  0007da93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a50  00000000  00000000  00191ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00197520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080065c8 	.word	0x080065c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080065c8 	.word	0x080065c8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd59 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f856 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa60 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa34 	bl	8000990 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f924 	bl	8000774 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f89a 	bl	8000664 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000530:	f000 f96a 	bl	8000808 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000534:	f000 f9de 	bl	80008f4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8000538:	481d      	ldr	r0, [pc, #116]	; (80005b0 <main+0x9c>)
 800053a:	f004 f829 	bl	8004590 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800053e:	2100      	movs	r1, #0
 8000540:	481c      	ldr	r0, [pc, #112]	; (80005b4 <main+0xa0>)
 8000542:	f004 f8ff 	bl	8004744 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000546:	2104      	movs	r1, #4
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <main+0xa0>)
 800054a:	f004 f8fb 	bl	8004744 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054e:	217f      	movs	r1, #127	; 0x7f
 8000550:	4819      	ldr	r0, [pc, #100]	; (80005b8 <main+0xa4>)
 8000552:	f002 f8dd 	bl	8002710 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000556:	220a      	movs	r2, #10
 8000558:	4918      	ldr	r1, [pc, #96]	; (80005bc <main+0xa8>)
 800055a:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xa4>)
 800055c:	f001 f9ca 	bl	80018f4 <HAL_ADC_Start_DMA>

  PID.Kp = 0.001;
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0xac>)
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <main+0xb0>)
 8000564:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0xac>)
 8000568:	f04f 0200 	mov.w	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xac>)
 8000570:	f04f 0200 	mov.w	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0xac>)
 800057a:	f005 ffc3 	bl	8006504 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  arm_pid_init_f32(&PID, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0xac>)
 8000582:	f005 ffbf 	bl	8006504 <arm_pid_init_f32>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2110      	movs	r1, #16
 800058a:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0xb4>)
 800058c:	f002 ff2e 	bl	80033ec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <main+0xb4>)
 8000596:	f002 ff29 	bl	80033ec <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2000);
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <main+0xa0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
	  Average_ADC_Value();
 80005a4:	f000 faf0 	bl	8000b88 <Average_ADC_Value>
//	 	  	  {
//	 	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
//	 	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
//	 	  		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -Vfeedback);
//	 	  	  }
	  led2();
 80005a8:	f000 fac4 	bl	8000b34 <led2>
	  arm_pid_init_f32(&PID, 0);
 80005ac:	e7e7      	b.n	800057e <main+0x6a>
 80005ae:	bf00      	nop
 80005b0:	200001d8 	.word	0x200001d8
 80005b4:	2000018c 	.word	0x2000018c
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	20000224 	.word	0x20000224
 80005c0:	20000240 	.word	0x20000240
 80005c4:	3a83126f 	.word	0x3a83126f
 80005c8:	48000400 	.word	0x48000400

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2238      	movs	r2, #56	; 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 ffc8 	bl	8006570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f002 ff46 	bl	8003480 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	2340      	movs	r3, #64	; 0x40
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800060e:	2355      	movs	r3, #85	; 0x55
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	4618      	mov	r0, r3
 8000624:	f002 ffe0 	bl	80035e8 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800062e:	f000 faeb 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2303      	movs	r3, #3
 8000638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fade 	bl	8003c0c <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000656:	f000 fad7 	bl	8000c08 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2220      	movs	r2, #32
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 ff77 	bl	8006570 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <MX_ADC1_Init+0x104>)
 8000684:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000688:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <MX_ADC1_Init+0x104>)
 800068c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <MX_ADC1_Init+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <MX_ADC1_Init+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_ADC1_Init+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_ADC1_Init+0x104>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <MX_ADC1_Init+0x104>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <MX_ADC1_Init+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <MX_ADC1_Init+0x104>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_ADC1_Init+0x104>)
 80006be:	2202      	movs	r2, #2
 80006c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <MX_ADC1_Init+0x104>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_ADC1_Init+0x104>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_ADC1_Init+0x104>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <MX_ADC1_Init+0x104>)
 80006d8:	2201      	movs	r2, #1
 80006da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_ADC1_Init+0x104>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_ADC1_Init+0x104>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ec:	481e      	ldr	r0, [pc, #120]	; (8000768 <MX_ADC1_Init+0x104>)
 80006ee:	f000 ff45 	bl	800157c <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006f8:	f000 fa86 	bl	8000c08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000704:	4619      	mov	r1, r3
 8000706:	4818      	ldr	r0, [pc, #96]	; (8000768 <MX_ADC1_Init+0x104>)
 8000708:	f002 f864 	bl	80027d4 <HAL_ADCEx_MultiModeConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000712:	f000 fa79 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_ADC1_Init+0x108>)
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071a:	2306      	movs	r3, #6
 800071c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800071e:	2307      	movs	r3, #7
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000722:	237f      	movs	r3, #127	; 0x7f
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000726:	2304      	movs	r3, #4
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_ADC1_Init+0x104>)
 8000734:	f001 f9d0 	bl	8001ad8 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800073e:	f000 fa63 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_ADC1_Init+0x10c>)
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000746:	230c      	movs	r3, #12
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC1_Init+0x104>)
 8000750:	f001 f9c2 	bl	8001ad8 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800075a:	f000 fa55 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000002c 	.word	0x2000002c
 800076c:	04300002 	.word	0x04300002
 8000770:	08600004 	.word	0x08600004

08000774 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <MX_LPUART1_UART_Init+0x90>)
 800077c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f005 f836 	bl	8005828 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 fa21 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	f005 fdd1 	bl	8006370 <HAL_UARTEx_SetTxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007d4:	f000 fa18 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	f005 fe06 	bl	80063ec <HAL_UARTEx_SetRxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007e6:	f000 fa0f 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	f005 fd87 	bl	80062fe <HAL_UARTEx_DisableFifoMode>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007f6:	f000 fa07 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000f8 	.word	0x200000f8
 8000804:	40008000 	.word	0x40008000

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <MX_TIM2_Init+0xe8>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000844:	22a9      	movs	r2, #169	; 0xa9
 8000846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_TIM2_Init+0xe8>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000850:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_TIM2_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000864:	f003 fe3c 	bl	80044e0 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f9cb 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000880:	f004 f986 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800088a:	f000 f9bd 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM2_Init+0xe8>)
 8000890:	f003 fef6 	bl	8004680 <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 f9b5 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM2_Init+0xe8>)
 80008ae:	f004 ff25 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b8:	f000 f9a6 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM2_Init+0xe8>)
 80008d4:	f004 f848 	bl	8004968 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008de:	f000 f993 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM2_Init+0xe8>)
 80008e4:	f000 fac6 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3738      	adds	r7, #56	; 0x38
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000018c 	.word	0x2000018c

080008f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM5_Init+0x94>)
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <MX_TIM5_Init+0x98>)
 8000916:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_TIM5_Init+0x94>)
 800091a:	22a9      	movs	r2, #169	; 0xa9
 800091c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM5_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_TIM5_Init+0x94>)
 8000926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_TIM5_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM5_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_TIM5_Init+0x94>)
 800093a:	f003 fdd1 	bl	80044e0 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000944:	f000 f960 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_TIM5_Init+0x94>)
 8000956:	f004 f91b 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 f952 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_TIM5_Init+0x94>)
 8000972:	f004 fec3 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800097c:	f000 f944 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001d8 	.word	0x200001d8
 800098c:	40000c00 	.word	0x40000c00

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_DMA_Init+0x50>)
 8000998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <MX_DMA_Init+0x50>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6493      	str	r3, [r2, #72]	; 0x48
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_DMA_Init+0x50>)
 80009a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_DMA_Init+0x50>)
 80009b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_DMA_Init+0x50>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6493      	str	r3, [r2, #72]	; 0x48
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_DMA_Init+0x50>)
 80009bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	200b      	movs	r0, #11
 80009cc:	f002 f8e5 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d0:	200b      	movs	r0, #11
 80009d2:	f002 f8fc 	bl	8002bce <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f002 fcc3 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2130      	movs	r1, #48	; 0x30
 8000a6a:	481e      	ldr	r0, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0x100>)
 8000a6c:	f002 fcbe 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0x104>)
 8000a88:	f002 fb2e 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f002 fb1f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000aaa:	2330      	movs	r3, #48	; 0x30
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_GPIO_Init+0x100>)
 8000ac2:	f002 fb11 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2028      	movs	r0, #40	; 0x28
 8000acc:	f002 f865 	bl	8002b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad0:	2028      	movs	r0, #40	; 0x28
 8000ad2:	f002 f87c 	bl	8002bce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	48000800 	.word	0x48000800

08000aec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afc:	d112      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x38>
		if (mode == 1){
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d103      	bne.n	8000b0e <HAL_GPIO_EXTI_Callback+0x22>
				mode = 2;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	801a      	strh	r2, [r3, #0]
		else {
				mode = 1;

			}
		}
}
 8000b0c:	e00a      	b.n	8000b24 <HAL_GPIO_EXTI_Callback+0x38>
		else if (mode == 2){
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d103      	bne.n	8000b1e <HAL_GPIO_EXTI_Callback+0x32>
				mode = 3;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b18:	2203      	movs	r2, #3
 8000b1a:	801a      	strh	r2, [r3, #0]
}
 8000b1c:	e002      	b.n	8000b24 <HAL_GPIO_EXTI_Callback+0x38>
				mode = 1;
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	801a      	strh	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000000 	.word	0x20000000

08000b34 <led2>:
void led2(){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	if (mode == 1){
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <led2+0x50>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d106      	bne.n	8000b4e <led2+0x1a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f002 fc50 	bl	80033ec <HAL_GPIO_WritePin>
	else if (mode == 3) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}

}
 8000b4c:	e017      	b.n	8000b7e <led2+0x4a>
	else if (mode == 2){
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <led2+0x50>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d106      	bne.n	8000b64 <led2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f002 fc45 	bl	80033ec <HAL_GPIO_WritePin>
}
 8000b62:	e00c      	b.n	8000b7e <led2+0x4a>
	else if (mode == 3) {
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <led2+0x50>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d108      	bne.n	8000b7e <led2+0x4a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f002 fc53 	bl	800341c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f000 fa99 	bl	80010b0 <HAL_Delay>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <Average_ADC_Value>:

void Average_ADC_Value() {
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
    uint32_t sum_adc1 = 0, sum_adc2 = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e015      	b.n	8000bc8 <Average_ADC_Value+0x40>
        sum_adc1 += ADC_RawRead[i*2];
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <Average_ADC_Value+0x70>)
 8000ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
        sum_adc2 += ADC_RawRead[i*2+1];
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <Average_ADC_Value+0x70>)
 8000bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d9e6      	bls.n	8000b9c <Average_ADC_Value+0x14>
//        sum_adc3 += ADC_RawRead[i*3+2];
    }
    avg_adc1 = sum_adc1 / 5;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <Average_ADC_Value+0x74>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <Average_ADC_Value+0x78>)
 8000bda:	6013      	str	r3, [r2, #0]
    avg_adc2 = sum_adc2 / 5;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <Average_ADC_Value+0x74>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <Average_ADC_Value+0x7c>)
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000224 	.word	0x20000224
 8000bfc:	cccccccd 	.word	0xcccccccd
 8000c00:	20000238 	.word	0x20000238
 8000c04:	2000023c 	.word	0x2000023c

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	; 0x60
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c4a:	f002 fcbd 	bl	80035c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09e      	sub	sp, #120	; 0x78
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2254      	movs	r2, #84	; 0x54
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fc77 	bl	8006570 <memset>
  if(hadc->Instance==ADC1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c8a:	d15f      	bne.n	8000d4c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c92:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f9d1 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ca8:	f7ff ffae 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_ADC_MspInit+0xf8>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f002 f9f9 	bl	80030e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_ADC_MspInit+0x100>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000cfe:	2205      	movs	r2, #5
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d26:	2220      	movs	r2, #32
 8000d28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d32:	f001 ff67 	bl	8002c04 <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000d3c:	f7ff ff64 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d44:	655a      	str	r2, [r3, #84]	; 0x54
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_ADC_MspInit+0xfc>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3778      	adds	r7, #120	; 0x78
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	20000098 	.word	0x20000098
 8000d5c:	40020008 	.word	0x40020008

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09e      	sub	sp, #120	; 0x78
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 fbf5 	bl	8006570 <memset>
  if(huart->Instance==LPUART1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_UART_MspInit+0xa8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d136      	bne.n	8000dfe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d90:	2320      	movs	r3, #32
 8000d92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 f951 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff ff2e 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_UART_MspInit+0xac>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000dec:	230c      	movs	r3, #12
 8000dee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f002 f975 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3778      	adds	r7, #120	; 0x78
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40008000 	.word	0x40008000
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e20:	d10c      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e3a:	e010      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_TIM_Base_MspInit+0x60>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10b      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_TIM_Base_MspInit+0x5c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 0308 	and.w	r3, r3, #8
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40000c00 	.word	0x40000c00

08000e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d11d      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f002 f90b 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f8a2 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA1_Channel1_IRQHandler+0x10>)
 8000f3a:	f001 ff86 	bl	8002e4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000098 	.word	0x20000098

08000f48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f50:	f002 fa7e 	bl	8003450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff ffea 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f005 fae9 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fae:	f7ff fab1 	bl	8000514 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fc0:	08006630 	.word	0x08006630
  ldr r2, =_sbss
 8000fc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fc8:	20000268 	.word	0x20000268

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>

08000fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f001 fdd3 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f80e 	bl	8001000 <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff0:	f7ff fe10 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_InitTick+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d022      	beq.n	800105a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_InitTick+0x6c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_InitTick+0x68>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001020:	fbb1 f3f3 	udiv	r3, r1, r3
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fdde 	bl	8002bea <HAL_SYSTICK_Config>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10f      	bne.n	8001054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d809      	bhi.n	800104e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	f001 fdaa 	bl	8002b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_InitTick+0x70>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e007      	b.n	800105e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e004      	b.n	800105e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000004 	.word	0x20000004
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x1c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x20>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4413      	add	r3, r2
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_IncTick+0x1c>)
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000264 	.word	0x20000264
 8001094:	2000000c 	.word	0x2000000c

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000264 	.word	0x20000264

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d004      	beq.n	80010d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_Delay+0x40>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d4:	bf00      	nop
 80010d6:	f7ff ffdf 	bl	8001098 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8f7      	bhi.n	80010d6 <HAL_Delay+0x26>
  {
  }
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	609a      	str	r2, [r3, #8]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LL_ADC_SetOffset+0x44>)
 800117e:	4013      	ands	r3, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	4313      	orrs	r3, r2
 800118c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	03fff000 	.word	0x03fff000

080011a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3360      	adds	r3, #96	; 0x60
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3360      	adds	r3, #96	; 0x60
 80011e0:	461a      	mov	r2, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011fa:	bf00      	nop
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001206:	b480      	push	{r7}
 8001208:	b087      	sub	sp, #28
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3360      	adds	r3, #96	; 0x60
 8001216:	461a      	mov	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3360      	adds	r3, #96	; 0x60
 800124c:	461a      	mov	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001266:	bf00      	nop
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	615a      	str	r2, [r3, #20]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3330      	adds	r3, #48	; 0x30
 80012ce:	461a      	mov	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	211f      	movs	r1, #31
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0e9b      	lsrs	r3, r3, #26
 80012f6:	f003 011f 	and.w	r1, r3, #31
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001316:	b480      	push	{r7}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3314      	adds	r3, #20
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0e5b      	lsrs	r3, r3, #25
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	0d1b      	lsrs	r3, r3, #20
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2107      	movs	r1, #7
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0d1b      	lsrs	r3, r3, #20
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0318 	and.w	r3, r3, #24
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001390:	40d9      	lsrs	r1, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	400b      	ands	r3, r1
 8001396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139a:	431a      	orrs	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	0007ffff 	.word	0x0007ffff

080013b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 031f 	and.w	r3, r3, #31
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6093      	str	r3, [r2, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001408:	d101      	bne.n	800140e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800142c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001458:	d101      	bne.n	800145e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800147c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <LL_ADC_IsEnabled+0x18>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <LL_ADC_IsEnabled+0x1a>
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsDisableOngoing+0x18>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsDisableOngoing+0x1a>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b04      	cmp	r3, #4
 8001542:	d101      	bne.n	8001548 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b08      	cmp	r3, #8
 8001568:	d101      	bne.n	800156e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1a9      	b.n	80018ea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fb59 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff19 	bl	80013f4 <LL_ADC_IsDeepPowerDownEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff feff 	bl	80013d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff34 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff18 	bl	800141c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ec:	4b9c      	ldr	r3, [pc, #624]	; (8001860 <HAL_ADC_Init+0x2e4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	4a9c      	ldr	r2, [pc, #624]	; (8001864 <HAL_ADC_Init+0x2e8>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001600:	e002      	b.n	8001608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff16 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff76 	bl	8001530 <LL_ADC_REG_IsConversionOngoing>
 8001644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 8142 	bne.w	80018d8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 813e 	bne.w	80018d8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff23 	bl	80014bc <LL_ADC_IsEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d141      	bne.n	8001700 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d004      	beq.n	8001690 <HAL_ADC_Init+0x114>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a77      	ldr	r2, [pc, #476]	; (8001868 <HAL_ADC_Init+0x2ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d10f      	bne.n	80016b0 <HAL_ADC_Init+0x134>
 8001690:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001694:	f7ff ff12 	bl	80014bc <LL_ADC_IsEnabled>
 8001698:	4604      	mov	r4, r0
 800169a:	4873      	ldr	r0, [pc, #460]	; (8001868 <HAL_ADC_Init+0x2ec>)
 800169c:	f7ff ff0e 	bl	80014bc <LL_ADC_IsEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4323      	orrs	r3, r4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e012      	b.n	80016d6 <HAL_ADC_Init+0x15a>
 80016b0:	486e      	ldr	r0, [pc, #440]	; (800186c <HAL_ADC_Init+0x2f0>)
 80016b2:	f7ff ff03 	bl	80014bc <LL_ADC_IsEnabled>
 80016b6:	4604      	mov	r4, r0
 80016b8:	486d      	ldr	r0, [pc, #436]	; (8001870 <HAL_ADC_Init+0x2f4>)
 80016ba:	f7ff feff 	bl	80014bc <LL_ADC_IsEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	431c      	orrs	r4, r3
 80016c2:	486c      	ldr	r0, [pc, #432]	; (8001874 <HAL_ADC_Init+0x2f8>)
 80016c4:	f7ff fefa 	bl	80014bc <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4323      	orrs	r3, r4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x172>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_ADC_Init+0x2ec>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x176>
 80016ee:	4a62      	ldr	r2, [pc, #392]	; (8001878 <HAL_ADC_Init+0x2fc>)
 80016f0:	e000      	b.n	80016f4 <HAL_ADC_Init+0x178>
 80016f2:	4a62      	ldr	r2, [pc, #392]	; (800187c <HAL_ADC_Init+0x300>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7ff fcfa 	bl	80010f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7f5b      	ldrb	r3, [r3, #29]
 8001704:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001710:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001716:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	045b      	lsls	r3, r3, #17
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <HAL_ADC_Init+0x304>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fee5 	bl	8001556 <LL_ADC_INJ_IsConversionOngoing>
 800178c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d17f      	bne.n	8001894 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d17c      	bne.n	8001894 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800179e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d017      	beq.n	80017fc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6911      	ldr	r1, [r2, #16]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80017fa:	e013      	b.n	8001824 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800180a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800181c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001820:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800182a:	2b01      	cmp	r3, #1
 800182c:	d12a      	bne.n	8001884 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001844:	4311      	orrs	r1, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001850:	430a      	orrs	r2, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	e019      	b.n	8001894 <HAL_ADC_Init+0x318>
 8001860:	20000004 	.word	0x20000004
 8001864:	053e2d63 	.word	0x053e2d63
 8001868:	50000100 	.word	0x50000100
 800186c:	50000400 	.word	0x50000400
 8001870:	50000500 	.word	0x50000500
 8001874:	50000600 	.word	0x50000600
 8001878:	50000300 	.word	0x50000300
 800187c:	50000700 	.word	0x50000700
 8001880:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10c      	bne.n	80018b6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f023 010f 	bic.w	r1, r3, #15
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
 80018b4:	e007      	b.n	80018c6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 020f 	bic.w	r2, r2, #15
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80018d6:	e007      	b.n	80018e8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	f043 0210 	orr.w	r2, r3, #16
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop

080018f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001908:	d004      	beq.n	8001914 <HAL_ADC_Start_DMA+0x20>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5a      	ldr	r2, [pc, #360]	; (8001a78 <HAL_ADC_Start_DMA+0x184>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_ADC_Start_DMA+0x24>
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_ADC_Start_DMA+0x188>)
 8001916:	e000      	b.n	800191a <HAL_ADC_Start_DMA+0x26>
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <HAL_ADC_Start_DMA+0x18c>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fd4a 	bl	80013b4 <LL_ADC_GetMultimode>
 8001920:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe02 	bl	8001530 <LL_ADC_REG_IsConversionOngoing>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 809b 	bne.w	8001a6a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_DMA+0x4e>
 800193e:	2302      	movs	r3, #2
 8001940:	e096      	b.n	8001a70 <HAL_ADC_Start_DMA+0x17c>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a4d      	ldr	r2, [pc, #308]	; (8001a84 <HAL_ADC_Start_DMA+0x190>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d008      	beq.n	8001966 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d002      	beq.n	8001966 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b09      	cmp	r3, #9
 8001964:	d17a      	bne.n	8001a5c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fcf6 	bl	8002358 <ADC_Enable>
 800196c:	4603      	mov	r3, r0
 800196e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d16d      	bne.n	8001a52 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <HAL_ADC_Start_DMA+0x184>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_ADC_Start_DMA+0xb4>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_ADC_Start_DMA+0x194>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d002      	beq.n	80019a4 <HAL_ADC_Start_DMA+0xb0>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	e003      	b.n	80019ac <HAL_ADC_Start_DMA+0xb8>
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_ADC_Start_DMA+0x198>)
 80019a6:	e001      	b.n	80019ac <HAL_ADC_Start_DMA+0xb8>
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d002      	beq.n	80019ba <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f023 0206 	bic.w	r2, r3, #6
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	661a      	str	r2, [r3, #96]	; 0x60
 80019de:	e002      	b.n	80019e6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_ADC_Start_DMA+0x19c>)
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <HAL_ADC_Start_DMA+0x1a0>)
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_ADC_Start_DMA+0x1a4>)
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	221c      	movs	r2, #28
 8001a04:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0210 	orr.w	r2, r2, #16
 8001a1c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3340      	adds	r3, #64	; 0x40
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f001 f989 	bl	8002d54 <HAL_DMA_Start_IT>
 8001a42:	4603      	mov	r3, r0
 8001a44:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd5c 	bl	8001508 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a50:	e00d      	b.n	8001a6e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001a5a:	e008      	b.n	8001a6e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a68:	e001      	b.n	8001a6e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	50000100 	.word	0x50000100
 8001a7c:	50000300 	.word	0x50000300
 8001a80:	50000700 	.word	0x50000700
 8001a84:	50000600 	.word	0x50000600
 8001a88:	50000500 	.word	0x50000500
 8001a8c:	50000400 	.word	0x50000400
 8001a90:	08002543 	.word	0x08002543
 8001a94:	0800261b 	.word	0x0800261b
 8001a98:	08002637 	.word	0x08002637

08001a9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0b6      	sub	sp, #216	; 0xd8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x24>
 8001af6:	2302      	movs	r3, #2
 8001af8:	f000 bc13 	b.w	8002322 <HAL_ADC_ConfigChannel+0x84a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fd11 	bl	8001530 <LL_ADC_REG_IsConversionOngoing>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 83f3 	bne.w	80022fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f7ff fbcb 	bl	80012be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fcff 	bl	8001530 <LL_ADC_REG_IsConversionOngoing>
 8001b32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fd0b 	bl	8001556 <LL_ADC_INJ_IsConversionOngoing>
 8001b40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 81d9 	bne.w	8001f00 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 81d4 	bne.w	8001f00 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b60:	d10f      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff fbd2 	bl	8001316 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fb79 	bl	8001272 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b80:	e00e      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f7ff fbc1 	bl	8001316 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fb69 	bl	8001272 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d022      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bd2:	f7ff fac3 	bl	800115c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f7ff fb0f 	bl	8001206 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x126>
 8001bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x128>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	461a      	mov	r2, r3
 8001c02:	f7ff fb1b 	bl	800123c <LL_ADC_SetOffsetSaturation>
 8001c06:	e17b      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fac8 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x15c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fabd 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	e01e      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x19a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fab2 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e004      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d105      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x1b2>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	e018      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x1e4>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e004      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d106      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fa81 	bl	80011d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fa65 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10a      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x222>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fa5a 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	e01e      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x260>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa4f 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e004      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x278>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0e9b      	lsrs	r3, r3, #26
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	e018      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x2aa>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e004      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d106      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa1e 	bl	80011d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2102      	movs	r1, #2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fa02 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10a      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x2e8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f9f7 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	e01e      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x326>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f9ec 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e004      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x33e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	e016      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x36c>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e004      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f9bd 	bl	80011d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f9a1 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x3aa>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2103      	movs	r1, #3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f996 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	e017      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x3da>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2103      	movs	r1, #3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f98b 	bl	80011a4 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	e003      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x3f2>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	e011      	b.n	8001eee <HAL_ADC_ConfigChannel+0x416>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2103      	movs	r1, #3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f968 	bl	80011d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fad9 	bl	80014bc <LL_ADC_IsEnabled>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 813d 	bne.w	800218c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f7ff fa24 	bl	800136c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4aa2      	ldr	r2, [pc, #648]	; (80021b4 <HAL_ADC_ConfigChannel+0x6dc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f040 812e 	bne.w	800218c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x480>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	3301      	adds	r3, #1
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e019      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x4b4>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	bf94      	ite	ls
 8001f86:	2301      	movls	r3, #1
 8001f88:	2300      	movhi	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d079      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x4d4>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	069b      	lsls	r3, r3, #26
 8001fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001faa:	e015      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x500>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	e003      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	069b      	lsls	r3, r3, #26
 8001fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x520>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	3301      	adds	r3, #1
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	e017      	b.n	8002028 <HAL_ADC_ConfigChannel+0x550>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800200a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002010:	2320      	movs	r3, #32
 8002012:	e003      	b.n	800201c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	ea42 0103 	orr.w	r1, r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x576>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	e018      	b.n	8002080 <HAL_ADC_ConfigChannel+0x5a8>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e003      	b.n	8002072 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002080:	430b      	orrs	r3, r1
 8002082:	e07e      	b.n	8002182 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x5c8>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	069b      	lsls	r3, r3, #26
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	e015      	b.n	80020cc <HAL_ADC_ConfigChannel+0x5f4>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e003      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x614>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	3301      	adds	r3, #1
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	e017      	b.n	800211c <HAL_ADC_ConfigChannel+0x644>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	61fb      	str	r3, [r7, #28]
  return result;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	ea42 0103 	orr.w	r1, r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x670>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	3301      	adds	r3, #1
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	3b1e      	subs	r3, #30
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002146:	e01b      	b.n	8002180 <HAL_ADC_ConfigChannel+0x6a8>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	613b      	str	r3, [r7, #16]
  return result;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e003      	b.n	800216c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3301      	adds	r3, #1
 800216e:	f003 021f 	and.w	r2, r3, #31
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	3b1e      	subs	r3, #30
 800217a:	051b      	lsls	r3, r3, #20
 800217c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002180:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002186:	4619      	mov	r1, r3
 8002188:	f7ff f8c5 	bl	8001316 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80be 	beq.w	8002316 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x6d6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_ADC_ConfigChannel+0x6e4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10a      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x6ec>
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80021b0:	e009      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x6ee>
 80021b2:	bf00      	nop
 80021b4:	407f0000 	.word	0x407f0000
 80021b8:	80080000 	.word	0x80080000
 80021bc:	50000100 	.word	0x50000100
 80021c0:	50000300 	.word	0x50000300
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_ADC_ConfigChannel+0x854>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe ffba 	bl	8001140 <LL_ADC_GetCommonPathInternalCh>
 80021cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a56      	ldr	r2, [pc, #344]	; (8002330 <HAL_ADC_ConfigChannel+0x858>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x70c>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a55      	ldr	r2, [pc, #340]	; (8002334 <HAL_ADC_ConfigChannel+0x85c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d13a      	bne.n	800225a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d134      	bne.n	800225a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d005      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x72e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_ADC_ConfigChannel+0x860>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f040 8085 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220e:	d004      	beq.n	800221a <HAL_ADC_ConfigChannel+0x742>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_ADC_ConfigChannel+0x864>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x746>
 800221a:	4a49      	ldr	r2, [pc, #292]	; (8002340 <HAL_ADC_ConfigChannel+0x868>)
 800221c:	e000      	b.n	8002220 <HAL_ADC_ConfigChannel+0x748>
 800221e:	4a43      	ldr	r2, [pc, #268]	; (800232c <HAL_ADC_ConfigChannel+0x854>)
 8002220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f7fe ff75 	bl	800111a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_ADC_ConfigChannel+0x86c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	4a44      	ldr	r2, [pc, #272]	; (8002348 <HAL_ADC_ConfigChannel+0x870>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800224a:	e002      	b.n	8002252 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3b01      	subs	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002258:	e05a      	b.n	8002310 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3b      	ldr	r2, [pc, #236]	; (800234c <HAL_ADC_ConfigChannel+0x874>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d125      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d11f      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_ADC_ConfigChannel+0x864>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d104      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7ac>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a34      	ldr	r2, [pc, #208]	; (8002350 <HAL_ADC_ConfigChannel+0x878>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d047      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228c:	d004      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x7c0>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_ADC_ConfigChannel+0x864>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x7c4>
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_ADC_ConfigChannel+0x868>)
 800229a:	e000      	b.n	800229e <HAL_ADC_ConfigChannel+0x7c6>
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <HAL_ADC_ConfigChannel+0x854>)
 800229e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f7fe ff36 	bl	800111a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ae:	e031      	b.n	8002314 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_ADC_ConfigChannel+0x87c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12d      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d127      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_ADC_ConfigChannel+0x864>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d8:	d004      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x80c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <HAL_ADC_ConfigChannel+0x864>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x810>
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_ADC_ConfigChannel+0x868>)
 80022e6:	e000      	b.n	80022ea <HAL_ADC_ConfigChannel+0x812>
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_ADC_ConfigChannel+0x854>)
 80022ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7fe ff10 	bl	800111a <LL_ADC_SetCommonPathInternalCh>
 80022fa:	e00c      	b.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f043 0220 	orr.w	r2, r3, #32
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800230e:	e002      	b.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002310:	bf00      	nop
 8002312:	e000      	b.n	8002316 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800231e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002322:	4618      	mov	r0, r3
 8002324:	37d8      	adds	r7, #216	; 0xd8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	50000700 	.word	0x50000700
 8002330:	c3210000 	.word	0xc3210000
 8002334:	90c00010 	.word	0x90c00010
 8002338:	50000600 	.word	0x50000600
 800233c:	50000100 	.word	0x50000100
 8002340:	50000300 	.word	0x50000300
 8002344:	20000004 	.word	0x20000004
 8002348:	053e2d63 	.word	0x053e2d63
 800234c:	c7520000 	.word	0xc7520000
 8002350:	50000500 	.word	0x50000500
 8002354:	cb840000 	.word	0xcb840000

08002358 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f8a7 	bl	80014bc <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d176      	bne.n	8002462 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b3c      	ldr	r3, [pc, #240]	; (800246c <ADC_Enable+0x114>)
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e062      	b.n	8002464 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f862 	bl	800146c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b0:	d004      	beq.n	80023bc <ADC_Enable+0x64>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <ADC_Enable+0x118>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <ADC_Enable+0x68>
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <ADC_Enable+0x11c>)
 80023be:	e000      	b.n	80023c2 <ADC_Enable+0x6a>
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <ADC_Enable+0x120>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe febc 	bl	8001140 <LL_ADC_GetCommonPathInternalCh>
 80023c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d013      	beq.n	80023fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <ADC_Enable+0x124>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <ADC_Enable+0x128>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	099b      	lsrs	r3, r3, #6
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023ec:	e002      	b.n	80023f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fe4d 	bl	8001098 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002400:	e028      	b.n	8002454 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f858 	bl	80014bc <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f828 	bl	800146c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800241c:	f7fe fe3c 	bl	8001098 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d914      	bls.n	8002454 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d00d      	beq.n	8002454 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	f043 0210 	orr.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e007      	b.n	8002464 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d1cf      	bne.n	8002402 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	8000003f 	.word	0x8000003f
 8002470:	50000100 	.word	0x50000100
 8002474:	50000300 	.word	0x50000300
 8002478:	50000700 	.word	0x50000700
 800247c:	20000004 	.word	0x20000004
 8002480:	053e2d63 	.word	0x053e2d63

08002484 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f826 	bl	80014e2 <LL_ADC_IsDisableOngoing>
 8002496:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff f80d 	bl	80014bc <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d047      	beq.n	8002538 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d144      	bne.n	8002538 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030d 	and.w	r3, r3, #13
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10c      	bne.n	80024d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe ffe7 	bl	8001494 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2203      	movs	r2, #3
 80024cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fde3 	bl	8001098 <HAL_GetTick>
 80024d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d4:	e029      	b.n	800252a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e023      	b.n	800253a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024f2:	f7fe fdd1 	bl	8001098 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d914      	bls.n	800252a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1dc      	bne.n	80024f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002558:	2b00      	cmp	r3, #0
 800255a:	d14b      	bne.n	80025f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d021      	beq.n	80025ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fe8c 	bl	8001298 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d032      	beq.n	80025ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d12b      	bne.n	80025ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11f      	bne.n	80025ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025b8:	e018      	b.n	80025ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fa55 	bl	8001a9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025f2:	e00e      	b.n	8002612 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fa5f 	bl	8001ac4 <HAL_ADC_ErrorCallback>
}
 8002606:	e004      	b.n	8002612 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fa41 	bl	8001ab0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff fa31 	bl	8001ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <LL_ADC_IsEnabled>:
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <LL_ADC_IsEnabled+0x18>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <LL_ADC_IsEnabled+0x1a>
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_StartCalibration>:
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_IsCalibrationOnGoing>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d6:	d101      	bne.n	80026dc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_IsCalibrationOnGoing+0x1c>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_IsConversionOngoing>:
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d101      	bne.n	8002702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADCEx_Calibration_Start+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e04d      	b.n	80027c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fea5 	bl	8002484 <ADC_Disable>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d136      	bne.n	80027b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800274c:	f023 0302 	bic.w	r3, r3, #2
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff96 	bl	8002690 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002764:	e014      	b.n	8002790 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3301      	adds	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d90d      	bls.n	8002790 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f023 0312 	bic.w	r3, r3, #18
 800277c:	f043 0210 	orr.w	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e01b      	b.n	80027c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff94 	bl	80026c2 <LL_ADC_IsCalibrationOnGoing>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e2      	bne.n	8002766 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b0:	e005      	b.n	80027be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	0004de01 	.word	0x0004de01

080027d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b0a1      	sub	sp, #132	; 0x84
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0e7      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027fa:	2300      	movs	r3, #0
 80027fc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027fe:	2300      	movs	r3, #0
 8002800:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d102      	bne.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	e009      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d102      	bne.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	e001      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0be      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff4f 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 800284c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff49 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80a0 	bne.w	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 809c 	bne.w	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002870:	d004      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800287e:	e000      	b.n	8002882 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002880:	4b56      	ldr	r3, [pc, #344]	; (80029dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002882:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d04b      	beq.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800288c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800289e:	035b      	lsls	r3, r3, #13
 80028a0:	430b      	orrs	r3, r1
 80028a2:	431a      	orrs	r2, r3
 80028a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d004      	beq.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10f      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80028bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028c0:	f7ff fed3 	bl	800266a <LL_ADC_IsEnabled>
 80028c4:	4604      	mov	r4, r0
 80028c6:	4841      	ldr	r0, [pc, #260]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028c8:	f7ff fecf 	bl	800266a <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80028dc:	483c      	ldr	r0, [pc, #240]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028de:	f7ff fec4 	bl	800266a <LL_ADC_IsEnabled>
 80028e2:	4604      	mov	r4, r0
 80028e4:	483b      	ldr	r0, [pc, #236]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028e6:	f7ff fec0 	bl	800266a <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	431c      	orrs	r4, r3
 80028ee:	483c      	ldr	r0, [pc, #240]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028f0:	f7ff febb 	bl	800266a <LL_ADC_IsEnabled>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4323      	orrs	r3, r4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d056      	beq.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800290e:	f023 030f 	bic.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	430a      	orrs	r2, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002920:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002922:	e047      	b.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002938:	d004      	beq.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10f      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002944:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002948:	f7ff fe8f 	bl	800266a <LL_ADC_IsEnabled>
 800294c:	4604      	mov	r4, r0
 800294e:	481f      	ldr	r0, [pc, #124]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002950:	f7ff fe8b 	bl	800266a <LL_ADC_IsEnabled>
 8002954:	4603      	mov	r3, r0
 8002956:	4323      	orrs	r3, r4
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e012      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002964:	481a      	ldr	r0, [pc, #104]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002966:	f7ff fe80 	bl	800266a <LL_ADC_IsEnabled>
 800296a:	4604      	mov	r4, r0
 800296c:	4819      	ldr	r0, [pc, #100]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800296e:	f7ff fe7c 	bl	800266a <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	431c      	orrs	r4, r3
 8002976:	481a      	ldr	r0, [pc, #104]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002978:	f7ff fe77 	bl	800266a <LL_ADC_IsEnabled>
 800297c:	4603      	mov	r3, r0
 800297e:	4323      	orrs	r3, r4
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d012      	beq.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800298e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002996:	f023 030f 	bic.w	r3, r3, #15
 800299a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800299c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800299e:	e009      	b.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80029b2:	e000      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3784      	adds	r7, #132	; 0x84
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	50000100 	.word	0x50000100
 80029d0:	50000400 	.word	0x50000400
 80029d4:	50000500 	.word	0x50000500
 80029d8:	50000300 	.word	0x50000300
 80029dc:	50000700 	.word	0x50000700
 80029e0:	50000600 	.word	0x50000600

080029e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <__NVIC_SetPriorityGrouping+0x44>)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60d3      	str	r3, [r2, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <__NVIC_GetPriorityGrouping+0x18>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 0307 	and.w	r3, r3, #7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	db0b      	blt.n	8002a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	4907      	ldr	r1, [pc, #28]	; (8002a80 <__NVIC_EnableIRQ+0x38>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100

08002a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
         );
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff29 	bl	80029e4 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff40 	bl	8002a2c <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff90 	bl	8002ad8 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5f 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff33 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa4 	bl	8002b40 <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_DMA_Init+0x138>)
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d80f      	bhi.n	8002c42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <HAL_DMA_Init+0x13c>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a45      	ldr	r2, [pc, #276]	; (8002d44 <HAL_DMA_Init+0x140>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_DMA_Init+0x144>)
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c40:	e00e      	b.n	8002c60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <HAL_DMA_Init+0x148>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a3d      	ldr	r2, [pc, #244]	; (8002d44 <HAL_DMA_Init+0x140>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <HAL_DMA_Init+0x14c>)
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9b6 	bl	8003024 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc0:	d102      	bne.n	8002cc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cdc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_DMA_Init+0x104>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d80c      	bhi.n	8002d08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9d6 	bl	80030a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	e008      	b.n	8002d1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40020407 	.word	0x40020407
 8002d40:	bffdfff8 	.word	0xbffdfff8
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	bffdfbf8 	.word	0xbffdfbf8
 8002d50:	40020400 	.word	0x40020400

08002d54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x20>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e066      	b.n	8002e42 <HAL_DMA_Start_IT+0xee>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d155      	bne.n	8002e34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f8fb 	bl	8002fa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 020e 	orr.w	r2, r2, #14
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e00f      	b.n	8002dec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 020a 	orr.w	r2, r2, #10
 8002dea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e005      	b.n	8002e40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d026      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x7a>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d021      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0204 	bic.w	r2, r2, #4
 8002e9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 021f 	and.w	r2, r3, #31
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2104      	movs	r1, #4
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d071      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ec2:	e06c      	b.n	8002f9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2202      	movs	r2, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d02e      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d029      	beq.n	8002f36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020a 	bic.w	r2, r2, #10
 8002efe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2102      	movs	r1, #2
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d038      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f34:	e033      	b.n	8002f9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2208      	movs	r2, #8
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d025      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 020e 	bic.w	r2, r2, #14
 8002f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
}
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 021f 	and.w	r2, r3, #31
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d108      	bne.n	8003008 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003006:	e007      	b.n	8003018 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d802      	bhi.n	800303e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e001      	b.n	8003042 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003040:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3b08      	subs	r3, #8
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40020407 	.word	0x40020407
 8003090:	40020800 	.word	0x40020800
 8003094:	40020820 	.word	0x40020820
 8003098:	cccccccd 	.word	0xcccccccd
 800309c:	40020880 	.word	0x40020880

080030a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	1000823f 	.word	0x1000823f
 80030e4:	40020940 	.word	0x40020940

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030f6:	e15a      	b.n	80033ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 814c 	beq.w	80033a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b03      	cmp	r3, #3
 8003194:	d017      	beq.n	80031c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d123      	bne.n	800321a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	6939      	ldr	r1, [r7, #16]
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80a6 	beq.w	80033a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	4a5a      	ldr	r2, [pc, #360]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6613      	str	r3, [r2, #96]	; 0x60
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800329e:	d01f      	beq.n	80032e0 <HAL_GPIO_Init+0x1f8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_GPIO_Init+0x2ec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d019      	beq.n	80032dc <HAL_GPIO_Init+0x1f4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <HAL_GPIO_Init+0x2f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <HAL_GPIO_Init+0x1f0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <HAL_GPIO_Init+0x2f4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00d      	beq.n	80032d4 <HAL_GPIO_Init+0x1ec>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <HAL_GPIO_Init+0x2f8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x1e8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x2fc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_GPIO_Init+0x1e4>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e00a      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032cc:	2306      	movs	r3, #6
 80032ce:	e008      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e006      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d4:	2303      	movs	r3, #3
 80032d6:	e004      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d8:	2302      	movs	r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032e0:	2300      	movs	r3, #0
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	f002 0203 	and.w	r2, r2, #3
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	4093      	lsls	r3, r2
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f2:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003324:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800334e:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a2:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_GPIO_Init+0x300>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f ae9d 	bne.w	80030f8 <HAL_GPIO_Init+0x10>
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	48000400 	.word	0x48000400
 80033d8:	48000800 	.word	0x48000800
 80033dc:	48000c00 	.word	0x48000c00
 80033e0:	48001000 	.word	0x48001000
 80033e4:	48001400 	.word	0x48001400
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003408:	e002      	b.n	8003410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43d9      	mvns	r1, r3
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	400b      	ands	r3, r1
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fb3c 	bl	8000aec <HAL_GPIO_EXTI_Callback>
  }
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40010400 	.word	0x40010400

08003480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d141      	bne.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800348e:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d131      	bne.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a2:	4a46      	ldr	r2, [pc, #280]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b4:	4a41      	ldr	r2, [pc, #260]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034bc:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2232      	movs	r2, #50	; 0x32
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a3f      	ldr	r2, [pc, #252]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9b      	lsrs	r3, r3, #18
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d2:	e002      	b.n	80034da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e6:	d102      	bne.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f2      	bne.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ee:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d158      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e057      	b.n	80035b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003510:	e04d      	b.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003518:	d141      	bne.n	800359e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d131      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2232      	movs	r2, #50	; 0x32
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	0c9b      	lsrs	r3, r3, #18
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800355e:	e002      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d102      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f2      	bne.n	8003560 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d112      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e011      	b.n	80035b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800359c:	e007      	b.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40007000 	.word	0x40007000
 80035c0:	20000004 	.word	0x20000004
 80035c4:	431bde83 	.word	0x431bde83

080035c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	6093      	str	r3, [r2, #8]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e2fe      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b97      	ldr	r3, [pc, #604]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b94      	ldr	r3, [pc, #592]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x3e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d002      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e2d9      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a84      	ldr	r2, [pc, #528]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7f      	ldr	r3, [pc, #508]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7e      	ldr	r2, [pc, #504]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7b      	ldr	r2, [pc, #492]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b78      	ldr	r3, [pc, #480]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a77      	ldr	r2, [pc, #476]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b75      	ldr	r3, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a74      	ldr	r2, [pc, #464]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fcfa 	bl	8001098 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd fcf6 	bl	8001098 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e29e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fce6 	bl	8001098 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd fce2 	bl	8001098 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e28a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003708:	4b56      	ldr	r3, [pc, #344]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0x136>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d002      	beq.n	8003724 <HAL_RCC_OscConfig+0x13c>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11f      	bne.n	8003764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x154>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e25d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4946      	ldr	r1, [pc, #280]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003750:	4b45      	ldr	r3, [pc, #276]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fc53 	bl	8001000 <HAL_InitTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e249      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fc8e 	bl	8001098 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fd fc8a 	bl	8001098 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e232      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	492d      	ldr	r1, [pc, #180]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e01a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fc6a 	bl	8001098 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fd fc66 	bl	8001098 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e20e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1e0>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d041      	beq.n	800387a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd fc43 	bl	8001098 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd fc3f 	bl	8001098 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1e7      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ef      	beq.n	8003816 <HAL_RCC_OscConfig+0x22e>
 8003836:	e020      	b.n	800387a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fc26 	bl	8001098 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800384e:	e00d      	b.n	800386c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fd fc22 	bl	8001098 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d906      	bls.n	800386c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1ca      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800386c:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ea      	bne.n	8003850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80a6 	beq.w	80039d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388c:	4b84      	ldr	r3, [pc, #528]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x2b4>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x2b6>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b7f      	ldr	r3, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a7e      	ldr	r2, [pc, #504]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
 80038ae:	4b7c      	ldr	r3, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ca:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a75      	ldr	r2, [pc, #468]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fbdf 	bl	8001098 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fbdb 	bl	8001098 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e183      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_RCC_OscConfig+0x32e>
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	4a65      	ldr	r2, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003914:	e024      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d110      	bne.n	8003940 <HAL_RCC_OscConfig+0x358>
 800391e:	4b60      	ldr	r3, [pc, #384]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	4a5a      	ldr	r2, [pc, #360]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003940:	4b57      	ldr	r3, [pc, #348]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a56      	ldr	r2, [pc, #344]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d016      	beq.n	8003996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fb96 	bl	8001098 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd fb92 	bl	8001098 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e138      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ed      	beq.n	8003970 <HAL_RCC_OscConfig+0x388>
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fd fb7f 	bl	8001098 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fb7b 	bl	8001098 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e121      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ed      	bne.n	800399e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ee:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd fb4e 	bl	8001098 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7fd fb4a 	bl	8001098 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0f2      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x418>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fd fb31 	bl	8001098 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3a:	f7fd fb2d 	bl	8001098 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0d5      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80c9 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	f000 8083 	beq.w	8003b78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d15e      	bne.n	8003b38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd fb07 	bl	8001098 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	e00c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd fb03 	bl	8001098 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d905      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0ab      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ec      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x61c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6a11      	ldr	r1, [r2, #32]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ace:	0212      	lsls	r2, r2, #8
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ad6:	0852      	lsrs	r2, r2, #1
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0552      	lsls	r2, r2, #21
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae2:	0852      	lsrs	r2, r2, #1
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0652      	lsls	r2, r2, #25
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aee:	06d2      	lsls	r2, r2, #27
 8003af0:	430a      	orrs	r2, r1
 8003af2:	4943      	ldr	r1, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fac2 	bl	8001098 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fabe 	bl	8001098 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e066      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x530>
 8003b36:	e05e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd faa8 	bl	8001098 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd faa4 	bl	8001098 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_OscConfig+0x620>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60cb      	str	r3, [r1, #12]
 8003b76:	e03e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e039      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d12c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d123      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d11b      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d113      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	019f800c 	.word	0x019f800c
 8003c08:	feeefffc 	.word	0xfeeefffc

08003c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e11e      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d910      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 020f 	bic.w	r2, r3, #15
 8003c3a:	498c      	ldr	r1, [pc, #560]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b8a      	ldr	r3, [pc, #552]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e106      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d073      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d129      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c68:	4b81      	ldr	r3, [pc, #516]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0f4      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c78:	f000 f99e 	bl	8003fb8 <RCC_GetSysClockFreqFromPLLSource>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a7c      	ldr	r2, [pc, #496]	; (8003e74 <HAL_RCC_ClockConfig+0x268>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d93f      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c86:	4b7a      	ldr	r3, [pc, #488]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d033      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d12f      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e024      	b.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0c6      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0be      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ce4:	f000 f8ce 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4a61      	ldr	r2, [pc, #388]	; (8003e74 <HAL_RCC_ClockConfig+0x268>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d909      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfa:	4a5d      	ldr	r2, [pc, #372]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4957      	ldr	r1, [pc, #348]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd f9be 	bl	8001098 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fd f9ba 	bl	8001098 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e095      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d78:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d80:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4936      	ldr	r1, [pc, #216]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d105      	bne.n	8003dae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003da2:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4a32      	ldr	r2, [pc, #200]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d21d      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 020f 	bic.w	r2, r3, #15
 8003dc4:	4929      	ldr	r1, [pc, #164]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dcc:	f7fd f964 	bl	8001098 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fd f960 	bl	8001098 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e03b      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d1ed      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4917      	ldr	r1, [pc, #92]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490f      	ldr	r1, [pc, #60]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e36:	f000 f825 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490c      	ldr	r1, [pc, #48]	; (8003e78 <HAL_RCC_ClockConfig+0x26c>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x270>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd f8d0 	bl	8001000 <HAL_InitTick>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	04c4b400 	.word	0x04c4b400
 8003e78:	080065e0 	.word	0x080065e0
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	20000008 	.word	0x20000008

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d102      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	e047      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e03e      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003eae:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d136      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	0a12      	lsrs	r2, r2, #8
 8003ee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
      break;
 8003ef0:	e00c      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	0a12      	lsrs	r2, r2, #8
 8003f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
      break;
 8003f0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0e5b      	lsrs	r3, r3, #25
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e001      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f2c:	693b      	ldr	r3, [r7, #16]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	016e3600 	.word	0x016e3600

08003f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000004 	.word	0x20000004

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4904      	ldr	r1, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	080065f0 	.word	0x080065f0

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f90:	f7ff ffda 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	080065f0 	.word	0x080065f0

08003fb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d10c      	bne.n	8003ff6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fdc:	4a17      	ldr	r2, [pc, #92]	; (800403c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fe6:	68d2      	ldr	r2, [r2, #12]
 8003fe8:	0a12      	lsrs	r2, r2, #8
 8003fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	617b      	str	r3, [r7, #20]
    break;
 8003ff4:	e00c      	b.n	8004010 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	0a12      	lsrs	r2, r2, #8
 8004004:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
    break;
 800400e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	0e5b      	lsrs	r3, r3, #25
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	3301      	adds	r3, #1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800402a:	687b      	ldr	r3, [r7, #4]
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40021000 	.word	0x40021000
 800403c:	016e3600 	.word	0x016e3600
 8004040:	00f42400 	.word	0x00f42400

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800404c:	2300      	movs	r3, #0
 800404e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004050:	2300      	movs	r3, #0
 8004052:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8098 	beq.w	8004192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10d      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6593      	str	r3, [r2, #88]	; 0x58
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408a:	2301      	movs	r3, #1
 800408c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408e:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a39      	ldr	r2, [pc, #228]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800409a:	f7fc fffd 	bl	8001098 <HAL_GetTick>
 800409e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a0:	e009      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fc fff9 	bl	8001098 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d902      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	74fb      	strb	r3, [r7, #19]
        break;
 80040b4:	e005      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ef      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d159      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d019      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040f0:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fc ffb9 	bl	8001098 <HAL_GetTick>
 8004126:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004128:	e00b      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fc ffb5 	bl	8001098 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d902      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	74fb      	strb	r3, [r7, #19]
            break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ec      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800416c:	e008      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416e:	7cfb      	ldrb	r3, [r7, #19]
 8004170:	74bb      	strb	r3, [r7, #18]
 8004172:	e005      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004180:	7c7b      	ldrb	r3, [r7, #17]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4ba7      	ldr	r3, [pc, #668]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	4aa6      	ldr	r2, [pc, #664]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419e:	4ba1      	ldr	r3, [pc, #644]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0203 	bic.w	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	499d      	ldr	r1, [pc, #628]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c0:	4b98      	ldr	r3, [pc, #608]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 020c 	bic.w	r2, r3, #12
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	4995      	ldr	r1, [pc, #596]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e2:	4b90      	ldr	r3, [pc, #576]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	498c      	ldr	r1, [pc, #560]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004204:	4b87      	ldr	r3, [pc, #540]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4984      	ldr	r1, [pc, #528]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004226:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	497b      	ldr	r1, [pc, #492]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004248:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	4973      	ldr	r1, [pc, #460]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426a:	4b6e      	ldr	r3, [pc, #440]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	496a      	ldr	r1, [pc, #424]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800428c:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4962      	ldr	r1, [pc, #392]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	4959      	ldr	r1, [pc, #356]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042d0:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	4951      	ldr	r1, [pc, #324]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f2:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	4948      	ldr	r1, [pc, #288]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004314:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4940      	ldr	r1, [pc, #256]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a3a      	ldr	r2, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	4932      	ldr	r1, [pc, #200]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a2:	d105      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	4916      	ldr	r1, [pc, #88]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043da:	d105      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d019      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004412:	d109      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a02      	ldr	r2, [pc, #8]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	e002      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	4926      	ldr	r1, [pc, #152]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004452:	d105      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a20      	ldr	r2, [pc, #128]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800445a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d015      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	4918      	ldr	r1, [pc, #96]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d105      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a12      	ldr	r2, [pc, #72]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004496:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d015      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044a4:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	490a      	ldr	r1, [pc, #40]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c2:	d105      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000

080044e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e049      	b.n	8004586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fc82 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fc4c 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d001      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e054      	b.n	8004652 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <HAL_TIM_Base_Start_IT+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d022      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d01d      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a22      	ldr	r2, [pc, #136]	; (8004664 <HAL_TIM_Base_Start_IT+0xd4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d018      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_TIM_Base_Start_IT+0xd8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_TIM_Base_Start_IT+0xdc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00e      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_TIM_Base_Start_IT+0xe0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_TIM_Base_Start_IT+0xe4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x80>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_TIM_Base_Start_IT+0xe8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d115      	bne.n	800463c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_TIM_Base_Start_IT+0xec>)
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d015      	beq.n	800464e <HAL_TIM_Base_Start_IT+0xbe>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d011      	beq.n	800464e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	e008      	b.n	800464e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e000      	b.n	8004650 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40013400 	.word	0x40013400
 8004674:	40014000 	.word	0x40014000
 8004678:	40015000 	.word	0x40015000
 800467c:	00010007 	.word	0x00010007

08004680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e049      	b.n	8004726 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f841 	bl	800472e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 fb7c 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x24>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e03c      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d109      	bne.n	8004782 <HAL_TIM_PWM_Start+0x3e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e02f      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d109      	bne.n	800479c <HAL_TIM_PWM_Start+0x58>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e022      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x72>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e015      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x8c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e008      	b.n	80047e2 <HAL_TIM_PWM_Start+0x9e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0a6      	b.n	8004938 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xb6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f8:	e023      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xc6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	e01b      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xd6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	e013      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xe6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004828:	e00b      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b10      	cmp	r3, #16
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xf6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004838:	e003      	b.n	8004842 <HAL_TIM_PWM_Start+0xfe>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 ff30 	bl	80056b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_TIM_PWM_Start+0x1fc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_PWM_Start+0x148>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a39      	ldr	r2, [pc, #228]	; (8004944 <HAL_TIM_PWM_Start+0x200>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_TIM_PWM_Start+0x148>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a37      	ldr	r2, [pc, #220]	; (8004948 <HAL_TIM_PWM_Start+0x204>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_PWM_Start+0x148>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a36      	ldr	r2, [pc, #216]	; (800494c <HAL_TIM_PWM_Start+0x208>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_PWM_Start+0x148>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a34      	ldr	r2, [pc, #208]	; (8004950 <HAL_TIM_PWM_Start+0x20c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_PWM_Start+0x148>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_TIM_PWM_Start+0x210>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_TIM_PWM_Start+0x14c>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_TIM_PWM_Start+0x14e>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_TIM_PWM_Start+0x1fc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a26      	ldr	r2, [pc, #152]	; (8004958 <HAL_TIM_PWM_Start+0x214>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <HAL_TIM_PWM_Start+0x218>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_TIM_PWM_Start+0x21c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_TIM_PWM_Start+0x200>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIM_PWM_Start+0x204>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x1b2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_TIM_PWM_Start+0x210>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d115      	bne.n	8004922 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_TIM_PWM_Start+0x220>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d015      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1f0>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d011      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	e008      	b.n	8004934 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e000      	b.n	8004936 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	40015000 	.word	0x40015000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e0ff      	b.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b14      	cmp	r3, #20
 8004992:	f200 80f0 	bhi.w	8004b76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	08004b77 	.word	0x08004b77
 80049a4:	08004b77 	.word	0x08004b77
 80049a8:	08004b77 	.word	0x08004b77
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004b77 	.word	0x08004b77
 80049b4:	08004b77 	.word	0x08004b77
 80049b8:	08004b77 	.word	0x08004b77
 80049bc:	08004a73 	.word	0x08004a73
 80049c0:	08004b77 	.word	0x08004b77
 80049c4:	08004b77 	.word	0x08004b77
 80049c8:	08004b77 	.word	0x08004b77
 80049cc:	08004ab3 	.word	0x08004ab3
 80049d0:	08004b77 	.word	0x08004b77
 80049d4:	08004b77 	.word	0x08004b77
 80049d8:	08004b77 	.word	0x08004b77
 80049dc:	08004af5 	.word	0x08004af5
 80049e0:	08004b77 	.word	0x08004b77
 80049e4:	08004b77 	.word	0x08004b77
 80049e8:	08004b77 	.word	0x08004b77
 80049ec:	08004b35 	.word	0x08004b35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa94 	bl	8004f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	619a      	str	r2, [r3, #24]
      break;
 8004a2e:	e0a5      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fb0e 	bl	8005058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	619a      	str	r2, [r3, #24]
      break;
 8004a70:	e084      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fb81 	bl	8005180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0208 	orr.w	r2, r2, #8
 8004a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0204 	bic.w	r2, r2, #4
 8004a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	61da      	str	r2, [r3, #28]
      break;
 8004ab0:	e064      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fbf3 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	61da      	str	r2, [r3, #28]
      break;
 8004af2:	e043      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc66 	bl	80053cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b32:	e023      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fcb0 	bl	80054a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b74:	e002      	b.n	8004b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop

08004b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_ConfigClockSource+0x1c>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0f6      	b.n	8004d9a <HAL_TIM_ConfigClockSource+0x20a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6f      	ldr	r2, [pc, #444]	; (8004da4 <HAL_TIM_ConfigClockSource+0x214>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f000 80c1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004bec:	4a6d      	ldr	r2, [pc, #436]	; (8004da4 <HAL_TIM_ConfigClockSource+0x214>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f200 80c6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <HAL_TIM_ConfigClockSource+0x218>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f000 80b9 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_TIM_ConfigClockSource+0x218>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	f200 80be 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c04:	4a69      	ldr	r2, [pc, #420]	; (8004dac <HAL_TIM_ConfigClockSource+0x21c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f000 80b1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c0c:	4a67      	ldr	r2, [pc, #412]	; (8004dac <HAL_TIM_ConfigClockSource+0x21c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	f200 80b6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c14:	4a66      	ldr	r2, [pc, #408]	; (8004db0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f000 80a9 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c1c:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f200 80ae 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c24:	4a63      	ldr	r2, [pc, #396]	; (8004db4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f000 80a1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c2c:	4a61      	ldr	r2, [pc, #388]	; (8004db4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f200 80a6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c34:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 8099 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f200 809e 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c48:	f000 8091 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c50:	f200 8096 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	f000 8089 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	f200 808e 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c68:	d03e      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x158>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	f200 8087 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	f000 8086 	beq.w	8004d86 <HAL_TIM_ConfigClockSource+0x1f6>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d87f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d01a      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x12a>
 8004c84:	2b70      	cmp	r3, #112	; 0x70
 8004c86:	d87b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d050      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x19e>
 8004c8c:	2b60      	cmp	r3, #96	; 0x60
 8004c8e:	d877      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	d03c      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x17e>
 8004c94:	2b50      	cmp	r3, #80	; 0x50
 8004c96:	d873      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d058      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x1be>
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d86f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d064      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004ca4:	2b30      	cmp	r3, #48	; 0x30
 8004ca6:	d86b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d060      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d867      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05c      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d05a      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cb8:	e062      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	f000 fcd1 	bl	8005670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
      break;
 8004ce6:	e04f      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf8:	f000 fcba 	bl	8005670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0a:	609a      	str	r2, [r3, #8]
      break;
 8004d0c:	e03c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 fc2c 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2150      	movs	r1, #80	; 0x50
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fc85 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e02c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 fc4b 	bl	80055d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2160      	movs	r1, #96	; 0x60
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fc75 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e01c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fc0c 	bl	8005578 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2140      	movs	r1, #64	; 0x40
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fc65 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e00c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 fc5c 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e003      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e000      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	00100070 	.word	0x00100070
 8004da8:	00100060 	.word	0x00100060
 8004dac:	00100050 	.word	0x00100050
 8004db0:	00100040 	.word	0x00100040
 8004db4:	00100030 	.word	0x00100030
 8004db8:	00100020 	.word	0x00100020

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a4c      	ldr	r2, [pc, #304]	; (8004f00 <TIM_Base_SetConfig+0x144>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d017      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d013      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a49      	ldr	r2, [pc, #292]	; (8004f04 <TIM_Base_SetConfig+0x148>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00f      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a48      	ldr	r2, [pc, #288]	; (8004f08 <TIM_Base_SetConfig+0x14c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00b      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a47      	ldr	r2, [pc, #284]	; (8004f0c <TIM_Base_SetConfig+0x150>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d007      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a46      	ldr	r2, [pc, #280]	; (8004f10 <TIM_Base_SetConfig+0x154>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0x48>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a45      	ldr	r2, [pc, #276]	; (8004f14 <TIM_Base_SetConfig+0x158>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a39      	ldr	r2, [pc, #228]	; (8004f00 <TIM_Base_SetConfig+0x144>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d023      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01f      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a36      	ldr	r2, [pc, #216]	; (8004f04 <TIM_Base_SetConfig+0x148>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01b      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a35      	ldr	r2, [pc, #212]	; (8004f08 <TIM_Base_SetConfig+0x14c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d017      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a34      	ldr	r2, [pc, #208]	; (8004f0c <TIM_Base_SetConfig+0x150>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <TIM_Base_SetConfig+0x154>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a33      	ldr	r2, [pc, #204]	; (8004f18 <TIM_Base_SetConfig+0x15c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a32      	ldr	r2, [pc, #200]	; (8004f1c <TIM_Base_SetConfig+0x160>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <TIM_Base_SetConfig+0x164>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <TIM_Base_SetConfig+0x158>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d108      	bne.n	8004e78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <TIM_Base_SetConfig+0x144>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <TIM_Base_SetConfig+0x110>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <TIM_Base_SetConfig+0x154>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x110>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <TIM_Base_SetConfig+0x15c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x110>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <TIM_Base_SetConfig+0x160>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x110>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <TIM_Base_SetConfig+0x164>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x110>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <TIM_Base_SetConfig+0x158>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d103      	bne.n	8004ed4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40013400 	.word	0x40013400
 8004f14:	40015000 	.word	0x40015000
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800

08004f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f023 0201 	bic.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 0302 	bic.w	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a30      	ldr	r2, [pc, #192]	; (8005040 <TIM_OC1_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_OC1_SetConfig+0x88>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <TIM_OC1_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00f      	beq.n	8004fac <TIM_OC1_SetConfig+0x88>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <TIM_OC1_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_OC1_SetConfig+0x88>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2d      	ldr	r2, [pc, #180]	; (800504c <TIM_OC1_SetConfig+0x128>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_OC1_SetConfig+0x88>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <TIM_OC1_SetConfig+0x12c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC1_SetConfig+0x88>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <TIM_OC1_SetConfig+0x130>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <TIM_OC1_SetConfig+0x11c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xd2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <TIM_OC1_SetConfig+0x120>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xd2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <TIM_OC1_SetConfig+0x124>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xd2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <TIM_OC1_SetConfig+0x128>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xd2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	; (8005050 <TIM_OC1_SetConfig+0x12c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC1_SetConfig+0xd2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <TIM_OC1_SetConfig+0x130>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800
 8005054:	40015000 	.word	0x40015000

08005058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0210 	bic.w	r2, r3, #16
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0320 	bic.w	r3, r3, #32
 80050a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <TIM_OC2_SetConfig+0x110>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_OC2_SetConfig+0x74>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a2b      	ldr	r2, [pc, #172]	; (800516c <TIM_OC2_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_OC2_SetConfig+0x74>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <TIM_OC2_SetConfig+0x118>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10d      	bne.n	80050e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <TIM_OC2_SetConfig+0x110>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_OC2_SetConfig+0xc0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <TIM_OC2_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_OC2_SetConfig+0xc0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <TIM_OC2_SetConfig+0x11c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_OC2_SetConfig+0xc0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <TIM_OC2_SetConfig+0x120>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_OC2_SetConfig+0xc0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <TIM_OC2_SetConfig+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC2_SetConfig+0xc0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a17      	ldr	r2, [pc, #92]	; (8005170 <TIM_OC2_SetConfig+0x118>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d113      	bne.n	8005140 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40013400 	.word	0x40013400
 8005170:	40015000 	.word	0x40015000
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800

08005180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a2b      	ldr	r2, [pc, #172]	; (800528c <TIM_OC3_SetConfig+0x10c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_OC3_SetConfig+0x72>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <TIM_OC3_SetConfig+0x110>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC3_SetConfig+0x72>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a29      	ldr	r2, [pc, #164]	; (8005294 <TIM_OC3_SetConfig+0x114>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10d      	bne.n	800520e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <TIM_OC3_SetConfig+0x10c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_OC3_SetConfig+0xbe>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <TIM_OC3_SetConfig+0x110>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_OC3_SetConfig+0xbe>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <TIM_OC3_SetConfig+0x118>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_OC3_SetConfig+0xbe>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_OC3_SetConfig+0x11c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_OC3_SetConfig+0xbe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <TIM_OC3_SetConfig+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_OC3_SetConfig+0xbe>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a16      	ldr	r2, [pc, #88]	; (8005294 <TIM_OC3_SetConfig+0x114>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d113      	bne.n	8005266 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40015000 	.word	0x40015000
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2c      	ldr	r2, [pc, #176]	; (80053b4 <TIM_OC4_SetConfig+0x110>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_OC4_SetConfig+0x74>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <TIM_OC4_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC4_SetConfig+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <TIM_OC4_SetConfig+0x118>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10d      	bne.n	8005334 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <TIM_OC4_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <TIM_OC4_SetConfig+0xc0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <TIM_OC4_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <TIM_OC4_SetConfig+0xc0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <TIM_OC4_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_OC4_SetConfig+0xc0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <TIM_OC4_SetConfig+0x120>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_OC4_SetConfig+0xc0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <TIM_OC4_SetConfig+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC4_SetConfig+0xc0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <TIM_OC4_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d113      	bne.n	800538c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005372:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <TIM_OC5_SetConfig+0xbc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <TIM_OC5_SetConfig+0xc0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00f      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <TIM_OC5_SetConfig+0xc4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00b      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a16      	ldr	r2, [pc, #88]	; (8005494 <TIM_OC5_SetConfig+0xc8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <TIM_OC5_SetConfig+0xcc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC5_SetConfig+0x82>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <TIM_OC5_SetConfig+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d109      	bne.n	8005462 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40015000 	.word	0x40015000

080054a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	051b      	lsls	r3, r3, #20
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <TIM_OC6_SetConfig+0xc0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a19      	ldr	r2, [pc, #100]	; (8005564 <TIM_OC6_SetConfig+0xc4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <TIM_OC6_SetConfig+0xc8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a17      	ldr	r2, [pc, #92]	; (800556c <TIM_OC6_SetConfig+0xcc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <TIM_OC6_SetConfig+0xd0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC6_SetConfig+0x84>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC6_SetConfig+0xd4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d109      	bne.n	8005538 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40014000 	.word	0x40014000
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800
 8005574:	40015000 	.word	0x40015000

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0210 	bic.w	r2, r3, #16
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	f043 0307 	orr.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e074      	b.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a34      	ldr	r2, [pc, #208]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a33      	ldr	r2, [pc, #204]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a31      	ldr	r2, [pc, #196]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005758:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a21      	ldr	r2, [pc, #132]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d01d      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1d      	ldr	r2, [pc, #116]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a15      	ldr	r2, [pc, #84]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a18      	ldr	r2, [pc, #96]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a11      	ldr	r2, [pc, #68]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10c      	bne.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40013400 	.word	0x40013400
 8005814:	40015000 	.word	0x40015000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e042      	b.n	80058c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fb fa87 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2224      	movs	r2, #36	; 0x24
 8005856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb24 	bl	8005ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f825 	bl	80058c8 <UART_SetConfig>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e01b      	b.n	80058c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fba3 	bl	8006004 <UART_CheckIdleState>
 80058be:	4603      	mov	r3, r0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b08c      	sub	sp, #48	; 0x30
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4baa      	ldr	r3, [pc, #680]	; (8005ba0 <UART_SetConfig+0x2d8>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a9f      	ldr	r2, [pc, #636]	; (8005ba4 <UART_SetConfig+0x2dc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005930:	4313      	orrs	r3, r2
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800593e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005948:	430b      	orrs	r3, r1
 800594a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	f023 010f 	bic.w	r1, r3, #15
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a90      	ldr	r2, [pc, #576]	; (8005ba8 <UART_SetConfig+0x2e0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d125      	bne.n	80059b8 <UART_SetConfig+0xf0>
 800596c:	4b8f      	ldr	r3, [pc, #572]	; (8005bac <UART_SetConfig+0x2e4>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d81a      	bhi.n	80059b0 <UART_SetConfig+0xe8>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0xb8>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005991 	.word	0x08005991
 8005984:	080059a1 	.word	0x080059a1
 8005988:	08005999 	.word	0x08005999
 800598c:	080059a9 	.word	0x080059a9
 8005990:	2301      	movs	r3, #1
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e116      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005998:	2302      	movs	r3, #2
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e112      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e10e      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ae:	e10a      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b6:	e106      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a7c      	ldr	r2, [pc, #496]	; (8005bb0 <UART_SetConfig+0x2e8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d138      	bne.n	8005a34 <UART_SetConfig+0x16c>
 80059c2:	4b7a      	ldr	r3, [pc, #488]	; (8005bac <UART_SetConfig+0x2e4>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d82d      	bhi.n	8005a2c <UART_SetConfig+0x164>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0x110>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005a2d 	.word	0x08005a2d
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a1d 	.word	0x08005a1d
 80059ec:	08005a2d 	.word	0x08005a2d
 80059f0:	08005a2d 	.word	0x08005a2d
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a2d 	.word	0x08005a2d
 8005a00:	08005a2d 	.word	0x08005a2d
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a25 	.word	0x08005a25
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e0d8      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e0d4      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e0d0      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e0cc      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e0c8      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d125      	bne.n	8005a8a <UART_SetConfig+0x1c2>
 8005a3e:	4b5b      	ldr	r3, [pc, #364]	; (8005bac <UART_SetConfig+0x2e4>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d016      	beq.n	8005a7a <UART_SetConfig+0x1b2>
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d818      	bhi.n	8005a82 <UART_SetConfig+0x1ba>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d00a      	beq.n	8005a6a <UART_SetConfig+0x1a2>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d814      	bhi.n	8005a82 <UART_SetConfig+0x1ba>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <UART_SetConfig+0x19a>
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d008      	beq.n	8005a72 <UART_SetConfig+0x1aa>
 8005a60:	e00f      	b.n	8005a82 <UART_SetConfig+0x1ba>
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a68:	e0ad      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a70:	e0a9      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a72:	2304      	movs	r3, #4
 8005a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a78:	e0a5      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a80:	e0a1      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a82:	2310      	movs	r3, #16
 8005a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a88:	e09d      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a4a      	ldr	r2, [pc, #296]	; (8005bb8 <UART_SetConfig+0x2f0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d125      	bne.n	8005ae0 <UART_SetConfig+0x218>
 8005a94:	4b45      	ldr	r3, [pc, #276]	; (8005bac <UART_SetConfig+0x2e4>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa0:	d016      	beq.n	8005ad0 <UART_SetConfig+0x208>
 8005aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa4:	d818      	bhi.n	8005ad8 <UART_SetConfig+0x210>
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d00a      	beq.n	8005ac0 <UART_SetConfig+0x1f8>
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d814      	bhi.n	8005ad8 <UART_SetConfig+0x210>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <UART_SetConfig+0x1f0>
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d008      	beq.n	8005ac8 <UART_SetConfig+0x200>
 8005ab6:	e00f      	b.n	8005ad8 <UART_SetConfig+0x210>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005abe:	e082      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac6:	e07e      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ace:	e07a      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ad6:	e076      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ade:	e072      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	; (8005bbc <UART_SetConfig+0x2f4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d12a      	bne.n	8005b40 <UART_SetConfig+0x278>
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <UART_SetConfig+0x2e4>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af8:	d01a      	beq.n	8005b30 <UART_SetConfig+0x268>
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005afe:	d81b      	bhi.n	8005b38 <UART_SetConfig+0x270>
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b04:	d00c      	beq.n	8005b20 <UART_SetConfig+0x258>
 8005b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0a:	d815      	bhi.n	8005b38 <UART_SetConfig+0x270>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <UART_SetConfig+0x250>
 8005b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b14:	d008      	beq.n	8005b28 <UART_SetConfig+0x260>
 8005b16:	e00f      	b.n	8005b38 <UART_SetConfig+0x270>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	e052      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b20:	2302      	movs	r3, #2
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b26:	e04e      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	e04a      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b36:	e046      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b3e:	e042      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <UART_SetConfig+0x2dc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d13a      	bne.n	8005bc0 <UART_SetConfig+0x2f8>
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <UART_SetConfig+0x2e4>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b58:	d01a      	beq.n	8005b90 <UART_SetConfig+0x2c8>
 8005b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b5e:	d81b      	bhi.n	8005b98 <UART_SetConfig+0x2d0>
 8005b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b64:	d00c      	beq.n	8005b80 <UART_SetConfig+0x2b8>
 8005b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6a:	d815      	bhi.n	8005b98 <UART_SetConfig+0x2d0>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <UART_SetConfig+0x2b0>
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d008      	beq.n	8005b88 <UART_SetConfig+0x2c0>
 8005b76:	e00f      	b.n	8005b98 <UART_SetConfig+0x2d0>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e022      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b80:	2302      	movs	r3, #2
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e01e      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	e01a      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b96:	e016      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9e:	e012      	b.n	8005bc6 <UART_SetConfig+0x2fe>
 8005ba0:	cfff69f3 	.word	0xcfff69f3
 8005ba4:	40008000 	.word	0x40008000
 8005ba8:	40013800 	.word	0x40013800
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40004400 	.word	0x40004400
 8005bb4:	40004800 	.word	0x40004800
 8005bb8:	40004c00 	.word	0x40004c00
 8005bbc:	40005000 	.word	0x40005000
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4aae      	ldr	r2, [pc, #696]	; (8005e84 <UART_SetConfig+0x5bc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	f040 8097 	bne.w	8005d00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d823      	bhi.n	8005c22 <UART_SetConfig+0x35a>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x318>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c23 	.word	0x08005c23
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c13 	.word	0x08005c13
 8005bf4:	08005c23 	.word	0x08005c23
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c23 	.word	0x08005c23
 8005c00:	08005c1b 	.word	0x08005c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe f9ac 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c0a:	e010      	b.n	8005c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c0c:	4b9e      	ldr	r3, [pc, #632]	; (8005e88 <UART_SetConfig+0x5c0>)
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c10:	e00d      	b.n	8005c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c12:	f7fe f937 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c18:	e009      	b.n	8005c2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c20:	e005      	b.n	8005c2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8130 	beq.w	8005e96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	4a94      	ldr	r2, [pc, #592]	; (8005e8c <UART_SetConfig+0x5c4>)
 8005c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4413      	add	r3, r2
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d305      	bcc.n	8005c66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d903      	bls.n	8005c6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c6c:	e113      	b.n	8005e96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2200      	movs	r2, #0
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	60fa      	str	r2, [r7, #12]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	4a84      	ldr	r2, [pc, #528]	; (8005e8c <UART_SetConfig+0x5c4>)
 8005c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2200      	movs	r2, #0
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c90:	f7fa fac2 	bl	8000218 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	020b      	lsls	r3, r1, #8
 8005ca6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005caa:	0202      	lsls	r2, r0, #8
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	6849      	ldr	r1, [r1, #4]
 8005cb0:	0849      	lsrs	r1, r1, #1
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	eb12 0804 	adds.w	r8, r2, r4
 8005cbc:	eb43 0905 	adc.w	r9, r3, r5
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	469a      	mov	sl, r3
 8005cc8:	4693      	mov	fp, r2
 8005cca:	4652      	mov	r2, sl
 8005ccc:	465b      	mov	r3, fp
 8005cce:	4640      	mov	r0, r8
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	f7fa faa1 	bl	8000218 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4613      	mov	r3, r2
 8005cdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce4:	d308      	bcc.n	8005cf8 <UART_SetConfig+0x430>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cec:	d204      	bcs.n	8005cf8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	e0ce      	b.n	8005e96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cfe:	e0ca      	b.n	8005e96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d08:	d166      	bne.n	8005dd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d827      	bhi.n	8005d62 <UART_SetConfig+0x49a>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <UART_SetConfig+0x450>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d3d 	.word	0x08005d3d
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d4d 	.word	0x08005d4d
 8005d24:	08005d63 	.word	0x08005d63
 8005d28:	08005d53 	.word	0x08005d53
 8005d2c:	08005d63 	.word	0x08005d63
 8005d30:	08005d63 	.word	0x08005d63
 8005d34:	08005d63 	.word	0x08005d63
 8005d38:	08005d5b 	.word	0x08005d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d3c:	f7fe f910 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d42:	e014      	b.n	8005d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fe f922 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8005d48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d4a:	e010      	b.n	8005d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d4c:	4b4e      	ldr	r3, [pc, #312]	; (8005e88 <UART_SetConfig+0x5c0>)
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d50:	e00d      	b.n	8005d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d52:	f7fe f897 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d58:	e009      	b.n	8005d6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d60:	e005      	b.n	8005d6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8090 	beq.w	8005e96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	4a44      	ldr	r2, [pc, #272]	; (8005e8c <UART_SetConfig+0x5c4>)
 8005d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d88:	005a      	lsls	r2, r3, #1
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	441a      	add	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b0f      	cmp	r3, #15
 8005da0:	d916      	bls.n	8005dd0 <UART_SetConfig+0x508>
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d212      	bcs.n	8005dd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f023 030f 	bic.w	r3, r3, #15
 8005db2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	8bfb      	ldrh	r3, [r7, #30]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	8bfa      	ldrh	r2, [r7, #30]
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	e062      	b.n	8005e96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dd6:	e05e      	b.n	8005e96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d828      	bhi.n	8005e32 <UART_SetConfig+0x56a>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x520>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e33 	.word	0x08005e33
 8005df8:	08005e23 	.word	0x08005e23
 8005dfc:	08005e33 	.word	0x08005e33
 8005e00:	08005e33 	.word	0x08005e33
 8005e04:	08005e33 	.word	0x08005e33
 8005e08:	08005e2b 	.word	0x08005e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0c:	f7fe f8a8 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e12:	e014      	b.n	8005e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e14:	f7fe f8ba 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8005e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e1a:	e010      	b.n	8005e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <UART_SetConfig+0x5c0>)
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e20:	e00d      	b.n	8005e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e22:	f7fe f82f 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e28:	e009      	b.n	8005e3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e30:	e005      	b.n	8005e3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d028      	beq.n	8005e96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <UART_SetConfig+0x5c4>)
 8005e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d910      	bls.n	8005e90 <UART_SetConfig+0x5c8>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d20c      	bcs.n	8005e90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	e009      	b.n	8005e96 <UART_SetConfig+0x5ce>
 8005e82:	bf00      	nop
 8005e84:	40008000 	.word	0x40008000
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	080065f8 	.word	0x080065f8
      }
      else
      {
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005eb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3730      	adds	r7, #48	; 0x30
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbe:	d10a      	bne.n	8005fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b098      	sub	sp, #96	; 0x60
 8006008:	af02      	add	r7, sp, #8
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006014:	f7fb f840 	bl	8001098 <HAL_GetTick>
 8006018:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b08      	cmp	r3, #8
 8006026:	d12f      	bne.n	8006088 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006030:	2200      	movs	r2, #0
 8006032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f88e 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d022      	beq.n	8006088 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006056:	653b      	str	r3, [r7, #80]	; 0x50
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
 8006062:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e6      	bne.n	8006042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e063      	b.n	8006150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d149      	bne.n	800612a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006096:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609e:	2200      	movs	r2, #0
 80060a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f857 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d03c      	beq.n	800612a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	623b      	str	r3, [r7, #32]
   return(result);
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
 80060d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006102:	61fa      	str	r2, [r7, #28]
 8006104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	69b9      	ldr	r1, [r7, #24]
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	617b      	str	r3, [r7, #20]
   return(result);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e012      	b.n	8006150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3758      	adds	r7, #88	; 0x58
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006168:	e04f      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d04b      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006172:	f7fa ff91 	bl	8001098 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <UART_WaitOnFlagUntilTimeout+0x30>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e04e      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d037      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d034      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d031      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d110      	bne.n	80061d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2208      	movs	r2, #8
 80061ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f838 	bl	8006232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2208      	movs	r2, #8
 80061c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e029      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e4:	d111      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f81e 	bl	8006232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e00f      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4013      	ands	r3, r2
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	bf0c      	ite	eq
 800621a:	2301      	moveq	r3, #1
 800621c:	2300      	movne	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	429a      	cmp	r2, r3
 8006226:	d0a0      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006232:	b480      	push	{r7}
 8006234:	b095      	sub	sp, #84	; 0x54
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
 800625a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800625e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	61fb      	str	r3, [r7, #28]
   return(result);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e3      	bne.n	800626c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d118      	bne.n	80062de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f023 0310 	bic.w	r3, r3, #16
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	69ba      	ldr	r2, [r7, #24]
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	613b      	str	r3, [r7, #16]
   return(result);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e6      	bne.n	80062ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062f2:	bf00      	nop
 80062f4:	3754      	adds	r7, #84	; 0x54
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_UARTEx_DisableFifoMode+0x16>
 8006310:	2302      	movs	r3, #2
 8006312:	e027      	b.n	8006364 <HAL_UARTEx_DisableFifoMode+0x66>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	; 0x24
 8006320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006342:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006384:	2302      	movs	r3, #2
 8006386:	e02d      	b.n	80063e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	; 0x24
 8006394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f84f 	bl	8006468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e02d      	b.n	8006460 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	; 0x24
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f811 	bl	8006468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006474:	2b00      	cmp	r3, #0
 8006476:	d108      	bne.n	800648a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006488:	e031      	b.n	80064ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800648a:	2308      	movs	r3, #8
 800648c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800648e:	2308      	movs	r3, #8
 8006490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	0e5b      	lsrs	r3, r3, #25
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	0f5b      	lsrs	r3, r3, #29
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	7b3a      	ldrb	r2, [r7, #12]
 80064b6:	4911      	ldr	r1, [pc, #68]	; (80064fc <UARTEx_SetNbDataToProcess+0x94>)
 80064b8:	5c8a      	ldrb	r2, [r1, r2]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064be:	7b3a      	ldrb	r2, [r7, #12]
 80064c0:	490f      	ldr	r1, [pc, #60]	; (8006500 <UARTEx_SetNbDataToProcess+0x98>)
 80064c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	7b7a      	ldrb	r2, [r7, #13]
 80064d4:	4909      	ldr	r1, [pc, #36]	; (80064fc <UARTEx_SetNbDataToProcess+0x94>)
 80064d6:	5c8a      	ldrb	r2, [r1, r2]
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064dc:	7b7a      	ldrb	r2, [r7, #13]
 80064de:	4908      	ldr	r1, [pc, #32]	; (8006500 <UARTEx_SetNbDataToProcess+0x98>)
 80064e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	08006610 	.word	0x08006610
 8006500:	08006618 	.word	0x08006618

08006504 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	ed93 7a06 	vldr	s14, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	edd3 7a07 	vldr	s15, [r3, #28]
 800651a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	edd3 7a08 	vldr	s15, [r3, #32]
 8006524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	edd3 7a06 	vldr	s15, [r3, #24]
 8006534:	eeb1 7a67 	vneg.f32	s14, s15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	edd3 7a08 	vldr	s15, [r3, #32]
 800653e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	330c      	adds	r3, #12
 800655e:	220c      	movs	r2, #12
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f804 	bl	8006570 <memset>
  }

}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <memset>:
 8006570:	4402      	add	r2, r0
 8006572:	4603      	mov	r3, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	d100      	bne.n	800657a <memset+0xa>
 8006578:	4770      	bx	lr
 800657a:	f803 1b01 	strb.w	r1, [r3], #1
 800657e:	e7f9      	b.n	8006574 <memset+0x4>

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4d0d      	ldr	r5, [pc, #52]	; (80065b8 <__libc_init_array+0x38>)
 8006584:	4c0d      	ldr	r4, [pc, #52]	; (80065bc <__libc_init_array+0x3c>)
 8006586:	1b64      	subs	r4, r4, r5
 8006588:	10a4      	asrs	r4, r4, #2
 800658a:	2600      	movs	r6, #0
 800658c:	42a6      	cmp	r6, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	4d0b      	ldr	r5, [pc, #44]	; (80065c0 <__libc_init_array+0x40>)
 8006592:	4c0c      	ldr	r4, [pc, #48]	; (80065c4 <__libc_init_array+0x44>)
 8006594:	f000 f818 	bl	80065c8 <_init>
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	2600      	movs	r6, #0
 800659e:	42a6      	cmp	r6, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a8:	4798      	blx	r3
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b2:	4798      	blx	r3
 80065b4:	3601      	adds	r6, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	08006628 	.word	0x08006628
 80065bc:	08006628 	.word	0x08006628
 80065c0:	08006628 	.word	0x08006628
 80065c4:	0800662c 	.word	0x0800662c

080065c8 <_init>:
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ca:	bf00      	nop
 80065cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ce:	bc08      	pop	{r3}
 80065d0:	469e      	mov	lr, r3
 80065d2:	4770      	bx	lr

080065d4 <_fini>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr
