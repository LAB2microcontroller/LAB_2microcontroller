
LAB_2_microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e54  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b8  080090b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090bc  080090bc  000190bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080090c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000060  08009120  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08009120  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001863b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd0  00000000  00000000  0003870e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001090  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000292c9  00000000  00000000  0003daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fe9  00000000  00000000  00066d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114c2e  00000000  00000000  0007fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061f8  00000000  00000000  00194988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0019ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800901c 	.word	0x0800901c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800901c 	.word	0x0800901c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f001 fa57 	bl	80022ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f880 	bl	8000f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 fb7e 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e08:	f000 fb52 	bl	80014b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e0c:	f000 f94e 	bl	80010ac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e10:	f000 f8c4 	bl	8000f9c <MX_ADC1_Init>
  MX_TIM5_Init();
 8000e14:	f000 fafe 	bl	8001414 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000e18:	f000 f9de 	bl	80011d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e1c:	f000 f990 	bl	8001140 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e20:	f000 faa2 	bl	8001368 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000e24:	213c      	movs	r1, #60	; 0x3c
 8000e26:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <main+0xd8>)
 8000e28:	f005 fae2 	bl	80063f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000e2c:	4829      	ldr	r0, [pc, #164]	; (8000ed4 <main+0xdc>)
 8000e2e:	f005 f84d 	bl	8005ecc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e32:	2100      	movs	r1, #0
 8000e34:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <main+0xe0>)
 8000e36:	f005 f923 	bl	8006080 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000e3a:	217f      	movs	r1, #127	; 0x7f
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <main+0xe4>)
 8000e3e:	f003 f863 	bl	8003f08 <HAL_ADCEx_Calibration_Start>
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000e42:	220a      	movs	r2, #10
 8000e44:	4926      	ldr	r1, [pc, #152]	; (8000ee0 <main+0xe8>)
 8000e46:	4825      	ldr	r0, [pc, #148]	; (8000edc <main+0xe4>)
 8000e48:	f001 fee6 	bl	8002c18 <HAL_ADC_Start_DMA>

  PID.Kp = 0.001;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <main+0xec>)
 8000e4e:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <main+0xf0>)
 8000e50:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <main+0xec>)
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <main+0xec>)
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <main+0xec>)
 8000e66:	f007 fbff 	bl	8008668 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <main+0xe0>)
 8000e6c:	f004 ffbe 	bl	8005dec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e70:	2104      	movs	r1, #4
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <main+0xe0>)
 8000e74:	f005 f904 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <main+0xe0>)
 8000e7c:	f005 f900 	bl	8006080 <HAL_TIM_PWM_Start>
  ///////UART///////

//  uint8_t text[] = "Hello World";
  HAL_UART_Transmit(&huart1, str , len, 10 );
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <main+0xf4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <main+0xf8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <main+0xfc>)
 8000e90:	f006 fd3e 	bl	8007910 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Average_ADC_Value();
 8000e94:	f000 fdda 	bl	8001a4c <Average_ADC_Value>
	  led2();
 8000e98:	f000 fbdc 	bl	8001654 <led2>
	  if(mode == 1){
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <main+0x100>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <main+0xb0>
		  LAB2PART1();
 8000ea4:	f000 fc00 	bl	80016a8 <LAB2PART1>
	  }
	  if(mode == 2){
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <main+0x100>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d101      	bne.n	8000eb4 <main+0xbc>
		  LAB2PART2();
 8000eb0:	f000 fcf0 	bl	8001894 <LAB2PART2>
	  }
	  else
	  	  {}
	  //////UART/////
	  sprintf( str, "%I32u", avg_adc1 );   /// uint to char ///
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <main+0xf4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <main+0x104>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	490f      	ldr	r1, [pc, #60]	; (8000f00 <main+0x108>)
 8000ec2:	f007 fc07 	bl	80086d4 <siprintf>
	  len = sizeof(str);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <main+0xf8>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
  {
 8000ecc:	e7e2      	b.n	8000e94 <main+0x9c>
 8000ece:	bf00      	nop
 8000ed0:	200002bc 	.word	0x200002bc
 8000ed4:	20000308 	.word	0x20000308
 8000ed8:	20000270 	.word	0x20000270
 8000edc:	2000007c 	.word	0x2000007c
 8000ee0:	20000354 	.word	0x20000354
 8000ee4:	20000380 	.word	0x20000380
 8000ee8:	3a83126f 	.word	0x3a83126f
 8000eec:	200003c0 	.word	0x200003c0
 8000ef0:	200003bc 	.word	0x200003bc
 8000ef4:	200001dc 	.word	0x200001dc
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000368 	.word	0x20000368
 8000f00:	08009034 	.word	0x08009034

08000f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	; 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2238      	movs	r2, #56	; 0x38
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fbfe 	bl	8008714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f003 fed8 	bl	8004cdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f46:	2355      	movs	r3, #85	; 0x55
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 ff72 	bl	8004e44 <HAL_RCC_OscConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f66:	f000 fee1 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2104      	movs	r1, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fa70 	bl	8005468 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f8e:	f000 fecd 	bl	8001d2c <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	; 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fbad 	bl	8008714 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0x104>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_ADC1_Init+0x104>)
 800100a:	2200      	movs	r2, #0
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001018:	2200      	movs	r2, #0
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_ADC1_Init+0x104>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001024:	481e      	ldr	r0, [pc, #120]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001026:	f001 fc3b 	bl	80028a0 <HAL_ADC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001030:	f000 fe7c 	bl	8001d2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4818      	ldr	r0, [pc, #96]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001040:	f002 fff6 	bl	8004030 <HAL_ADCEx_MultiModeConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800104a:	f000 fe6f 	bl	8001d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_ADC1_Init+0x108>)
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001052:	2306      	movs	r3, #6
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001056:	2307      	movs	r3, #7
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105a:	237f      	movs	r3, #127	; 0x7f
 800105c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105e:	2304      	movs	r3, #4
 8001060:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_ADC1_Init+0x104>)
 800106c:	f002 f930 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001076:	f000 fe59 	bl	8001d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_ADC1_Init+0x10c>)
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107e:	230c      	movs	r3, #12
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0x104>)
 8001088:	f002 f922 	bl	80032d0 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001092:	f000 fe4b 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000007c 	.word	0x2000007c
 80010a4:	04300002 	.word	0x04300002
 80010a8:	08600004 	.word	0x08600004

080010ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <MX_LPUART1_UART_Init+0x90>)
 80010b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 80010f0:	f006 fbbe 	bl	8007870 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 fe17 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 8001102:	f007 f9e7 	bl	80084d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800110c:	f000 fe0e 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 8001114:	f007 fa1c 	bl	8008550 <HAL_UARTEx_SetRxFifoThreshold>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800111e:	f000 fe05 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_LPUART1_UART_Init+0x8c>)
 8001124:	f007 f99d 	bl	8008462 <HAL_UARTEx_DisableFifoMode>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800112e:	f000 fdfd 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000148 	.word	0x20000148
 800113c:	40008000 	.word	0x40008000

08001140 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_USART1_UART_Init+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800118a:	f006 fb71 	bl	8007870 <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 fdca 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 800119c:	f007 f99a 	bl	80084d4 <HAL_UARTEx_SetTxFifoThreshold>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011a6:	f000 fdc1 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 80011ae:	f007 f9cf 	bl	8008550 <HAL_UARTEx_SetRxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 fdb8 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_USART1_UART_Init+0x90>)
 80011be:	f007 f950 	bl	8008462 <HAL_UARTEx_DisableFifoMode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 fdb0 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001dc 	.word	0x200001dc
 80011d4:	40013800 	.word	0x40013800

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09c      	sub	sp, #112	; 0x70
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2234      	movs	r2, #52	; 0x34
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fa7e 	bl	8008714 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b51      	ldr	r3, [pc, #324]	; (8001360 <MX_TIM1_Init+0x188>)
 800121a:	4a52      	ldr	r2, [pc, #328]	; (8001364 <MX_TIM1_Init+0x18c>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <MX_TIM1_Init+0x188>)
 8001220:	22a9      	movs	r2, #169	; 0xa9
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MX_TIM1_Init+0x188>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <MX_TIM1_Init+0x188>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <MX_TIM1_Init+0x188>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b49      	ldr	r3, [pc, #292]	; (8001360 <MX_TIM1_Init+0x188>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <MX_TIM1_Init+0x188>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001244:	4846      	ldr	r0, [pc, #280]	; (8001360 <MX_TIM1_Init+0x188>)
 8001246:	f004 fd79 	bl	8005d3c <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001250:	f000 fd6c 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800125e:	4619      	mov	r1, r3
 8001260:	483f      	ldr	r0, [pc, #252]	; (8001360 <MX_TIM1_Init+0x188>)
 8001262:	f005 fbb7 	bl	80069d4 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800126c:	f000 fd5e 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001270:	483b      	ldr	r0, [pc, #236]	; (8001360 <MX_TIM1_Init+0x188>)
 8001272:	f004 fea3 	bl	8005fbc <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800127c:	f000 fd56 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800128c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001290:	4619      	mov	r1, r3
 8001292:	4833      	ldr	r0, [pc, #204]	; (8001360 <MX_TIM1_Init+0x188>)
 8001294:	f006 f97c 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800129e:	f000 fd45 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ae:	2300      	movs	r3, #0
 80012b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	4826      	ldr	r0, [pc, #152]	; (8001360 <MX_TIM1_Init+0x188>)
 80012c8:	f005 fa70 	bl	80067ac <HAL_TIM_PWM_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012d2:	f000 fd2b 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012da:	2204      	movs	r2, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	4820      	ldr	r0, [pc, #128]	; (8001360 <MX_TIM1_Init+0x188>)
 80012e0:	f005 fa64 	bl	80067ac <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012ea:	f000 fd1f 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f2:	2208      	movs	r2, #8
 80012f4:	4619      	mov	r1, r3
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <MX_TIM1_Init+0x188>)
 80012f8:	f005 fa58 	bl	80067ac <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001302:	f000 fd13 	bl	8001d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800132c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM1_Init+0x188>)
 8001344:	f006 f9ba 	bl	80076bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800134e:	f000 fced 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM1_Init+0x188>)
 8001354:	f000 feb2 	bl	80020bc <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3770      	adds	r7, #112	; 0x70
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000270 	.word	0x20000270
 8001364:	40012c00 	.word	0x40012c00

08001368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f9cc 	bl	8008714 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_TIM3_Init+0xa4>)
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <MX_TIM3_Init+0xa8>)
 800138a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_TIM3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_TIM3_Init+0xa4>)
 800139a:	f640 32ff 	movw	r2, #3071	; 0xbff
 800139e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM3_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_TIM3_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ac:	2303      	movs	r3, #3
 80013ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_TIM3_Init+0xa4>)
 80013d8:	f004 ff64 	bl	80062a4 <HAL_TIM_Encoder_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013e2:	f000 fca3 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_TIM3_Init+0xa4>)
 80013f4:	f006 f8cc 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013fe:	f000 fc95 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002bc 	.word	0x200002bc
 8001410:	40000400 	.word	0x40000400

08001414 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <MX_TIM5_Init+0x98>)
 8001436:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_TIM5_Init+0x94>)
 800143a:	22a9      	movs	r2, #169	; 0xa9
 800143c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800144a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM5_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_TIM5_Init+0x94>)
 800145a:	f004 fc6f 	bl	8005d3c <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001464:	f000 fc62 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001476:	f005 faad 	bl	80069d4 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 fc54 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM5_Init+0x94>)
 8001492:	f006 f87d 	bl	8007590 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800149c:	f000 fc46 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000308 	.word	0x20000308
 80014ac:	40000c00 	.word	0x40000c00

080014b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_DMA_Init+0x50>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <MX_DMA_Init+0x50>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6493      	str	r3, [r2, #72]	; 0x48
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_DMA_Init+0x50>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_DMA_Init+0x50>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <MX_DMA_Init+0x50>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	; 0x48
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_DMA_Init+0x50>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	200b      	movs	r0, #11
 80014ec:	f002 ff83 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f002 ff9a 	bl	800442a <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <MX_GPIO_Init+0xfc>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a38      	ldr	r2, [pc, #224]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MX_GPIO_Init+0xfc>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a26      	ldr	r2, [pc, #152]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <MX_GPIO_Init+0xfc>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2120      	movs	r1, #32
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f003 fb61 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2130      	movs	r1, #48	; 0x30
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <MX_GPIO_Init+0x100>)
 800158c:	f003 fb5c 	bl	8004c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001596:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_GPIO_Init+0x104>)
 80015a8:	f003 f9cc 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ac:	2320      	movs	r3, #32
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f003 f9bd 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ca:	2330      	movs	r3, #48	; 0x30
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_GPIO_Init+0x100>)
 80015e2:	f003 f9af 	bl	8004944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f002 ff03 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f0:	2028      	movs	r0, #40	; 0x28
 80015f2:	f002 ff1a 	bl	800442a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800

0800160c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161c:	d112      	bne.n	8001644 <HAL_GPIO_EXTI_Callback+0x38>
		if (mode == 1){
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_GPIO_EXTI_Callback+0x44>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d103      	bne.n	800162e <HAL_GPIO_EXTI_Callback+0x22>
				mode = 2;
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_GPIO_EXTI_Callback+0x44>)
 8001628:	2202      	movs	r2, #2
 800162a:	801a      	strh	r2, [r3, #0]
		else {
				mode = 1;

			}
		}
}
 800162c:	e00a      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x38>
		else if (mode == 2){
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_GPIO_EXTI_Callback+0x44>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d103      	bne.n	800163e <HAL_GPIO_EXTI_Callback+0x32>
				mode = 3;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_GPIO_EXTI_Callback+0x44>)
 8001638:	2203      	movs	r2, #3
 800163a:	801a      	strh	r2, [r3, #0]
}
 800163c:	e002      	b.n	8001644 <HAL_GPIO_EXTI_Callback+0x38>
				mode = 1;
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_GPIO_EXTI_Callback+0x44>)
 8001640:	2201      	movs	r2, #1
 8001642:	801a      	strh	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000000 	.word	0x20000000

08001654 <led2>:
void led2(){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if (mode == 1){
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <led2+0x50>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <led2+0x1a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f003 faee 	bl	8004c48 <HAL_GPIO_WritePin>
	}
	else if (mode == 3) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}
}
 800166c:	e017      	b.n	800169e <led2+0x4a>
	else if (mode == 2){
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <led2+0x50>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d106      	bne.n	8001684 <led2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2120      	movs	r1, #32
 800167a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167e:	f003 fae3 	bl	8004c48 <HAL_GPIO_WritePin>
}
 8001682:	e00c      	b.n	800169e <led2+0x4a>
	else if (mode == 3) {
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <led2+0x50>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d108      	bne.n	800169e <led2+0x4a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800168c:	2120      	movs	r1, #32
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f003 faf1 	bl	8004c78 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800169a:	f000 fe79 	bl	8002390 <HAL_Delay>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000

080016a8 <LAB2PART1>:
void LAB2PART1(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	if(Vfeedback > 1){
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <LAB2PART1+0x1c8>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dd4d      	ble.n	800175c <LAB2PART1+0xb4>
		 		  setSpd = (Vfeedback/360)*(1000-600)+600;
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <LAB2PART1+0x1c8>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001874 <LAB2PART1+0x1cc>
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001878 <LAB2PART1+0x1d0>
 80016d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800187c <LAB2PART1+0x1d4>
 80016da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016de:	4b68      	ldr	r3, [pc, #416]	; (8001880 <LAB2PART1+0x1d8>)
 80016e0:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < 180){
 80016e4:	4b62      	ldr	r3, [pc, #392]	; (8001870 <LAB2PART1+0x1c8>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001884 <LAB2PART1+0x1dc>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d513      	bpl.n	8001720 <LAB2PART1+0x78>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2110      	movs	r1, #16
 80016fc:	4862      	ldr	r0, [pc, #392]	; (8001888 <LAB2PART1+0x1e0>)
 80016fe:	f003 faa3 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2120      	movs	r1, #32
 8001706:	4860      	ldr	r0, [pc, #384]	; (8001888 <LAB2PART1+0x1e0>)
 8001708:	f003 fa9e 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 800170c:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <LAB2PART1+0x1d8>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <LAB2PART1+0x1e4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171a:	ee17 2a90 	vmov	r2, s15
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > 180){
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <LAB2PART1+0x1c8>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001884 <LAB2PART1+0x1dc>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	dd13      	ble.n	800175c <LAB2PART1+0xb4>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2110      	movs	r1, #16
 8001738:	4853      	ldr	r0, [pc, #332]	; (8001888 <LAB2PART1+0x1e0>)
 800173a:	f003 fa85 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2120      	movs	r1, #32
 8001742:	4851      	ldr	r0, [pc, #324]	; (8001888 <LAB2PART1+0x1e0>)
 8001744:	f003 fa80 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <LAB2PART1+0x1d8>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	4b4f      	ldr	r3, [pc, #316]	; (800188c <LAB2PART1+0x1e4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001756:	ee17 2a90 	vmov	r2, s15
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < -1){
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <LAB2PART1+0x1c8>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d54f      	bpl.n	8001810 <LAB2PART1+0x168>
		 		  setSpd = (-Vfeedback/360)*(1000-600)+600;
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <LAB2PART1+0x1c8>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb1 7a67 	vneg.f32	s14, s15
 800177a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001874 <LAB2PART1+0x1cc>
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001878 <LAB2PART1+0x1d0>
 8001786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800187c <LAB2PART1+0x1d4>
 800178e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <LAB2PART1+0x1d8>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < -180){
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <LAB2PART1+0x1c8>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001890 <LAB2PART1+0x1e8>
 80017a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	d513      	bpl.n	80017d4 <LAB2PART1+0x12c>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2110      	movs	r1, #16
 80017b0:	4835      	ldr	r0, [pc, #212]	; (8001888 <LAB2PART1+0x1e0>)
 80017b2:	f003 fa49 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2120      	movs	r1, #32
 80017ba:	4833      	ldr	r0, [pc, #204]	; (8001888 <LAB2PART1+0x1e0>)
 80017bc:	f003 fa44 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <LAB2PART1+0x1d8>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <LAB2PART1+0x1e4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ce:	ee17 2a90 	vmov	r2, s15
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > -180){
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <LAB2PART1+0x1c8>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001890 <LAB2PART1+0x1e8>
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	dd13      	ble.n	8001810 <LAB2PART1+0x168>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2110      	movs	r1, #16
 80017ec:	4826      	ldr	r0, [pc, #152]	; (8001888 <LAB2PART1+0x1e0>)
 80017ee:	f003 fa2b 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	4824      	ldr	r0, [pc, #144]	; (8001888 <LAB2PART1+0x1e0>)
 80017f8:	f003 fa26 	bl	8004c48 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <LAB2PART1+0x1d8>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <LAB2PART1+0x1e4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180a:	ee17 2a90 	vmov	r2, s15
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < 1 && Vfeedback > -1)
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <LAB2PART1+0x1c8>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d400      	bmi.n	8001826 <LAB2PART1+0x17e>
		 		  setSpd = 0;
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
		 	  }
}
 8001824:	e022      	b.n	800186c <LAB2PART1+0x1c4>
	if(Vfeedback < 1 && Vfeedback > -1)
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <LAB2PART1+0x1c8>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	dc00      	bgt.n	800183c <LAB2PART1+0x194>
}
 800183a:	e017      	b.n	800186c <LAB2PART1+0x1c4>
		 		  setSpd = 0;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <LAB2PART1+0x1d8>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <LAB2PART1+0x1e0>)
 800184a:	f003 f9fd 	bl	8004c48 <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <LAB2PART1+0x1e0>)
 8001854:	f003 f9f8 	bl	8004c48 <HAL_GPIO_WritePin>
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <LAB2PART1+0x1d8>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <LAB2PART1+0x1e4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001866:	ee17 2a90 	vmov	r2, s15
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200003b0 	.word	0x200003b0
 8001874:	43b40000 	.word	0x43b40000
 8001878:	43c80000 	.word	0x43c80000
 800187c:	44160000 	.word	0x44160000
 8001880:	200003b8 	.word	0x200003b8
 8001884:	43340000 	.word	0x43340000
 8001888:	48000400 	.word	0x48000400
 800188c:	20000270 	.word	0x20000270
 8001890:	c3340000 	.word	0xc3340000

08001894 <LAB2PART2>:
void LAB2PART2(){
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

	avg_adc_part2=avg_adc1;
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <LAB2PART2+0x190>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a62      	ldr	r2, [pc, #392]	; (8001a28 <LAB2PART2+0x194>)
 800189e:	6013      	str	r3, [r2, #0]
	if(Vfeedback2 > 1){
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <LAB2PART2+0x198>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	dd41      	ble.n	8001938 <LAB2PART2+0xa4>
		 		  setSpd = (Vfeedback2/360)*(1000-100)+100;
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <LAB2PART2+0x198>)
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001a30 <LAB2PART2+0x19c>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001a34 <LAB2PART2+0x1a0>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ca:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001a38 <LAB2PART2+0x1a4>
 80018ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d2:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <LAB2PART2+0x1a8>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < 180){
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <LAB2PART2+0x198>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001a40 <LAB2PART2+0x1ac>
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d50d      	bpl.n	8001908 <LAB2PART2+0x74>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <LAB2PART2+0x1a8>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <LAB2PART2+0x1b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fa:	ee17 2a90 	vmov	r2, s15
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <LAB2PART2+0x1b0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > 180){
 8001908:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <LAB2PART2+0x198>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a40 <LAB2PART2+0x1ac>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	dd0d      	ble.n	8001938 <LAB2PART2+0xa4>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800191c:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <LAB2PART2+0x1b0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2200      	movs	r2, #0
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <LAB2PART2+0x1a8>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <LAB2PART2+0x1b0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001932:	ee17 2a90 	vmov	r2, s15
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < -1){
 8001938:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <LAB2PART2+0x198>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	d543      	bpl.n	80019d4 <LAB2PART2+0x140>
		 		  setSpd = (-Vfeedback2/360)*(1000-100)+100;
 800194c:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <LAB2PART2+0x198>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb1 7a67 	vneg.f32	s14, s15
 8001956:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001a30 <LAB2PART2+0x19c>
 800195a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001a34 <LAB2PART2+0x1a0>
 8001962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001966:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a38 <LAB2PART2+0x1a4>
 800196a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <LAB2PART2+0x1a8>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < -180){
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <LAB2PART2+0x198>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a48 <LAB2PART2+0x1b4>
 800197e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	d50d      	bpl.n	80019a4 <LAB2PART2+0x110>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <LAB2PART2+0x1a8>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <LAB2PART2+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001996:	ee17 2a90 	vmov	r2, s15
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <LAB2PART2+0x1b0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2200      	movs	r2, #0
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > -180){
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <LAB2PART2+0x198>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001a48 <LAB2PART2+0x1b4>
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	dd0d      	ble.n	80019d4 <LAB2PART2+0x140>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <LAB2PART2+0x1b0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <LAB2PART2+0x1a8>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <LAB2PART2+0x1b0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ce:	ee17 2a90 	vmov	r2, s15
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <LAB2PART2+0x198>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d400      	bmi.n	80019ea <LAB2PART2+0x156>
		 	  {
		 		  setSpd = 0;
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		 	  }
}
 80019e8:	e016      	b.n	8001a18 <LAB2PART2+0x184>
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <LAB2PART2+0x198>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	dc00      	bgt.n	8001a00 <LAB2PART2+0x16c>
}
 80019fe:	e00b      	b.n	8001a18 <LAB2PART2+0x184>
		 		  setSpd = 0;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <LAB2PART2+0x1a8>)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <LAB2PART2+0x1b0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <LAB2PART2+0x1b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000368 	.word	0x20000368
 8001a28:	20000370 	.word	0x20000370
 8001a2c:	200003b4 	.word	0x200003b4
 8001a30:	43b40000 	.word	0x43b40000
 8001a34:	44610000 	.word	0x44610000
 8001a38:	42c80000 	.word	0x42c80000
 8001a3c:	200003b8 	.word	0x200003b8
 8001a40:	43340000 	.word	0x43340000
 8001a44:	20000270 	.word	0x20000270
 8001a48:	c3340000 	.word	0xc3340000

08001a4c <Average_ADC_Value>:

void Average_ADC_Value() {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
    uint32_t sum_adc1 = 0, sum_adc2 = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e015      	b.n	8001a8c <Average_ADC_Value+0x40>
        sum_adc1 += ADC_RawRead[i*2];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <Average_ADC_Value+0x70>)
 8001a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
        sum_adc2 += ADC_RawRead[i*2+1];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a10      	ldr	r2, [pc, #64]	; (8001abc <Average_ADC_Value+0x70>)
 8001a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d9e6      	bls.n	8001a60 <Average_ADC_Value+0x14>
//        sum_adc3 += ADC_RawRead[i*3+2];
    }
    avg_adc1 = sum_adc1 / 5;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <Average_ADC_Value+0x74>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <Average_ADC_Value+0x78>)
 8001a9e:	6013      	str	r3, [r2, #0]
    avg_adc2 = sum_adc2 / 5;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <Average_ADC_Value+0x74>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <Average_ADC_Value+0x7c>)
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000354 	.word	0x20000354
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	20000368 	.word	0x20000368
 8001ac8:	2000036c 	.word	0x2000036c
 8001acc:	00000000 	.word	0x00000000

08001ad0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if (htim == &htim5 )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a83      	ldr	r2, [pc, #524]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f040 80fb 	bne.w	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x208>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001ae2:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	4a81      	ldr	r2, [pc, #516]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001aea:	6013      	str	r3, [r2, #0]
	  ADCReadRaw = (avg_adc2/4095.0)*360.0;
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd27 	bl	8000544 <__aeabi_ui2d>
 8001af6:	a37a      	add	r3, pc, #488	; (adr r3, 8001ce0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fec6 	bl	800088c <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b0e:	f7fe fd93 	bl	8000638 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ff9f 	bl	8000a5c <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a76      	ldr	r2, [pc, #472]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001b22:	6013      	str	r3, [r2, #0]
	  set_pos = (avg_adc1/4095.0)*360.0;
 8001b24:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd0b 	bl	8000544 <__aeabi_ui2d>
 8001b2e:	a36c      	add	r3, pc, #432	; (adr r3, 8001ce0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe feaa 	bl	800088c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b46:	f7fe fd77 	bl	8000638 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ff83 	bl	8000a5c <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001b5a:	6013      	str	r3, [r2, #0]
	  pos = ADCReadRaw;
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a69      	ldr	r2, [pc, #420]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001b62:	6013      	str	r3, [r2, #0]

	  set_pos_part2 = (avg_adc_part2/4095.0)*360.0;
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fceb 	bl	8000544 <__aeabi_ui2d>
 8001b6e:	a35c      	add	r3, pc, #368	; (adr r3, 8001ce0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fe8a 	bl	800088c <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001b86:	f7fe fd57 	bl	8000638 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7fe ff63 	bl	8000a5c <__aeabi_d2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a5d      	ldr	r2, [pc, #372]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001b9a:	6013      	str	r3, [r2, #0]
	  angle_part2 =(QEIReadRaw/3072.0)*360.0;
 8001b9c:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fccf 	bl	8000544 <__aeabi_ui2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001bac:	f7fe fe6e 	bl	800088c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001bbe:	f7fe fd3b 	bl	8000638 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ff47 	bl	8000a5c <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001bd2:	6013      	str	r3, [r2, #0]

	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos)*1000);
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001d20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	  Vfeedback2 = (arm_pid_f32(&PID, set_pos_part2 - angle_part2)*1000);
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	edc7 7a06 	vstr	s15, [r7, #24]
    out = (S->A0 * in) +
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	615a      	str	r2, [r3, #20]
    return (out);
 8001cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d20 <HAL_TIM_PeriodElapsedCallback+0x250>
 8001cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40affe00 	.word	0x40affe00
 8001ce8:	20000308 	.word	0x20000308
 8001cec:	200002bc 	.word	0x200002bc
 8001cf0:	20000374 	.word	0x20000374
 8001cf4:	2000036c 	.word	0x2000036c
 8001cf8:	40768000 	.word	0x40768000
 8001cfc:	200003a4 	.word	0x200003a4
 8001d00:	20000368 	.word	0x20000368
 8001d04:	200003ac 	.word	0x200003ac
 8001d08:	200003a8 	.word	0x200003a8
 8001d0c:	20000370 	.word	0x20000370
 8001d10:	2000037c 	.word	0x2000037c
 8001d14:	40a80000 	.word	0x40a80000
 8001d18:	20000378 	.word	0x20000378
 8001d1c:	20000380 	.word	0x20000380
 8001d20:	447a0000 	.word	0x447a0000
 8001d24:	200003b0 	.word	0x200003b0
 8001d28:	200003b4 	.word	0x200003b4

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d6e:	f003 f859 	bl	8004e24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09e      	sub	sp, #120	; 0x78
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	2254      	movs	r2, #84	; 0x54
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f006 fcb7 	bl	8008714 <memset>
  if(hadc->Instance==ADC1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dae:	d167      	bne.n	8001e80 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001db6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dba:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fd6d 	bl	80058a0 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001dcc:	f7ff ffae 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001dd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dec:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_ADC_MspInit+0x108>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e00:	2303      	movs	r3, #3
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e16:	f002 fd95 	bl	8004944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_ADC_MspInit+0x110>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e22:	2205      	movs	r2, #5
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e56:	f002 fb03 	bl	8004460 <HAL_DMA_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001e60:	f7ff ff64 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_ADC_MspInit+0x10c>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2012      	movs	r0, #18
 8001e76:	f002 fabe 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e7a:	2012      	movs	r0, #18
 8001e7c:	f002 fad5 	bl	800442a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3778      	adds	r7, #120	; 0x78
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	200000e8 	.word	0x200000e8
 8001e90:	40020008 	.word	0x40020008

08001e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0a0      	sub	sp, #128	; 0x80
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	2254      	movs	r2, #84	; 0x54
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 fc2d 	bl	8008714 <memset>
  if(huart->Instance==LPUART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_UART_MspInit+0x120>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d137      	bne.n	8001f34 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fce5 	bl	80058a0 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001edc:	f7ff ff26 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001f10:	230c      	movs	r3, #12
 8001f12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f20:	230c      	movs	r3, #12
 8001f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2e:	f002 fd09 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f32:	e03a      	b.n	8001faa <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_UART_MspInit+0x128>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d135      	bne.n	8001faa <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fca8 	bl	80058a0 <HAL_RCCEx_PeriphCLKConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001f56:	f7ff fee9 	bl	8001d2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6613      	str	r3, [r2, #96]	; 0x60
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_UART_MspInit+0x124>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f8a:	2330      	movs	r3, #48	; 0x30
 8001f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_UART_MspInit+0x12c>)
 8001fa6:	f002 fccd 	bl	8004944 <HAL_GPIO_Init>
}
 8001faa:	bf00      	nop
 8001fac:	3780      	adds	r7, #128	; 0x80
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40008000 	.word	0x40008000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	48000800 	.word	0x48000800

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_TIM_Base_MspInit+0x68>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8001fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fee:	e018      	b.n	8002022 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_TIM_Base_MspInit+0x70>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d113      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_TIM_Base_MspInit+0x6c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2032      	movs	r0, #50	; 0x32
 8002018:	f002 f9ed 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800201c:	2032      	movs	r0, #50	; 0x32
 800201e:	f002 fa04 	bl	800442a <HAL_NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40021000 	.word	0x40021000
 8002034:	40000c00 	.word	0x40000c00

08002038 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d128      	bne.n	80020ac <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800209a:	2302      	movs	r3, #2
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a8:	f002 fc4c 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d11b      	bne.n	8002116 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_TIM_MspPostInit+0x68>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80020f6:	2307      	movs	r3, #7
 80020f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002106:	2302      	movs	r3, #2
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <HAL_TIM_MspPostInit+0x6c>)
 8002112:	f002 fc17 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40021000 	.word	0x40021000
 8002128:	48000800 	.word	0x48000800

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002178:	f000 f8ec 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <DMA1_Channel1_IRQHandler+0x10>)
 8002186:	f002 fa8e 	bl	80046a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200000e8 	.word	0x200000e8

08002194 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <ADC1_2_IRQHandler+0x10>)
 800219a:	f000 fe11 	bl	8002dc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000007c 	.word	0x2000007c

080021a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80021ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b0:	f002 fd7c 	bl	8004cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM5_IRQHandler+0x10>)
 80021be:	f004 f9a5 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000308 	.word	0x20000308

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f006 fa92 	bl	8008724 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20020000 	.word	0x20020000
 800222c:	00000400 	.word	0x00000400
 8002230:	200003c4 	.word	0x200003c4
 8002234:	20000518 	.word	0x20000518

08002238 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff ffea 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f006 fa51 	bl	8008730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228e:	f7fe fdb3 	bl	8000df8 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   r0, =_estack
 8002294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80022a0:	080090c0 	.word	0x080090c0
  ldr r2, =_sbss
 80022a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80022a8:	20000514 	.word	0x20000514

080022ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC3_IRQHandler>

080022ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f002 f891 	bl	80043e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 f80e 	bl	80022e0 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	e001      	b.n	80022d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d0:	f7ff fd32 	bl	8001d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d4:	79fb      	ldrb	r3, [r7, #7]

}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_InitTick+0x68>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d022      	beq.n	800233a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_InitTick+0x6c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_InitTick+0x68>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002300:	fbb1 f3f3 	udiv	r3, r1, r3
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f002 f89c 	bl	8004446 <HAL_SYSTICK_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10f      	bne.n	8002334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	d809      	bhi.n	800232e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231a:	2200      	movs	r2, #0
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	f002 f868 	bl	80043f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_InitTick+0x70>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e007      	b.n	800233e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e004      	b.n	800233e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000000c 	.word	0x2000000c
 800234c:	20000004 	.word	0x20000004
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x1c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_IncTick+0x20>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4413      	add	r3, r2
 8002362:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_IncTick+0x1c>)
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	200003c8 	.word	0x200003c8
 8002374:	2000000c 	.word	0x2000000c

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	200003c8 	.word	0x200003c8

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d004      	beq.n	80023b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_Delay+0x40>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4413      	add	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b4:	bf00      	nop
 80023b6:	f7ff ffdf 	bl	8002378 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d8f7      	bhi.n	80023b6 <HAL_Delay+0x26>
  {
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	609a      	str	r2, [r3, #8]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3360      	adds	r3, #96	; 0x60
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <LL_ADC_SetOffset+0x44>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	4313      	orrs	r3, r2
 800246c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	03fff000 	.word	0x03fff000

08002484 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3360      	adds	r3, #96	; 0x60
 8002492:	461a      	mov	r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3360      	adds	r3, #96	; 0x60
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b087      	sub	sp, #28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	431a      	orrs	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3360      	adds	r3, #96	; 0x60
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	615a      	str	r2, [r3, #20]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800259e:	b480      	push	{r7}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3330      	adds	r3, #48	; 0x30
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	211f      	movs	r1, #31
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	401a      	ands	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 011f 	and.w	r1, r3, #31
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	431a      	orrs	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3314      	adds	r3, #20
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0e5b      	lsrs	r3, r3, #25
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0d1b      	lsrs	r3, r3, #20
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	2107      	movs	r1, #7
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	401a      	ands	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	0d1b      	lsrs	r3, r3, #20
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0318 	and.w	r3, r3, #24
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002698:	40d9      	lsrs	r1, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	400b      	ands	r3, r1
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	0007ffff 	.word	0x0007ffff

080026bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 031f 	and.w	r3, r3, #31
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6093      	str	r3, [r2, #8]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800272c:	d101      	bne.n	8002732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800277c:	d101      	bne.n	8002782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_IsEnabled+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_IsEnabled+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d101      	bne.n	800281e <LL_ADC_IsDisableOngoing+0x18>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <LL_ADC_IsDisableOngoing+0x1a>
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d101      	bne.n	800286c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b08      	cmp	r3, #8
 800288c:	d101      	bne.n	8002892 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1a9      	b.n	8002c0e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fa59 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff19 	bl	8002718 <LL_ADC_IsDeepPowerDownEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff feff 	bl	80026f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff34 	bl	8002768 <LL_ADC_IsInternalRegulatorEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff18 	bl	8002740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002910:	4b9c      	ldr	r3, [pc, #624]	; (8002b84 <HAL_ADC_Init+0x2e4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	4a9c      	ldr	r2, [pc, #624]	; (8002b88 <HAL_ADC_Init+0x2e8>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002924:	e002      	b.n	800292c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f9      	bne.n	8002926 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff16 	bl	8002768 <LL_ADC_IsInternalRegulatorEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f043 0210 	orr.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff76 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002968:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8142 	bne.w	8002bfc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 813e 	bne.w	8002bfc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002988:	f043 0202 	orr.w	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff23 	bl	80027e0 <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d141      	bne.n	8002a24 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_Init+0x114>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_ADC_Init+0x2ec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10f      	bne.n	80029d4 <HAL_ADC_Init+0x134>
 80029b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029b8:	f7ff ff12 	bl	80027e0 <LL_ADC_IsEnabled>
 80029bc:	4604      	mov	r4, r0
 80029be:	4873      	ldr	r0, [pc, #460]	; (8002b8c <HAL_ADC_Init+0x2ec>)
 80029c0:	f7ff ff0e 	bl	80027e0 <LL_ADC_IsEnabled>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4323      	orrs	r3, r4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e012      	b.n	80029fa <HAL_ADC_Init+0x15a>
 80029d4:	486e      	ldr	r0, [pc, #440]	; (8002b90 <HAL_ADC_Init+0x2f0>)
 80029d6:	f7ff ff03 	bl	80027e0 <LL_ADC_IsEnabled>
 80029da:	4604      	mov	r4, r0
 80029dc:	486d      	ldr	r0, [pc, #436]	; (8002b94 <HAL_ADC_Init+0x2f4>)
 80029de:	f7ff feff 	bl	80027e0 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	431c      	orrs	r4, r3
 80029e6:	486c      	ldr	r0, [pc, #432]	; (8002b98 <HAL_ADC_Init+0x2f8>)
 80029e8:	f7ff fefa 	bl	80027e0 <LL_ADC_IsEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4323      	orrs	r3, r4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_Init+0x172>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5f      	ldr	r2, [pc, #380]	; (8002b8c <HAL_ADC_Init+0x2ec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x176>
 8002a12:	4a62      	ldr	r2, [pc, #392]	; (8002b9c <HAL_ADC_Init+0x2fc>)
 8002a14:	e000      	b.n	8002a18 <HAL_ADC_Init+0x178>
 8002a16:	4a62      	ldr	r2, [pc, #392]	; (8002ba0 <HAL_ADC_Init+0x300>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff fcd8 	bl	80023d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7f5b      	ldrb	r3, [r3, #29]
 8002a28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d106      	bne.n	8002a60 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	045b      	lsls	r3, r3, #17
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	4b48      	ldr	r3, [pc, #288]	; (8002ba4 <HAL_ADC_Init+0x304>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fee5 	bl	800287a <LL_ADC_INJ_IsConversionOngoing>
 8002ab0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d17f      	bne.n	8002bb8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d17c      	bne.n	8002bb8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ada:	f023 0302 	bic.w	r3, r3, #2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002afe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6911      	ldr	r1, [r2, #16]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b1e:	e013      	b.n	8002b48 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d12a      	bne.n	8002ba8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b74:	430a      	orrs	r2, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e019      	b.n	8002bb8 <HAL_ADC_Init+0x318>
 8002b84:	20000004 	.word	0x20000004
 8002b88:	053e2d63 	.word	0x053e2d63
 8002b8c:	50000100 	.word	0x50000100
 8002b90:	50000400 	.word	0x50000400
 8002b94:	50000500 	.word	0x50000500
 8002b98:	50000600 	.word	0x50000600
 8002b9c:	50000300 	.word	0x50000300
 8002ba0:	50000700 	.word	0x50000700
 8002ba4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10c      	bne.n	8002bda <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f023 010f 	bic.w	r1, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd8:	e007      	b.n	8002bea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 020f 	bic.w	r2, r2, #15
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bfa:	e007      	b.n	8002c0c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop

08002c18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_Start_DMA+0x20>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a5a      	ldr	r2, [pc, #360]	; (8002d9c <HAL_ADC_Start_DMA+0x184>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_Start_DMA+0x24>
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_ADC_Start_DMA+0x188>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_Start_DMA+0x26>
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_ADC_Start_DMA+0x18c>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fd3c 	bl	80026bc <LL_ADC_GetMultimode>
 8002c44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe02 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 809b 	bne.w	8002d8e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Start_DMA+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e096      	b.n	8002d94 <HAL_ADC_Start_DMA+0x17c>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_ADC_Start_DMA+0x190>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d008      	beq.n	8002c8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d002      	beq.n	8002c8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d17a      	bne.n	8002d80 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 ff60 	bl	8003b50 <ADC_Enable>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d16d      	bne.n	8002d76 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <HAL_ADC_Start_DMA+0x184>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_ADC_Start_DMA+0xb4>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	; (8002dac <HAL_ADC_Start_DMA+0x194>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d002      	beq.n	8002cc8 <HAL_ADC_Start_DMA+0xb0>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e003      	b.n	8002cd0 <HAL_ADC_Start_DMA+0xb8>
 8002cc8:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_ADC_Start_DMA+0x198>)
 8002cca:	e001      	b.n	8002cd0 <HAL_ADC_Start_DMA+0xb8>
 8002ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d002      	beq.n	8002cde <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	f023 0206 	bic.w	r2, r3, #6
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
 8002d02:	e002      	b.n	8002d0a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <HAL_ADC_Start_DMA+0x19c>)
 8002d10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ADC_Start_DMA+0x1a0>)
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_ADC_Start_DMA+0x1a4>)
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	221c      	movs	r2, #28
 8002d28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0210 	orr.w	r2, r2, #16
 8002d40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3340      	adds	r3, #64	; 0x40
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f001 fc25 	bl	80045b0 <HAL_DMA_Start_IT>
 8002d66:	4603      	mov	r3, r0
 8002d68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fd5c 	bl	800282c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d74:	e00d      	b.n	8002d92 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002d7e:	e008      	b.n	8002d92 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002d8c:	e001      	b.n	8002d92 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	50000100 	.word	0x50000100
 8002da0:	50000300 	.word	0x50000300
 8002da4:	50000700 	.word	0x50000700
 8002da8:	50000600 	.word	0x50000600
 8002dac:	50000500 	.word	0x50000500
 8002db0:	50000400 	.word	0x50000400
 8002db4:	08003d3b 	.word	0x08003d3b
 8002db8:	08003e13 	.word	0x08003e13
 8002dbc:	08003e2f 	.word	0x08003e2f

08002dc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002dc8:	2300      	movs	r3, #0
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x30>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a8e      	ldr	r2, [pc, #568]	; (8003024 <HAL_ADC_IRQHandler+0x264>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_IRQHandler+0x34>
 8002df0:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <HAL_ADC_IRQHandler+0x268>)
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_IRQHandler+0x36>
 8002df4:	4b8d      	ldr	r3, [pc, #564]	; (800302c <HAL_ADC_IRQHandler+0x26c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fc60 	bl	80026bc <LL_ADC_GetMultimode>
 8002dfc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d017      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x78>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d012      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 f8f6 	bl	800401c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2202      	movs	r2, #2
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x8c>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8094 	beq.w	8002f80 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 808e 	beq.w	8002f80 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fb79 	bl	8002578 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d072      	beq.n	8002f72 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a64      	ldr	r2, [pc, #400]	; (8003024 <HAL_ADC_IRQHandler+0x264>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_ADC_IRQHandler+0xea>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a65      	ldr	r2, [pc, #404]	; (8003030 <HAL_ADC_IRQHandler+0x270>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d002      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0xe6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_IRQHandler+0xee>
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_ADC_IRQHandler+0x274>)
 8002ea8:	e001      	b.n	8002eae <HAL_ADC_IRQHandler+0xee>
 8002eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d008      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d002      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	d104      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	e014      	b.n	8002efc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a53      	ldr	r2, [pc, #332]	; (8003024 <HAL_ADC_IRQHandler+0x264>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x130>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a53      	ldr	r2, [pc, #332]	; (8003030 <HAL_ADC_IRQHandler+0x270>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d002      	beq.n	8002eec <HAL_ADC_IRQHandler+0x12c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_IRQHandler+0x134>
 8002eec:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_ADC_IRQHandler+0x274>)
 8002eee:	e001      	b.n	8002ef4 <HAL_ADC_IRQHandler+0x134>
 8002ef0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ef4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d135      	bne.n	8002f72 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d12e      	bne.n	8002f72 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fc9b 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11a      	bne.n	8002f5a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020c 	bic.w	r2, r2, #12
 8002f32:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f58:	e00b      	b.n	8002f72 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	f043 0210 	orr.w	r2, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f984 	bl	8003280 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x1d4>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80b3 	beq.w	8003106 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80ad 	beq.w	8003106 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fb14 	bl	80025f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff facf 	bl	8002578 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fda:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a10      	ldr	r2, [pc, #64]	; (8003024 <HAL_ADC_IRQHandler+0x264>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x23a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <HAL_ADC_IRQHandler+0x270>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_IRQHandler+0x236>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e003      	b.n	8002ffe <HAL_ADC_IRQHandler+0x23e>
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_ADC_IRQHandler+0x274>)
 8002ff8:	e001      	b.n	8002ffe <HAL_ADC_IRQHandler+0x23e>
 8002ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	4293      	cmp	r3, r2
 8003004:	d008      	beq.n	8003018 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d002      	beq.n	8003018 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b07      	cmp	r3, #7
 8003016:	d10f      	bne.n	8003038 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	e01f      	b.n	8003062 <HAL_ADC_IRQHandler+0x2a2>
 8003022:	bf00      	nop
 8003024:	50000100 	.word	0x50000100
 8003028:	50000300 	.word	0x50000300
 800302c:	50000700 	.word	0x50000700
 8003030:	50000500 	.word	0x50000500
 8003034:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a8b      	ldr	r2, [pc, #556]	; (800326c <HAL_ADC_IRQHandler+0x4ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_ADC_IRQHandler+0x296>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a8a      	ldr	r2, [pc, #552]	; (8003270 <HAL_ADC_IRQHandler+0x4b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d002      	beq.n	8003052 <HAL_ADC_IRQHandler+0x292>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	e003      	b.n	800305a <HAL_ADC_IRQHandler+0x29a>
 8003052:	4b88      	ldr	r3, [pc, #544]	; (8003274 <HAL_ADC_IRQHandler+0x4b4>)
 8003054:	e001      	b.n	800305a <HAL_ADC_IRQHandler+0x29a>
 8003056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800305a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d047      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_ADC_IRQHandler+0x2c2>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d03f      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	d13a      	bne.n	80030f8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d133      	bne.n	80030f8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12e      	bne.n	80030f8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fbeb 	bl	800287a <LL_ADC_INJ_IsConversionOngoing>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11a      	bne.n	80030e0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030b8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d112      	bne.n	80030f8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80030de:	e00b      	b.n	80030f8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f043 0210 	orr.w	r2, r3, #16
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 ff67 	bl	8003fcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2260      	movs	r2, #96	; 0x60
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_ADC_IRQHandler+0x374>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f8be 	bl	80032a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3a4>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 ff4d 	bl	8003ff4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_ADC_IRQHandler+0x3d4>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 ff3f 	bl	8004008 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d043      	beq.n	8003226 <HAL_ADC_IRQHandler+0x466>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d03e      	beq.n	8003226 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80031b0:	2301      	movs	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
 80031b4:	e021      	b.n	80031fa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d004      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x410>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a28      	ldr	r2, [pc, #160]	; (800326c <HAL_ADC_IRQHandler+0x4ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_IRQHandler+0x414>
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_ADC_IRQHandler+0x4b8>)
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_IRQHandler+0x416>
 80031d4:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_ADC_IRQHandler+0x4bc>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fa7e 	bl	80026d8 <LL_ADC_GetMultiDMATransfer>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80031e2:	2301      	movs	r3, #1
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	e008      	b.n	80031fa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80031f6:	2301      	movs	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10e      	bne.n	800321e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	f043 0202 	orr.w	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f84f 	bl	80032bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2210      	movs	r2, #16
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d018      	beq.n	8003262 <HAL_ADC_IRQHandler+0x4a2>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	2b00      	cmp	r3, #0
 8003238:	d013      	beq.n	8003262 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	f043 0208 	orr.w	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 febf 	bl	8003fe0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	50000100 	.word	0x50000100
 8003270:	50000500 	.word	0x50000500
 8003274:	50000400 	.word	0x50000400
 8003278:	50000300 	.word	0x50000300
 800327c:	50000700 	.word	0x50000700

08003280 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b6      	sub	sp, #216	; 0xd8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x24>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f000 bc13 	b.w	8003b1a <HAL_ADC_ConfigChannel+0x84a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff faa7 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 83f3 	bne.w	8003af4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f7ff f93f 	bl	800259e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fa95 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 800332a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff faa1 	bl	800287a <LL_ADC_INJ_IsConversionOngoing>
 8003338:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800333c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 81d9 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 81d4 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003358:	d10f      	bne.n	800337a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	4619      	mov	r1, r3
 8003366:	f7ff f959 	bl	800261c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f8ed 	bl	8002552 <LL_ADC_SetSamplingTimeCommonConfig>
 8003378:	e00e      	b.n	8003398 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	461a      	mov	r2, r3
 8003388:	f7ff f948 	bl	800261c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f8dd 	bl	8002552 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d022      	beq.n	8003400 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ca:	f7ff f837 	bl	800243c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6919      	ldr	r1, [r3, #16]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7ff f883 	bl	80024e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x126>
 80033f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x128>
 80033f6:	2300      	movs	r3, #0
 80033f8:	461a      	mov	r2, r3
 80033fa:	f7ff f88f 	bl	800251c <LL_ADC_SetOffsetSaturation>
 80033fe:	e17b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff f83c 	bl	8002484 <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x15c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff f831 	bl	8002484 <LL_ADC_GetOffsetChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	e01e      	b.n	800346a <HAL_ADC_ConfigChannel+0x19a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f826 	bl	8002484 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800344e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e004      	b.n	8003468 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800345e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x1b2>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e9b      	lsrs	r3, r3, #26
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	e018      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1e4>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800349a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800349e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034a6:	2320      	movs	r3, #32
 80034a8:	e004      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d106      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fff5 	bl	80024b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ffd9 	bl	8002484 <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x222>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ffce 	bl	8002484 <LL_ADC_GetOffsetChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	e01e      	b.n	8003530 <HAL_ADC_ConfigChannel+0x260>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe ffc3 	bl	8002484 <LL_ADC_GetOffsetChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e004      	b.n	800352e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x278>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	e018      	b.n	800357a <HAL_ADC_ConfigChannel+0x2aa>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800355c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e004      	b.n	800357a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800357a:	429a      	cmp	r2, r3
 800357c:	d106      	bne.n	800358c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe ff92 	bl	80024b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe ff76 	bl	8002484 <LL_ADC_GetOffsetChannel>
 8003598:	4603      	mov	r3, r0
 800359a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2e8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe ff6b 	bl	8002484 <LL_ADC_GetOffsetChannel>
 80035ae:	4603      	mov	r3, r0
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	f003 021f 	and.w	r2, r3, #31
 80035b6:	e01e      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x326>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff60 	bl	8002484 <LL_ADC_GetOffsetChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_ADC_ConfigChannel+0x33e>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	e016      	b.n	800363c <HAL_ADC_ConfigChannel+0x36c>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e004      	b.n	800363c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363c:	429a      	cmp	r2, r3
 800363e:	d106      	bne.n	800364e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe ff31 	bl	80024b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2103      	movs	r1, #3
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe ff15 	bl	8002484 <LL_ADC_GetOffsetChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_ADC_ConfigChannel+0x3aa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2103      	movs	r1, #3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe ff0a 	bl	8002484 <LL_ADC_GetOffsetChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	e017      	b.n	80036aa <HAL_ADC_ConfigChannel+0x3da>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2103      	movs	r1, #3
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe feff 	bl	8002484 <LL_ADC_GetOffsetChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003694:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80036a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x3f2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	e011      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x416>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d106      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2103      	movs	r1, #3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fedc 	bl	80024b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f86f 	bl	80027e0 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 813d 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f7fe ffac 	bl	8002674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4aa2      	ldr	r2, [pc, #648]	; (80039ac <HAL_ADC_ConfigChannel+0x6dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	f040 812e 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x480>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2b09      	cmp	r3, #9
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e019      	b.n	8003784 <HAL_ADC_ConfigChannel+0x4b4>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800375e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003760:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800376c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2b09      	cmp	r3, #9
 800377c:	bf94      	ite	ls
 800377e:	2301      	movls	r3, #1
 8003780:	2300      	movhi	r3, #0
 8003782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003784:	2b00      	cmp	r3, #0
 8003786:	d079      	beq.n	800387c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x4d4>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	069b      	lsls	r3, r3, #26
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a2:	e015      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x500>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x520>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2101      	movs	r1, #1
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	e017      	b.n	8003820 <HAL_ADC_ConfigChannel+0x550>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800380c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x576>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	e018      	b.n	8003878 <HAL_ADC_ConfigChannel+0x5a8>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003878:	430b      	orrs	r3, r1
 800387a:	e07e      	b.n	800397a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x5c8>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	069b      	lsls	r3, r3, #26
 8003892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003896:	e015      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x5f4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x614>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	e017      	b.n	8003914 <HAL_ADC_ConfigChannel+0x644>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	61fb      	str	r3, [r7, #28]
  return result;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e003      	b.n	8003908 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2101      	movs	r1, #1
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	ea42 0103 	orr.w	r1, r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x670>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	3301      	adds	r3, #1
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	3b1e      	subs	r3, #30
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393e:	e01b      	b.n	8003978 <HAL_ADC_ConfigChannel+0x6a8>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	613b      	str	r3, [r7, #16]
  return result;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e003      	b.n	8003964 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 021f 	and.w	r2, r3, #31
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	051b      	lsls	r3, r3, #20
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	4619      	mov	r1, r3
 8003980:	f7fe fe4c 	bl	800261c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80be 	beq.w	8003b0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_ConfigChannel+0x6d6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x6ec>
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80039a8:	e009      	b.n	80039be <HAL_ADC_ConfigChannel+0x6ee>
 80039aa:	bf00      	nop
 80039ac:	407f0000 	.word	0x407f0000
 80039b0:	80080000 	.word	0x80080000
 80039b4:	50000100 	.word	0x50000100
 80039b8:	50000300 	.word	0x50000300
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fd2e 	bl	8002420 <LL_ADC_GetCommonPathInternalCh>
 80039c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_ADC_ConfigChannel+0x858>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x70c>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a55      	ldr	r2, [pc, #340]	; (8003b2c <HAL_ADC_ConfigChannel+0x85c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d13a      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d134      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f0:	d005      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x72e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4e      	ldr	r2, [pc, #312]	; (8003b30 <HAL_ADC_ConfigChannel+0x860>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f040 8085 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a06:	d004      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x742>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x746>
 8003a12:	4a49      	ldr	r2, [pc, #292]	; (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003a14:	e000      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x748>
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7fe fce9 	bl	80023fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a28:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_ADC_ConfigChannel+0x86c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <HAL_ADC_ConfigChannel+0x870>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a42:	e002      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f9      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a50:	e05a      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <HAL_ADC_ConfigChannel+0x874>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d125      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11f      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d104      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x7ac>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <HAL_ADC_ConfigChannel+0x878>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d047      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a84:	d004      	beq.n	8003a90 <HAL_ADC_ConfigChannel+0x7c0>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x7c4>
 8003a90:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003a92:	e000      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x7c6>
 8003a94:	4a23      	ldr	r2, [pc, #140]	; (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7fe fcaa 	bl	80023fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa6:	e031      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <HAL_ADC_ConfigChannel+0x87c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12d      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d127      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ad0:	d004      	beq.n	8003adc <HAL_ADC_ConfigChannel+0x80c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x810>
 8003adc:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003ade:	e000      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x812>
 8003ae0:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fe fc84 	bl	80023fa <LL_ADC_SetCommonPathInternalCh>
 8003af2:	e00c      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b06:	e002      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	37d8      	adds	r7, #216	; 0xd8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	50000700 	.word	0x50000700
 8003b28:	c3210000 	.word	0xc3210000
 8003b2c:	90c00010 	.word	0x90c00010
 8003b30:	50000600 	.word	0x50000600
 8003b34:	50000100 	.word	0x50000100
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	053e2d63 	.word	0x053e2d63
 8003b44:	c7520000 	.word	0xc7520000
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	cb840000 	.word	0xcb840000

08003b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fe3d 	bl	80027e0 <LL_ADC_IsEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d176      	bne.n	8003c5a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <ADC_Enable+0x114>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e062      	b.n	8003c5c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fdf8 	bl	8002790 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba8:	d004      	beq.n	8003bb4 <ADC_Enable+0x64>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <ADC_Enable+0x118>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <ADC_Enable+0x68>
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <ADC_Enable+0x11c>)
 8003bb6:	e000      	b.n	8003bba <ADC_Enable+0x6a>
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <ADC_Enable+0x120>)
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fc30 	bl	8002420 <LL_ADC_GetCommonPathInternalCh>
 8003bc0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d013      	beq.n	8003bf2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <ADC_Enable+0x124>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <ADC_Enable+0x128>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003be4:	e002      	b.n	8003bec <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f9      	bne.n	8003be6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bf2:	f7fe fbc1 	bl	8002378 <HAL_GetTick>
 8003bf6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf8:	e028      	b.n	8003c4c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fdee 	bl	80027e0 <LL_ADC_IsEnabled>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fdbe 	bl	8002790 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c14:	f7fe fbb0 	bl	8002378 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d914      	bls.n	8003c4c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d00d      	beq.n	8003c4c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f043 0210 	orr.w	r2, r3, #16
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e007      	b.n	8003c5c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d1cf      	bne.n	8003bfa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	8000003f 	.word	0x8000003f
 8003c68:	50000100 	.word	0x50000100
 8003c6c:	50000300 	.word	0x50000300
 8003c70:	50000700 	.word	0x50000700
 8003c74:	20000004 	.word	0x20000004
 8003c78:	053e2d63 	.word	0x053e2d63

08003c7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fdbc 	bl	8002806 <LL_ADC_IsDisableOngoing>
 8003c8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fda3 	bl	80027e0 <LL_ADC_IsEnabled>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d047      	beq.n	8003d30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d144      	bne.n	8003d30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030d 	and.w	r3, r3, #13
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d10c      	bne.n	8003cce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fd7d 	bl	80027b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe fb57 	bl	8002378 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ccc:	e029      	b.n	8003d22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f043 0210 	orr.w	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e023      	b.n	8003d32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cea:	f7fe fb45 	bl	8002378 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d914      	bls.n	8003d22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e007      	b.n	8003d32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1dc      	bne.n	8003cea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d14b      	bne.n	8003dec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d021      	beq.n	8003db2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fc00 	bl	8002578 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d032      	beq.n	8003de4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d12b      	bne.n	8003de4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11f      	bne.n	8003de4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c
 8003db0:	e018      	b.n	8003de4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d111      	bne.n	8003de4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fa4b 	bl	8003280 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dea:	e00e      	b.n	8003e0a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fa5f 	bl	80032bc <HAL_ADC_ErrorCallback>
}
 8003dfe:	e004      	b.n	8003e0a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fa37 	bl	8003294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff fa31 	bl	80032bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <LL_ADC_IsEnabled>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <LL_ADC_IsEnabled+0x18>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <LL_ADC_IsEnabled+0x1a>
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_StartCalibration>:
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_ADC_IsCalibrationOnGoing>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ece:	d101      	bne.n	8003ed4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d101      	bne.n	8003efa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e04d      	b.n	8003fc0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fea5 	bl	8003c7c <ADC_Disable>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d136      	bne.n	8003faa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	f043 0202 	orr.w	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff96 	bl	8003e88 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f5c:	e014      	b.n	8003f88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d90d      	bls.n	8003f88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	f023 0312 	bic.w	r3, r3, #18
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e01b      	b.n	8003fc0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff94 	bl	8003eba <LL_ADC_IsCalibrationOnGoing>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e2      	bne.n	8003f5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	f023 0303 	bic.w	r3, r3, #3
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fa8:	e005      	b.n	8003fb6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	0004de01 	.word	0x0004de01

08003fcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b0a1      	sub	sp, #132	; 0x84
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800404a:	2302      	movs	r3, #2
 800404c:	e0e7      	b.n	800421e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004056:	2300      	movs	r3, #0
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800405a:	2300      	movs	r3, #0
 800405c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004066:	d102      	bne.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	e009      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d102      	bne.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004078:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	e001      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0be      	b.n	800421e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff1d 	bl	8003ee2 <LL_ADC_REG_IsConversionOngoing>
 80040a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff17 	bl	8003ee2 <LL_ADC_REG_IsConversionOngoing>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80a0 	bne.w	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80040bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 809c 	bne.w	80041fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040cc:	d004      	beq.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a55      	ldr	r2, [pc, #340]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80040d8:	4b56      	ldr	r3, [pc, #344]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80040da:	e000      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80040dc:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80040de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d04b      	beq.n	8004180 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040fa:	035b      	lsls	r3, r3, #13
 80040fc:	430b      	orrs	r3, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004102:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410c:	d004      	beq.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a45      	ldr	r2, [pc, #276]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10f      	bne.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004118:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800411c:	f7ff fea1 	bl	8003e62 <LL_ADC_IsEnabled>
 8004120:	4604      	mov	r4, r0
 8004122:	4841      	ldr	r0, [pc, #260]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004124:	f7ff fe9d 	bl	8003e62 <LL_ADC_IsEnabled>
 8004128:	4603      	mov	r3, r0
 800412a:	4323      	orrs	r3, r4
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e012      	b.n	800415e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004138:	483c      	ldr	r0, [pc, #240]	; (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800413a:	f7ff fe92 	bl	8003e62 <LL_ADC_IsEnabled>
 800413e:	4604      	mov	r4, r0
 8004140:	483b      	ldr	r0, [pc, #236]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004142:	f7ff fe8e 	bl	8003e62 <LL_ADC_IsEnabled>
 8004146:	4603      	mov	r3, r0
 8004148:	431c      	orrs	r4, r3
 800414a:	483c      	ldr	r0, [pc, #240]	; (800423c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800414c:	f7ff fe89 	bl	8003e62 <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	4323      	orrs	r3, r4
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d056      	beq.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800416a:	f023 030f 	bic.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6811      	ldr	r1, [r2, #0]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	430a      	orrs	r2, r1
 8004178:	431a      	orrs	r2, r3
 800417a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800417e:	e047      	b.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d004      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a23      	ldr	r2, [pc, #140]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80041a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041a4:	f7ff fe5d 	bl	8003e62 <LL_ADC_IsEnabled>
 80041a8:	4604      	mov	r4, r0
 80041aa:	481f      	ldr	r0, [pc, #124]	; (8004228 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041ac:	f7ff fe59 	bl	8003e62 <LL_ADC_IsEnabled>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4323      	orrs	r3, r4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e012      	b.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80041c0:	481a      	ldr	r0, [pc, #104]	; (800422c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041c2:	f7ff fe4e 	bl	8003e62 <LL_ADC_IsEnabled>
 80041c6:	4604      	mov	r4, r0
 80041c8:	4819      	ldr	r0, [pc, #100]	; (8004230 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041ca:	f7ff fe4a 	bl	8003e62 <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	431c      	orrs	r4, r3
 80041d2:	481a      	ldr	r0, [pc, #104]	; (800423c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041d4:	f7ff fe45 	bl	8003e62 <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	4323      	orrs	r3, r4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041f2:	f023 030f 	bic.w	r3, r3, #15
 80041f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041fa:	e009      	b.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800420e:	e000      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800421a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800421e:	4618      	mov	r0, r3
 8004220:	3784      	adds	r7, #132	; 0x84
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	bf00      	nop
 8004228:	50000100 	.word	0x50000100
 800422c:	50000400 	.word	0x50000400
 8004230:	50000500 	.word	0x50000500
 8004234:	50000300 	.word	0x50000300
 8004238:	50000700 	.word	0x50000700
 800423c:	50000600 	.word	0x50000600

08004240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800426c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <__NVIC_GetPriorityGrouping+0x18>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0307 	and.w	r3, r3, #7
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db0b      	blt.n	80042ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <__NVIC_EnableIRQ+0x38>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2001      	movs	r0, #1
 80042c6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0a      	blt.n	800430a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	490c      	ldr	r1, [pc, #48]	; (800432c <__NVIC_SetPriority+0x4c>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	440b      	add	r3, r1
 8004304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004308:	e00a      	b.n	8004320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4908      	ldr	r1, [pc, #32]	; (8004330 <__NVIC_SetPriority+0x50>)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	3b04      	subs	r3, #4
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	440b      	add	r3, r1
 800431e:	761a      	strb	r2, [r3, #24]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf28      	it	cs
 8004352:	2304      	movcs	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3304      	adds	r3, #4
 800435a:	2b06      	cmp	r3, #6
 800435c:	d902      	bls.n	8004364 <NVIC_EncodePriority+0x30>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3b03      	subs	r3, #3
 8004362:	e000      	b.n	8004366 <NVIC_EncodePriority+0x32>
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437c:	f04f 31ff 	mov.w	r1, #4294967295
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43d9      	mvns	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	4313      	orrs	r3, r2
         );
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ac:	d301      	bcc.n	80043b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00f      	b.n	80043d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <SysTick_Config+0x40>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ba:	210f      	movs	r1, #15
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f7ff ff8e 	bl	80042e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <SysTick_Config+0x40>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <SysTick_Config+0x40>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff29 	bl	8004240 <__NVIC_SetPriorityGrouping>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004404:	f7ff ff40 	bl	8004288 <__NVIC_GetPriorityGrouping>
 8004408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6978      	ldr	r0, [r7, #20]
 8004410:	f7ff ff90 	bl	8004334 <NVIC_EncodePriority>
 8004414:	4602      	mov	r2, r0
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff5f 	bl	80042e0 <__NVIC_SetPriority>
}
 8004422:	bf00      	nop
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff33 	bl	80042a4 <__NVIC_EnableIRQ>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffa4 	bl	800439c <SysTick_Config>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e08d      	b.n	800458e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_DMA_Init+0x138>)
 800447a:	429a      	cmp	r2, r3
 800447c:	d80f      	bhi.n	800449e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b45      	ldr	r3, [pc, #276]	; (800459c <HAL_DMA_Init+0x13c>)
 8004486:	4413      	add	r3, r2
 8004488:	4a45      	ldr	r2, [pc, #276]	; (80045a0 <HAL_DMA_Init+0x140>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_DMA_Init+0x144>)
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
 800449c:	e00e      	b.n	80044bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <HAL_DMA_Init+0x148>)
 80044a6:	4413      	add	r3, r2
 80044a8:	4a3d      	ldr	r2, [pc, #244]	; (80045a0 <HAL_DMA_Init+0x140>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	009a      	lsls	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <HAL_DMA_Init+0x14c>)
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9b6 	bl	8004880 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451c:	d102      	bne.n	8004524 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004538:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_DMA_Init+0x104>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b04      	cmp	r3, #4
 8004548:	d80c      	bhi.n	8004564 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f9d6 	bl	80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e008      	b.n	8004576 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40020407 	.word	0x40020407
 800459c:	bffdfff8 	.word	0xbffdfff8
 80045a0:	cccccccd 	.word	0xcccccccd
 80045a4:	40020000 	.word	0x40020000
 80045a8:	bffdfbf8 	.word	0xbffdfbf8
 80045ac:	40020400 	.word	0x40020400

080045b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_DMA_Start_IT+0x20>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e066      	b.n	800469e <HAL_DMA_Start_IT+0xee>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d155      	bne.n	8004690 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f8fb 	bl	8004804 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 020e 	orr.w	r2, r2, #14
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e00f      	b.n	8004648 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0204 	bic.w	r2, r2, #4
 8004636:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 020a 	orr.w	r2, r2, #10
 8004646:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004664:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e005      	b.n	800469c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2204      	movs	r2, #4
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d026      	beq.n	8004720 <HAL_DMA_IRQHandler+0x7a>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d021      	beq.n	8004720 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f003 021f 	and.w	r2, r3, #31
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2104      	movs	r1, #4
 8004708:	fa01 f202 	lsl.w	r2, r1, r2
 800470c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	2b00      	cmp	r3, #0
 8004714:	d071      	beq.n	80047fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800471e:	e06c      	b.n	80047fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2202      	movs	r2, #2
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02e      	beq.n	8004792 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d029      	beq.n	8004792 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 020a 	bic.w	r2, r2, #10
 800475a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2102      	movs	r1, #2
 8004772:	fa01 f202 	lsl.w	r2, r1, r2
 8004776:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d038      	beq.n	80047fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004790:	e033      	b.n	80047fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2208      	movs	r2, #8
 800479c:	409a      	lsls	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d02a      	beq.n	80047fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d025      	beq.n	80047fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 020e 	bic.w	r2, r2, #14
 80047be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f202 	lsl.w	r2, r1, r2
 80047d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
}
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800481a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800482c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 021f 	and.w	r2, r3, #31
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2101      	movs	r1, #1
 800483c:	fa01 f202 	lsl.w	r2, r1, r2
 8004840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b10      	cmp	r3, #16
 8004850:	d108      	bne.n	8004864 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004862:	e007      	b.n	8004874 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004890:	429a      	cmp	r2, r3
 8004892:	d802      	bhi.n	800489a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e001      	b.n	800489e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800489c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	3b08      	subs	r3, #8
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40020407 	.word	0x40020407
 80048ec:	40020800 	.word	0x40020800
 80048f0:	40020820 	.word	0x40020820
 80048f4:	cccccccd 	.word	0xcccccccd
 80048f8:	40020880 	.word	0x40020880

080048fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a08      	ldr	r2, [pc, #32]	; (8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800491e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2201      	movs	r2, #1
 800492a:	409a      	lsls	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	1000823f 	.word	0x1000823f
 8004940:	40020940 	.word	0x40020940

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004952:	e15a      	b.n	8004c0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 814c 	beq.w	8004c04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d005      	beq.n	8004984 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004980:	2b02      	cmp	r3, #2
 8004982:	d130      	bne.n	80049e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2203      	movs	r2, #3
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ba:	2201      	movs	r2, #1
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0201 	and.w	r2, r3, #1
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d017      	beq.n	8004a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d123      	bne.n	8004a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	220f      	movs	r2, #15
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	6939      	ldr	r1, [r7, #16]
 8004a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0203 	and.w	r2, r3, #3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80a6 	beq.w	8004c04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abc:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ac4:	4b58      	ldr	r3, [pc, #352]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad0:	4a56      	ldr	r2, [pc, #344]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004afa:	d01f      	beq.n	8004b3c <HAL_GPIO_Init+0x1f8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a4c      	ldr	r2, [pc, #304]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d019      	beq.n	8004b38 <HAL_GPIO_Init+0x1f4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <HAL_GPIO_Init+0x2f0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a4a      	ldr	r2, [pc, #296]	; (8004c38 <HAL_GPIO_Init+0x2f4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00d      	beq.n	8004b30 <HAL_GPIO_Init+0x1ec>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <HAL_GPIO_Init+0x2f8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0x1e8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a48      	ldr	r2, [pc, #288]	; (8004c40 <HAL_GPIO_Init+0x2fc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_GPIO_Init+0x1e4>
 8004b24:	2305      	movs	r3, #5
 8004b26:	e00a      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b28:	2306      	movs	r3, #6
 8004b2a:	e008      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e006      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b30:	2303      	movs	r3, #3
 8004b32:	e004      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e002      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_GPIO_Init+0x1fa>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	f002 0203 	and.w	r2, r2, #3
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	4093      	lsls	r3, r2
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b4e:	4937      	ldr	r1, [pc, #220]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	3302      	adds	r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b80:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4013      	ands	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004baa:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bfe:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <HAL_GPIO_Init+0x300>)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3301      	adds	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f47f ae9d 	bne.w	8004954 <HAL_GPIO_Init+0x10>
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	48000400 	.word	0x48000400
 8004c34:	48000800 	.word	0x48000800
 8004c38:	48000c00 	.word	0x48000c00
 8004c3c:	48001000 	.word	0x48001000
 8004c40:	48001400 	.word	0x48001400
 8004c44:	40010400 	.word	0x40010400

08004c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	807b      	strh	r3, [r7, #2]
 8004c54:	4613      	mov	r3, r2
 8004c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c64:	e002      	b.n	8004c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c8a:	887a      	ldrh	r2, [r7, #2]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	041a      	lsls	r2, r3, #16
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	43d9      	mvns	r1, r3
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	400b      	ands	r3, r1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc fc9e 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40010400 	.word	0x40010400

08004cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d141      	bne.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cea:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf6:	d131      	bne.n	8004d5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cf8:	4b47      	ldr	r3, [pc, #284]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfe:	4a46      	ldr	r2, [pc, #280]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d08:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d10:	4a41      	ldr	r2, [pc, #260]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d18:	4b40      	ldr	r3, [pc, #256]	; (8004e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2232      	movs	r2, #50	; 0x32
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	4a3f      	ldr	r2, [pc, #252]	; (8004e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	0c9b      	lsrs	r3, r3, #18
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d2e:	e002      	b.n	8004d36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d102      	bne.n	8004d4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f2      	bne.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d158      	bne.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e057      	b.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d5c:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d62:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d6c:	e04d      	b.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d74:	d141      	bne.n	8004dfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d76:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d131      	bne.n	8004de8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8a:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d94:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2232      	movs	r2, #50	; 0x32
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	0c9b      	lsrs	r3, r3, #18
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dba:	e002      	b.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d102      	bne.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f2      	bne.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d112      	bne.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e011      	b.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004df8:	e007      	b.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	20000004 	.word	0x20000004
 8004e20:	431bde83 	.word	0x431bde83

08004e24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e32:	6093      	str	r3, [r2, #8]
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40007000 	.word	0x40007000

08004e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e2fe      	b.n	8005454 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d075      	beq.n	8004f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e62:	4b97      	ldr	r3, [pc, #604]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6c:	4b94      	ldr	r3, [pc, #592]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3e>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d002      	beq.n	8004e88 <HAL_RCC_OscConfig+0x44>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d10b      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	4b8d      	ldr	r3, [pc, #564]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d05b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x108>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d157      	bne.n	8004f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e2d9      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x74>
 8004eaa:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a84      	ldr	r2, [pc, #528]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e01d      	b.n	8004ef4 <HAL_RCC_OscConfig+0xb0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCC_OscConfig+0x98>
 8004ec2:	4b7f      	ldr	r3, [pc, #508]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a7e      	ldr	r2, [pc, #504]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4b7c      	ldr	r3, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7b      	ldr	r2, [pc, #492]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e00b      	b.n	8004ef4 <HAL_RCC_OscConfig+0xb0>
 8004edc:	4b78      	ldr	r3, [pc, #480]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a77      	ldr	r2, [pc, #476]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b75      	ldr	r3, [pc, #468]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a74      	ldr	r2, [pc, #464]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fa3c 	bl	8002378 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fd fa38 	bl	8002378 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e29e      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f16:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0xc0>
 8004f22:	e014      	b.n	8004f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd fa28 	bl	8002378 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fa24 	bl	8002378 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e28a      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f3e:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0xe8>
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d075      	beq.n	8005046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f64:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	d102      	bne.n	8004f7a <HAL_RCC_OscConfig+0x136>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d002      	beq.n	8004f80 <HAL_RCC_OscConfig+0x13c>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d11f      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f80:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x154>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e25d      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f98:	4b49      	ldr	r3, [pc, #292]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	061b      	lsls	r3, r3, #24
 8004fa6:	4946      	ldr	r1, [pc, #280]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fac:	4b45      	ldr	r3, [pc, #276]	; (80050c4 <HAL_RCC_OscConfig+0x280>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd f995 	bl	80022e0 <HAL_InitTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d043      	beq.n	8005044 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e249      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d023      	beq.n	8005010 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fd f9d0 	bl	8002378 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fdc:	f7fd f9cc 	bl	8002378 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e232      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fee:	4b34      	ldr	r3, [pc, #208]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	492d      	ldr	r1, [pc, #180]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
 800500e:	e01a      	b.n	8005046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fd f9ac 	bl	8002378 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005024:	f7fd f9a8 	bl	8002378 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e20e      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005036:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1e0>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d041      	beq.n	80050d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01c      	beq.n	8005094 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 800505c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005060:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506a:	f7fd f985 	bl	8002378 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005072:	f7fd f981 	bl	8002378 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e1e7      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ef      	beq.n	8005072 <HAL_RCC_OscConfig+0x22e>
 8005092:	e020      	b.n	80050d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005094:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fd f968 	bl	8002378 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050aa:	e00d      	b.n	80050c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ac:	f7fd f964 	bl	8002378 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d906      	bls.n	80050c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e1ca      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
 80050c4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c8:	4b8c      	ldr	r3, [pc, #560]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1ea      	bne.n	80050ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80a6 	beq.w	8005230 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e4:	2300      	movs	r3, #0
 80050e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050e8:	4b84      	ldr	r3, [pc, #528]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x2b4>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x2b6>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	4b7f      	ldr	r3, [pc, #508]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	4a7e      	ldr	r2, [pc, #504]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005108:	6593      	str	r3, [r2, #88]	; 0x58
 800510a:	4b7c      	ldr	r3, [pc, #496]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800511a:	4b79      	ldr	r3, [pc, #484]	; (8005300 <HAL_RCC_OscConfig+0x4bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005126:	4b76      	ldr	r3, [pc, #472]	; (8005300 <HAL_RCC_OscConfig+0x4bc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a75      	ldr	r2, [pc, #468]	; (8005300 <HAL_RCC_OscConfig+0x4bc>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fd f921 	bl	8002378 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fd f91d 	bl	8002378 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e183      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800514c:	4b6c      	ldr	r3, [pc, #432]	; (8005300 <HAL_RCC_OscConfig+0x4bc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d108      	bne.n	8005172 <HAL_RCC_OscConfig+0x32e>
 8005160:	4b66      	ldr	r3, [pc, #408]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	4a65      	ldr	r2, [pc, #404]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005170:	e024      	b.n	80051bc <HAL_RCC_OscConfig+0x378>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b05      	cmp	r3, #5
 8005178:	d110      	bne.n	800519c <HAL_RCC_OscConfig+0x358>
 800517a:	4b60      	ldr	r3, [pc, #384]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	4a5e      	ldr	r2, [pc, #376]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005182:	f043 0304 	orr.w	r3, r3, #4
 8005186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800518a:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	4a5a      	ldr	r2, [pc, #360]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800519a:	e00f      	b.n	80051bc <HAL_RCC_OscConfig+0x378>
 800519c:	4b57      	ldr	r3, [pc, #348]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	4a56      	ldr	r2, [pc, #344]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051ac:	4b53      	ldr	r3, [pc, #332]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	4a52      	ldr	r2, [pc, #328]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	f023 0304 	bic.w	r3, r3, #4
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d016      	beq.n	80051f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd f8d8 	bl	8002378 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd f8d4 	bl	8002378 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e138      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e2:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ed      	beq.n	80051cc <HAL_RCC_OscConfig+0x388>
 80051f0:	e015      	b.n	800521e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f2:	f7fd f8c1 	bl	8002378 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f8:	e00a      	b.n	8005210 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fd f8bd 	bl	8002378 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e121      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005210:	4b3a      	ldr	r3, [pc, #232]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ed      	bne.n	80051fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005224:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	4a34      	ldr	r2, [pc, #208]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d03c      	beq.n	80052b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01c      	beq.n	800527e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005244:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800524a:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fd f890 	bl	8002378 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800525c:	f7fd f88c 	bl	8002378 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0f2      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0ef      	beq.n	800525c <HAL_RCC_OscConfig+0x418>
 800527c:	e01b      	b.n	80052b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800527e:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005284:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528e:	f7fd f873 	bl	8002378 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005296:	f7fd f86f 	bl	8002378 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0d5      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a8:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80052aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ef      	bne.n	8005296 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80c9 	beq.w	8005452 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	f000 8083 	beq.w	80053d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d15e      	bne.n	8005394 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd f849 	bl	8002378 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e8:	e00c      	b.n	8005304 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fd f845 	bl	8002378 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d905      	bls.n	8005304 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0ab      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
 80052fc:	40021000 	.word	0x40021000
 8005300:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005304:	4b55      	ldr	r3, [pc, #340]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ec      	bne.n	80052ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005310:	4b52      	ldr	r3, [pc, #328]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	4b52      	ldr	r3, [pc, #328]	; (8005460 <HAL_RCC_OscConfig+0x61c>)
 8005316:	4013      	ands	r3, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6a11      	ldr	r1, [r2, #32]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005320:	3a01      	subs	r2, #1
 8005322:	0112      	lsls	r2, r2, #4
 8005324:	4311      	orrs	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800532a:	0212      	lsls	r2, r2, #8
 800532c:	4311      	orrs	r1, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005332:	0852      	lsrs	r2, r2, #1
 8005334:	3a01      	subs	r2, #1
 8005336:	0552      	lsls	r2, r2, #21
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	3a01      	subs	r2, #1
 8005342:	0652      	lsls	r2, r2, #25
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800534a:	06d2      	lsls	r2, r2, #27
 800534c:	430a      	orrs	r2, r1
 800534e:	4943      	ldr	r1, [pc, #268]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005350:	4313      	orrs	r3, r2
 8005352:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005354:	4b41      	ldr	r3, [pc, #260]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a40      	ldr	r2, [pc, #256]	; (800545c <HAL_RCC_OscConfig+0x618>)
 800535a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005360:	4b3e      	ldr	r3, [pc, #248]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a3d      	ldr	r2, [pc, #244]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd f804 	bl	8002378 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005374:	f7fd f800 	bl	8002378 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e066      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x530>
 8005392:	e05e      	b.n	8005452 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005394:	4b31      	ldr	r3, [pc, #196]	; (800545c <HAL_RCC_OscConfig+0x618>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	; (800545c <HAL_RCC_OscConfig+0x618>)
 800539a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800539e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fc ffea 	bl	8002378 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc ffe6 	bl	8002378 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e04c      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ba:	4b28      	ldr	r3, [pc, #160]	; (800545c <HAL_RCC_OscConfig+0x618>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053c6:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCC_OscConfig+0x618>)
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	4924      	ldr	r1, [pc, #144]	; (800545c <HAL_RCC_OscConfig+0x618>)
 80053cc:	4b25      	ldr	r3, [pc, #148]	; (8005464 <HAL_RCC_OscConfig+0x620>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60cb      	str	r3, [r1, #12]
 80053d2:	e03e      	b.n	8005452 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e039      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCC_OscConfig+0x618>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 0203 	and.w	r2, r3, #3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d12c      	bne.n	800544e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	3b01      	subs	r3, #1
 8005400:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d123      	bne.n	800544e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005412:	429a      	cmp	r2, r3
 8005414:	d11b      	bne.n	800544e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d113      	bne.n	800544e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	3b01      	subs	r3, #1
 8005434:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d109      	bne.n	800544e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	019f800c 	.word	0x019f800c
 8005464:	feeefffc 	.word	0xfeeefffc

08005468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e11e      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005480:	4b91      	ldr	r3, [pc, #580]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d910      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b8e      	ldr	r3, [pc, #568]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 020f 	bic.w	r2, r3, #15
 8005496:	498c      	ldr	r1, [pc, #560]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b8a      	ldr	r3, [pc, #552]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e106      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d073      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d129      	bne.n	8005518 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c4:	4b81      	ldr	r3, [pc, #516]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0f4      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054d4:	f000 f99e 	bl	8005814 <RCC_GetSysClockFreqFromPLLSource>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4a7c      	ldr	r2, [pc, #496]	; (80056d0 <HAL_RCC_ClockConfig+0x268>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d93f      	bls.n	8005562 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054e2:	4b7a      	ldr	r3, [pc, #488]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d033      	beq.n	8005562 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d12f      	bne.n	8005562 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005502:	4b72      	ldr	r3, [pc, #456]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	4a70      	ldr	r2, [pc, #448]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e024      	b.n	8005562 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d107      	bne.n	8005530 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005520:	4b6a      	ldr	r3, [pc, #424]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0c6      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0be      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005540:	f000 f8ce 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 8005544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4a61      	ldr	r2, [pc, #388]	; (80056d0 <HAL_RCC_ClockConfig+0x268>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d909      	bls.n	8005562 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005556:	4a5d      	ldr	r2, [pc, #372]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4957      	ldr	r1, [pc, #348]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005570:	4313      	orrs	r3, r2
 8005572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fc ff00 	bl	8002378 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fc fefc 	bl	8002378 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e095      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b4e      	ldr	r3, [pc, #312]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b43      	ldr	r3, [pc, #268]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a42      	ldr	r2, [pc, #264]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055d4:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055dc:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4936      	ldr	r1, [pc, #216]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
 80055f6:	e008      	b.n	800560a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d105      	bne.n	800560a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055fe:	4b33      	ldr	r3, [pc, #204]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4a32      	ldr	r2, [pc, #200]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005608:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d21d      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005618:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 020f 	bic.w	r2, r3, #15
 8005620:	4929      	ldr	r1, [pc, #164]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005628:	f7fc fea6 	bl	8002378 <HAL_GetTick>
 800562c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005630:	f7fc fea2 	bl	8002378 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	; 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e03b      	b.n	80056be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCC_ClockConfig+0x260>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d1ed      	bne.n	8005630 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4917      	ldr	r1, [pc, #92]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	490f      	ldr	r1, [pc, #60]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005692:	f000 f825 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 8005696:	4602      	mov	r2, r0
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_RCC_ClockConfig+0x264>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	490c      	ldr	r1, [pc, #48]	; (80056d4 <HAL_RCC_ClockConfig+0x26c>)
 80056a4:	5ccb      	ldrb	r3, [r1, r3]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	fa22 f303 	lsr.w	r3, r2, r3
 80056ae:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <HAL_RCC_ClockConfig+0x270>)
 80056b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <HAL_RCC_ClockConfig+0x274>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fc fe12 	bl	80022e0 <HAL_InitTick>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40022000 	.word	0x40022000
 80056cc:	40021000 	.word	0x40021000
 80056d0:	04c4b400 	.word	0x04c4b400
 80056d4:	0800903c 	.word	0x0800903c
 80056d8:	20000004 	.word	0x20000004
 80056dc:	20000008 	.word	0x20000008

080056e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d102      	bne.n	80056f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056f2:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_RCC_GetSysClockFreq+0xbc>)
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	e047      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 030c 	and.w	r3, r3, #12
 8005700:	2b08      	cmp	r3, #8
 8005702:	d102      	bne.n	800570a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005704:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e03e      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800570a:	4b23      	ldr	r3, [pc, #140]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d136      	bne.n	8005784 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	3301      	adds	r3, #1
 800572c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d10c      	bne.n	800574e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005734:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573e:	68d2      	ldr	r2, [r2, #12]
 8005740:	0a12      	lsrs	r2, r2, #8
 8005742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	617b      	str	r3, [r7, #20]
      break;
 800574c:	e00c      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005758:	68d2      	ldr	r2, [r2, #12]
 800575a:	0a12      	lsrs	r2, r2, #8
 800575c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
      break;
 8005766:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	0e5b      	lsrs	r3, r3, #25
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	3301      	adds	r3, #1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e001      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005788:	693b      	ldr	r3, [r7, #16]
}
 800578a:	4618      	mov	r0, r3
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40021000 	.word	0x40021000
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	016e3600 	.word	0x016e3600

080057a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000004 	.word	0x20000004

080057bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057c0:	f7ff fff0 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4904      	ldr	r1, [pc, #16]	; (80057e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000
 80057e4:	0800904c 	.word	0x0800904c

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057ec:	f7ff ffda 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0adb      	lsrs	r3, r3, #11
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4904      	ldr	r1, [pc, #16]	; (8005810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40021000 	.word	0x40021000
 8005810:	0800904c 	.word	0x0800904c

08005814 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d10c      	bne.n	8005852 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005842:	68d2      	ldr	r2, [r2, #12]
 8005844:	0a12      	lsrs	r2, r2, #8
 8005846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]
    break;
 8005850:	e00c      	b.n	800586c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800585c:	68d2      	ldr	r2, [r2, #12]
 800585e:	0a12      	lsrs	r2, r2, #8
 8005860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]
    break;
 800586a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	0e5b      	lsrs	r3, r3, #25
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005886:	687b      	ldr	r3, [r7, #4]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40021000 	.word	0x40021000
 8005898:	016e3600 	.word	0x016e3600
 800589c:	00f42400 	.word	0x00f42400

080058a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a8:	2300      	movs	r3, #0
 80058aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058ac:	2300      	movs	r3, #0
 80058ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8098 	beq.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6593      	str	r3, [r2, #88]	; 0x58
 80058da:	4b3d      	ldr	r3, [pc, #244]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	60bb      	str	r3, [r7, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e6:	2301      	movs	r3, #1
 80058e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ea:	4b3a      	ldr	r3, [pc, #232]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a39      	ldr	r2, [pc, #228]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058f6:	f7fc fd3f 	bl	8002378 <HAL_GetTick>
 80058fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058fc:	e009      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fe:	f7fc fd3b 	bl	8002378 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d902      	bls.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	74fb      	strb	r3, [r7, #19]
        break;
 8005910:	e005      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ef      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d159      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005924:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01e      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	429a      	cmp	r2, r3
 800593e:	d019      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005940:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800594c:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800595c:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800596c:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fc fcfb 	bl	8002378 <HAL_GetTick>
 8005982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005984:	e00b      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fc fcf7 	bl	8002378 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d902      	bls.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	74fb      	strb	r3, [r7, #19]
            break;
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ec      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059b2:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c0:	4903      	ldr	r1, [pc, #12]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059c8:	e008      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	74bb      	strb	r3, [r7, #18]
 80059ce:	e005      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	7cfb      	ldrb	r3, [r7, #19]
 80059da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059dc:	7c7b      	ldrb	r3, [r7, #17]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d105      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e2:	4ba7      	ldr	r3, [pc, #668]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	4aa6      	ldr	r2, [pc, #664]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059fa:	4ba1      	ldr	r3, [pc, #644]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 0203 	bic.w	r2, r3, #3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	499d      	ldr	r1, [pc, #628]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a1c:	4b98      	ldr	r3, [pc, #608]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 020c 	bic.w	r2, r3, #12
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4995      	ldr	r1, [pc, #596]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a3e:	4b90      	ldr	r3, [pc, #576]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	498c      	ldr	r1, [pc, #560]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a60:	4b87      	ldr	r3, [pc, #540]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	4984      	ldr	r1, [pc, #528]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a82:	4b7f      	ldr	r3, [pc, #508]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	497b      	ldr	r1, [pc, #492]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aa4:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	4973      	ldr	r1, [pc, #460]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac6:	4b6e      	ldr	r3, [pc, #440]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	496a      	ldr	r1, [pc, #424]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ae8:	4b65      	ldr	r3, [pc, #404]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4962      	ldr	r1, [pc, #392]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b0a:	4b5d      	ldr	r3, [pc, #372]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	4959      	ldr	r1, [pc, #356]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b2c:	4b54      	ldr	r3, [pc, #336]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b32:	f023 0203 	bic.w	r2, r3, #3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	4951      	ldr	r1, [pc, #324]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4948      	ldr	r1, [pc, #288]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b70:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	4940      	ldr	r1, [pc, #256]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b90:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d015      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba8:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	4932      	ldr	r1, [pc, #200]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc6:	d105      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a2c      	ldr	r2, [pc, #176]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	4924      	ldr	r1, [pc, #144]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d015      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	4916      	ldr	r1, [pc, #88]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c36:	d105      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d019      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	4908      	ldr	r1, [pc, #32]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a02      	ldr	r2, [pc, #8]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7a:	60d3      	str	r3, [r2, #12]
 8005c7c:	e002      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d015      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	4926      	ldr	r1, [pc, #152]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cae:	d105      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cb0:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	4918      	ldr	r1, [pc, #96]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	490a      	ldr	r1, [pc, #40]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000

08005d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e049      	b.n	8005de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc f92e 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f000 ff68 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e04c      	b.n	8005e9e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a26      	ldr	r2, [pc, #152]	; (8005eac <HAL_TIM_Base_Start+0xc0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d01d      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <HAL_TIM_Base_Start+0xc4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <HAL_TIM_Base_Start+0xc8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1f      	ldr	r2, [pc, #124]	; (8005eb8 <HAL_TIM_Base_Start+0xcc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1e      	ldr	r2, [pc, #120]	; (8005ebc <HAL_TIM_Base_Start+0xd0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <HAL_TIM_Base_Start+0xd4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIM_Base_Start+0x70>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <HAL_TIM_Base_Start+0xd8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d115      	bne.n	8005e88 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_TIM_Base_Start+0xdc>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d015      	beq.n	8005e9a <HAL_TIM_Base_Start+0xae>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d011      	beq.n	8005e9a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e86:	e008      	b.n	8005e9a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40015000 	.word	0x40015000
 8005ec8:	00010007 	.word	0x00010007

08005ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d001      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e054      	b.n	8005f8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a26      	ldr	r2, [pc, #152]	; (8005f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d01d      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a22      	ldr	r2, [pc, #136]	; (8005fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a21      	ldr	r2, [pc, #132]	; (8005fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <HAL_TIM_Base_Start_IT+0xe0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x80>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1b      	ldr	r2, [pc, #108]	; (8005fb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d115      	bne.n	8005f78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d015      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0xbe>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d011      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f76:	e008      	b.n	8005f8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e000      	b.n	8005f8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40015000 	.word	0x40015000
 8005fb8:	00010007 	.word	0x00010007

08005fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e049      	b.n	8006062 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f841 	bl	800606a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 fe28 	bl	8006c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x24>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e03c      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d109      	bne.n	80060be <HAL_TIM_PWM_Start+0x3e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e02f      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start+0x58>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x72>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start+0x8c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0a6      	b.n	8006274 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xb6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	e023      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b04      	cmp	r3, #4
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xc6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006144:	e01b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xd6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006154:	e013      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xe6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006164:	e00b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0xf6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006174:	e003      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f9dc 	bl	8007544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a3a      	ldr	r2, [pc, #232]	; (800627c <HAL_TIM_PWM_Start+0x1fc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a39      	ldr	r2, [pc, #228]	; (8006280 <HAL_TIM_PWM_Start+0x200>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a37      	ldr	r2, [pc, #220]	; (8006284 <HAL_TIM_PWM_Start+0x204>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a36      	ldr	r2, [pc, #216]	; (8006288 <HAL_TIM_PWM_Start+0x208>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a34      	ldr	r2, [pc, #208]	; (800628c <HAL_TIM_PWM_Start+0x20c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a33      	ldr	r2, [pc, #204]	; (8006290 <HAL_TIM_PWM_Start+0x210>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_TIM_PWM_Start+0x14c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_TIM_PWM_Start+0x14e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a25      	ldr	r2, [pc, #148]	; (800627c <HAL_TIM_PWM_Start+0x1fc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d01d      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a26      	ldr	r2, [pc, #152]	; (8006294 <HAL_TIM_PWM_Start+0x214>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <HAL_TIM_PWM_Start+0x218>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_TIM_PWM_Start+0x21c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_TIM_PWM_Start+0x200>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIM_PWM_Start+0x204>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_TIM_PWM_Start+0x210>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d115      	bne.n	800625e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <HAL_TIM_PWM_Start+0x220>)
 800623a:	4013      	ands	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b06      	cmp	r3, #6
 8006242:	d015      	beq.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d011      	beq.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	e008      	b.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e000      	b.n	8006272 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006270:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800
 8006290:	40015000 	.word	0x40015000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	00010007 	.word	0x00010007

080062a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e097      	b.n	80063e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fb feb3 	bl	8002038 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f000 fca9 	bl	8006c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	4313      	orrs	r3, r2
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006344:	f023 030c 	bic.w	r3, r3, #12
 8006348:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	4313      	orrs	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	011a      	lsls	r2, r3, #4
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	031b      	lsls	r3, r3, #12
 8006374:	4313      	orrs	r3, r2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	4313      	orrs	r3, r2
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006400:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006408:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006410:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006418:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d110      	bne.n	8006442 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d102      	bne.n	800642c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006426:	7b7b      	ldrb	r3, [r7, #13]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e069      	b.n	8006504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006440:	e031      	b.n	80064a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b04      	cmp	r3, #4
 8006446:	d110      	bne.n	800646a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d102      	bne.n	8006454 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800644e:	7b3b      	ldrb	r3, [r7, #12]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d001      	beq.n	8006458 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e055      	b.n	8006504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006468:	e01d      	b.n	80064a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d108      	bne.n	8006482 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d105      	bne.n	8006482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006476:	7b7b      	ldrb	r3, [r7, #13]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d102      	bne.n	8006482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800647c:	7b3b      	ldrb	r3, [r7, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e03e      	b.n	8006504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_TIM_Encoder_Start+0xc4>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d008      	beq.n	80064c4 <HAL_TIM_Encoder_Start+0xd4>
 80064b2:	e00f      	b.n	80064d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2201      	movs	r2, #1
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f841 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 80064c2:	e016      	b.n	80064f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	2104      	movs	r1, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f839 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 80064d2:	e00e      	b.n	80064f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 f831 	bl	8007544 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	2104      	movs	r1, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f82a 	bl	8007544 <TIM_CCxChannelCmd>
      break;
 80064f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d020      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0202 	mvn.w	r2, #2
 8006540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fb5c 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fb4e 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fb5f 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01b      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb36 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb28 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb39 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d020      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0208 	mvn.w	r2, #8
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fb10 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb02 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fb13 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d020      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0210 	mvn.w	r2, #16
 8006624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2208      	movs	r2, #8
 800662a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 faea 	bl	8006c14 <HAL_TIM_IC_CaptureCallback>
 8006640:	e005      	b.n	800664e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fadc 	bl	8006c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 faed 	bl	8006c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0201 	mvn.w	r2, #1
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb fa2c 	bl	8001ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 f8a9 	bl	80077f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00c      	beq.n	80066ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f8a1 	bl	800780c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 faa7 	bl	8006c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f06f 0220 	mvn.w	r2, #32
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f869 	bl	80077e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800672e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f875 	bl	8007820 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f86d 	bl	8007834 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f865 	bl	8007848 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f85d 	bl	800785c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e0ff      	b.n	80069ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b14      	cmp	r3, #20
 80067d6:	f200 80f0 	bhi.w	80069ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006835 	.word	0x08006835
 80067e4:	080069bb 	.word	0x080069bb
 80067e8:	080069bb 	.word	0x080069bb
 80067ec:	080069bb 	.word	0x080069bb
 80067f0:	08006875 	.word	0x08006875
 80067f4:	080069bb 	.word	0x080069bb
 80067f8:	080069bb 	.word	0x080069bb
 80067fc:	080069bb 	.word	0x080069bb
 8006800:	080068b7 	.word	0x080068b7
 8006804:	080069bb 	.word	0x080069bb
 8006808:	080069bb 	.word	0x080069bb
 800680c:	080069bb 	.word	0x080069bb
 8006810:	080068f7 	.word	0x080068f7
 8006814:	080069bb 	.word	0x080069bb
 8006818:	080069bb 	.word	0x080069bb
 800681c:	080069bb 	.word	0x080069bb
 8006820:	08006939 	.word	0x08006939
 8006824:	080069bb 	.word	0x080069bb
 8006828:	080069bb 	.word	0x080069bb
 800682c:	080069bb 	.word	0x080069bb
 8006830:	08006979 	.word	0x08006979
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fabc 	bl	8006db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0208 	orr.w	r2, r2, #8
 800684e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0204 	bic.w	r2, r2, #4
 800685e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	619a      	str	r2, [r3, #24]
      break;
 8006872:	e0a5      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb36 	bl	8006eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800689e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6999      	ldr	r1, [r3, #24]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	021a      	lsls	r2, r3, #8
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	619a      	str	r2, [r3, #24]
      break;
 80068b4:	e084      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fba9 	bl	8007014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0208 	orr.w	r2, r2, #8
 80068d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0204 	bic.w	r2, r2, #4
 80068e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69d9      	ldr	r1, [r3, #28]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	61da      	str	r2, [r3, #28]
      break;
 80068f4:	e064      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fc1b 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69d9      	ldr	r1, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	021a      	lsls	r2, r3, #8
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	61da      	str	r2, [r3, #28]
      break;
 8006936:	e043      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fc8e 	bl	8007260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0208 	orr.w	r2, r2, #8
 8006952:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0204 	bic.w	r2, r2, #4
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006976:	e023      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fcd8 	bl	8007334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006992:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	021a      	lsls	r2, r3, #8
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80069b8:	e002      	b.n	80069c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
      break;
 80069be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop

080069d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e0f6      	b.n	8006bde <HAL_TIM_ConfigClockSource+0x20a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a6f      	ldr	r2, [pc, #444]	; (8006be8 <HAL_TIM_ConfigClockSource+0x214>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	f000 80c1 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a30:	4a6d      	ldr	r2, [pc, #436]	; (8006be8 <HAL_TIM_ConfigClockSource+0x214>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	f200 80c6 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a38:	4a6c      	ldr	r2, [pc, #432]	; (8006bec <HAL_TIM_ConfigClockSource+0x218>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	f000 80b9 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a40:	4a6a      	ldr	r2, [pc, #424]	; (8006bec <HAL_TIM_ConfigClockSource+0x218>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	f200 80be 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a48:	4a69      	ldr	r2, [pc, #420]	; (8006bf0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	f000 80b1 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a50:	4a67      	ldr	r2, [pc, #412]	; (8006bf0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f200 80b6 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a58:	4a66      	ldr	r2, [pc, #408]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x220>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	f000 80a9 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a60:	4a64      	ldr	r2, [pc, #400]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x220>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	f200 80ae 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a68:	4a63      	ldr	r2, [pc, #396]	; (8006bf8 <HAL_TIM_ConfigClockSource+0x224>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f000 80a1 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a70:	4a61      	ldr	r2, [pc, #388]	; (8006bf8 <HAL_TIM_ConfigClockSource+0x224>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	f200 80a6 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a78:	4a60      	ldr	r2, [pc, #384]	; (8006bfc <HAL_TIM_ConfigClockSource+0x228>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	f000 8099 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a80:	4a5e      	ldr	r2, [pc, #376]	; (8006bfc <HAL_TIM_ConfigClockSource+0x228>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f200 809e 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a8c:	f000 8091 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006a90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a94:	f200 8096 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9c:	f000 8089 	beq.w	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa4:	f200 808e 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aac:	d03e      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x158>
 8006aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab2:	f200 8087 	bhi.w	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	f000 8086 	beq.w	8006bca <HAL_TIM_ConfigClockSource+0x1f6>
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d87f      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ac4:	2b70      	cmp	r3, #112	; 0x70
 8006ac6:	d01a      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x12a>
 8006ac8:	2b70      	cmp	r3, #112	; 0x70
 8006aca:	d87b      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006acc:	2b60      	cmp	r3, #96	; 0x60
 8006ace:	d050      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x19e>
 8006ad0:	2b60      	cmp	r3, #96	; 0x60
 8006ad2:	d877      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ad4:	2b50      	cmp	r3, #80	; 0x50
 8006ad6:	d03c      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x17e>
 8006ad8:	2b50      	cmp	r3, #80	; 0x50
 8006ada:	d873      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d058      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x1be>
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d86f      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ae4:	2b30      	cmp	r3, #48	; 0x30
 8006ae6:	d064      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ae8:	2b30      	cmp	r3, #48	; 0x30
 8006aea:	d86b      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d060      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d867      	bhi.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d05c      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	d05a      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x1de>
 8006afc:	e062      	b.n	8006bc4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b0e:	f000 fcf9 	bl	8007504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	609a      	str	r2, [r3, #8]
      break;
 8006b2a:	e04f      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b3c:	f000 fce2 	bl	8007504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4e:	609a      	str	r2, [r3, #8]
      break;
 8006b50:	e03c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fc54 	bl	800740c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2150      	movs	r1, #80	; 0x50
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fcad 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006b70:	e02c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 fc73 	bl	800746a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2160      	movs	r1, #96	; 0x60
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fc9d 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006b90:	e01c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 fc34 	bl	800740c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2140      	movs	r1, #64	; 0x40
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fc8d 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e00c      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f000 fc84 	bl	80074ca <TIM_ITRx_SetConfig>
      break;
 8006bc2:	e003      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc8:	e000      	b.n	8006bcc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	00100070 	.word	0x00100070
 8006bec:	00100060 	.word	0x00100060
 8006bf0:	00100050 	.word	0x00100050
 8006bf4:	00100040 	.word	0x00100040
 8006bf8:	00100030 	.word	0x00100030
 8006bfc:	00100020 	.word	0x00100020

08006c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <TIM_Base_SetConfig+0x144>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d017      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d013      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a49      	ldr	r2, [pc, #292]	; (8006d98 <TIM_Base_SetConfig+0x148>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a48      	ldr	r2, [pc, #288]	; (8006d9c <TIM_Base_SetConfig+0x14c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a47      	ldr	r2, [pc, #284]	; (8006da0 <TIM_Base_SetConfig+0x150>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <TIM_Base_SetConfig+0x154>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_Base_SetConfig+0x48>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a45      	ldr	r2, [pc, #276]	; (8006da8 <TIM_Base_SetConfig+0x158>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d108      	bne.n	8006caa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a39      	ldr	r2, [pc, #228]	; (8006d94 <TIM_Base_SetConfig+0x144>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d023      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb8:	d01f      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a36      	ldr	r2, [pc, #216]	; (8006d98 <TIM_Base_SetConfig+0x148>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01b      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a35      	ldr	r2, [pc, #212]	; (8006d9c <TIM_Base_SetConfig+0x14c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d017      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a34      	ldr	r2, [pc, #208]	; (8006da0 <TIM_Base_SetConfig+0x150>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <TIM_Base_SetConfig+0x154>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a33      	ldr	r2, [pc, #204]	; (8006dac <TIM_Base_SetConfig+0x15c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a32      	ldr	r2, [pc, #200]	; (8006db0 <TIM_Base_SetConfig+0x160>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a31      	ldr	r2, [pc, #196]	; (8006db4 <TIM_Base_SetConfig+0x164>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_Base_SetConfig+0xaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <TIM_Base_SetConfig+0x158>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d108      	bne.n	8006d0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <TIM_Base_SetConfig+0x144>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <TIM_Base_SetConfig+0x110>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <TIM_Base_SetConfig+0x154>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00f      	beq.n	8006d60 <TIM_Base_SetConfig+0x110>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1a      	ldr	r2, [pc, #104]	; (8006dac <TIM_Base_SetConfig+0x15c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_Base_SetConfig+0x110>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <TIM_Base_SetConfig+0x160>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_Base_SetConfig+0x110>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <TIM_Base_SetConfig+0x164>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0x110>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <TIM_Base_SetConfig+0x158>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d103      	bne.n	8006d68 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d105      	bne.n	8006d86 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	611a      	str	r2, [r3, #16]
  }
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40013400 	.word	0x40013400
 8006da8:	40015000 	.word	0x40015000
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800

08006db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f023 0201 	bic.w	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 0302 	bic.w	r3, r3, #2
 8006e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a30      	ldr	r2, [pc, #192]	; (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <TIM_OC1_SetConfig+0x88>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <TIM_OC1_SetConfig+0x120>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00f      	beq.n	8006e40 <TIM_OC1_SetConfig+0x88>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2e      	ldr	r2, [pc, #184]	; (8006edc <TIM_OC1_SetConfig+0x124>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC1_SetConfig+0x88>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <TIM_OC1_SetConfig+0x128>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC1_SetConfig+0x88>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <TIM_OC1_SetConfig+0x12c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC1_SetConfig+0x88>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ee8 <TIM_OC1_SetConfig+0x130>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10c      	bne.n	8006e5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0308 	bic.w	r3, r3, #8
 8006e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f023 0304 	bic.w	r3, r3, #4
 8006e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_OC1_SetConfig+0xd2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <TIM_OC1_SetConfig+0x120>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_OC1_SetConfig+0xd2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <TIM_OC1_SetConfig+0x124>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_OC1_SetConfig+0xd2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <TIM_OC1_SetConfig+0x128>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_OC1_SetConfig+0xd2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <TIM_OC1_SetConfig+0x12c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC1_SetConfig+0xd2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <TIM_OC1_SetConfig+0x130>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	621a      	str	r2, [r3, #32]
}
 8006ec8:	bf00      	nop
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800
 8006ee8:	40015000 	.word	0x40015000

08006eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f023 0210 	bic.w	r2, r3, #16
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0320 	bic.w	r3, r3, #32
 8006f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a2c      	ldr	r2, [pc, #176]	; (8006ffc <TIM_OC2_SetConfig+0x110>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_OC2_SetConfig+0x74>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <TIM_OC2_SetConfig+0x114>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_OC2_SetConfig+0x74>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2a      	ldr	r2, [pc, #168]	; (8007004 <TIM_OC2_SetConfig+0x118>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d10d      	bne.n	8006f7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <TIM_OC2_SetConfig+0x110>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <TIM_OC2_SetConfig+0xc0>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1e      	ldr	r2, [pc, #120]	; (8007000 <TIM_OC2_SetConfig+0x114>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00f      	beq.n	8006fac <TIM_OC2_SetConfig+0xc0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <TIM_OC2_SetConfig+0x11c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00b      	beq.n	8006fac <TIM_OC2_SetConfig+0xc0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1d      	ldr	r2, [pc, #116]	; (800700c <TIM_OC2_SetConfig+0x120>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d007      	beq.n	8006fac <TIM_OC2_SetConfig+0xc0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <TIM_OC2_SetConfig+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC2_SetConfig+0xc0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a17      	ldr	r2, [pc, #92]	; (8007004 <TIM_OC2_SetConfig+0x118>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d113      	bne.n	8006fd4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40013400 	.word	0x40013400
 8007004:	40015000 	.word	0x40015000
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800

08007014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <TIM_OC3_SetConfig+0x10c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d007      	beq.n	8007086 <TIM_OC3_SetConfig+0x72>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <TIM_OC3_SetConfig+0x110>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d003      	beq.n	8007086 <TIM_OC3_SetConfig+0x72>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a29      	ldr	r2, [pc, #164]	; (8007128 <TIM_OC3_SetConfig+0x114>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d10d      	bne.n	80070a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800708c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <TIM_OC3_SetConfig+0x10c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <TIM_OC3_SetConfig+0xbe>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <TIM_OC3_SetConfig+0x110>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00f      	beq.n	80070d2 <TIM_OC3_SetConfig+0xbe>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <TIM_OC3_SetConfig+0x118>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00b      	beq.n	80070d2 <TIM_OC3_SetConfig+0xbe>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <TIM_OC3_SetConfig+0x11c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_OC3_SetConfig+0xbe>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <TIM_OC3_SetConfig+0x120>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC3_SetConfig+0xbe>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <TIM_OC3_SetConfig+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d113      	bne.n	80070fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40013400 	.word	0x40013400
 8007128:	40015000 	.word	0x40015000
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a2c      	ldr	r2, [pc, #176]	; (8007248 <TIM_OC4_SetConfig+0x110>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_OC4_SetConfig+0x74>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a2b      	ldr	r2, [pc, #172]	; (800724c <TIM_OC4_SetConfig+0x114>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC4_SetConfig+0x74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <TIM_OC4_SetConfig+0x118>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d10d      	bne.n	80071c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <TIM_OC4_SetConfig+0x110>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d013      	beq.n	80071f8 <TIM_OC4_SetConfig+0xc0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1e      	ldr	r2, [pc, #120]	; (800724c <TIM_OC4_SetConfig+0x114>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_OC4_SetConfig+0xc0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <TIM_OC4_SetConfig+0x11c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC4_SetConfig+0xc0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <TIM_OC4_SetConfig+0x120>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC4_SetConfig+0xc0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a1c      	ldr	r2, [pc, #112]	; (800725c <TIM_OC4_SetConfig+0x124>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC4_SetConfig+0xc0>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a17      	ldr	r2, [pc, #92]	; (8007250 <TIM_OC4_SetConfig+0x118>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d113      	bne.n	8007220 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007206:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	019b      	lsls	r3, r3, #6
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40015000 	.word	0x40015000
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800

08007260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <TIM_OC5_SetConfig+0xbc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <TIM_OC5_SetConfig+0x82>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a18      	ldr	r2, [pc, #96]	; (8007320 <TIM_OC5_SetConfig+0xc0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00f      	beq.n	80072e2 <TIM_OC5_SetConfig+0x82>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a17      	ldr	r2, [pc, #92]	; (8007324 <TIM_OC5_SetConfig+0xc4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_OC5_SetConfig+0x82>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <TIM_OC5_SetConfig+0xc8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <TIM_OC5_SetConfig+0x82>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a15      	ldr	r2, [pc, #84]	; (800732c <TIM_OC5_SetConfig+0xcc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_OC5_SetConfig+0x82>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a14      	ldr	r2, [pc, #80]	; (8007330 <TIM_OC5_SetConfig+0xd0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d109      	bne.n	80072f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	621a      	str	r2, [r3, #32]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800
 8007330:	40015000 	.word	0x40015000

08007334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800737a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	051b      	lsls	r3, r3, #20
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1a      	ldr	r2, [pc, #104]	; (80073f4 <TIM_OC6_SetConfig+0xc0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_OC6_SetConfig+0x84>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <TIM_OC6_SetConfig+0xc4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00f      	beq.n	80073b8 <TIM_OC6_SetConfig+0x84>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <TIM_OC6_SetConfig+0xc8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_OC6_SetConfig+0x84>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a17      	ldr	r2, [pc, #92]	; (8007400 <TIM_OC6_SetConfig+0xcc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_OC6_SetConfig+0x84>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a16      	ldr	r2, [pc, #88]	; (8007404 <TIM_OC6_SetConfig+0xd0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC6_SetConfig+0x84>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <TIM_OC6_SetConfig+0xd4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d109      	bne.n	80073cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	029b      	lsls	r3, r3, #10
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40013400 	.word	0x40013400
 80073fc:	40014000 	.word	0x40014000
 8007400:	40014400 	.word	0x40014400
 8007404:	40014800 	.word	0x40014800
 8007408:	40015000 	.word	0x40015000

0800740c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f023 0201 	bic.w	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 030a 	bic.w	r3, r3, #10
 8007448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	bf00      	nop
 8007460:	371c      	adds	r7, #28
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800746a:	b480      	push	{r7}
 800746c:	b087      	sub	sp, #28
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f023 0210 	bic.w	r2, r3, #16
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	031b      	lsls	r3, r3, #12
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	621a      	str	r2, [r3, #32]
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f043 0307 	orr.w	r3, r3, #7
 80074f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	021a      	lsls	r2, r3, #8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	431a      	orrs	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4313      	orrs	r3, r2
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	609a      	str	r2, [r3, #8]
}
 8007538:	bf00      	nop
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2201      	movs	r2, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1a      	ldr	r2, [r3, #32]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	43db      	mvns	r3, r3
 8007566:	401a      	ands	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	fa01 f303 	lsl.w	r3, r1, r3
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e074      	b.n	8007692 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a34      	ldr	r2, [pc, #208]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a33      	ldr	r2, [pc, #204]	; (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a31      	ldr	r2, [pc, #196]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d108      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80075fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a21      	ldr	r2, [pc, #132]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d022      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007628:	d01d      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d018      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1d      	ldr	r2, [pc, #116]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d013      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00e      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d009      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10c      	bne.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800766c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4313      	orrs	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40013400 	.word	0x40013400
 80076a8:	40015000 	.word	0x40015000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40014000 	.word	0x40014000

080076bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e078      	b.n	80077ca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d11c      	bne.n	80077b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	051b      	lsls	r3, r3, #20
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40013400 	.word	0x40013400
 80077e0:	40015000 	.word	0x40015000

080077e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e042      	b.n	8007908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fa fafd 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	; 0x24
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fbb2 	bl	8008024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f8b3 	bl	8007a2c <UART_SetConfig>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e01b      	b.n	8007908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc31 	bl	8008168 <UART_CheckIdleState>
 8007906:	4603      	mov	r3, r0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af02      	add	r7, sp, #8
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007926:	2b20      	cmp	r3, #32
 8007928:	d17b      	bne.n	8007a22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_UART_Transmit+0x26>
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e074      	b.n	8007a24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2221      	movs	r2, #33	; 0x21
 8007946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800794a:	f7fa fd15 	bl	8002378 <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007968:	d108      	bne.n	800797c <HAL_UART_Transmit+0x6c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	e003      	b.n	8007984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007984:	e030      	b.n	80079e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	2180      	movs	r1, #128	; 0x80
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fc93 	bl	80082bc <UART_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e03d      	b.n	8007a24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10b      	bne.n	80079c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	3302      	adds	r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e007      	b.n	80079d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1c8      	bne.n	8007986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2140      	movs	r1, #64	; 0x40
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fc5c 	bl	80082bc <UART_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e006      	b.n	8007a24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e000      	b.n	8007a24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007a22:	2302      	movs	r3, #2
  }
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a30:	b08c      	sub	sp, #48	; 0x30
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4baa      	ldr	r3, [pc, #680]	; (8007d04 <UART_SetConfig+0x2d8>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a64:	430b      	orrs	r3, r1
 8007a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a9f      	ldr	r2, [pc, #636]	; (8007d08 <UART_SetConfig+0x2dc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d004      	beq.n	8007a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a94:	4313      	orrs	r3, r2
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	f023 010f 	bic.w	r1, r3, #15
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a90      	ldr	r2, [pc, #576]	; (8007d0c <UART_SetConfig+0x2e0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d125      	bne.n	8007b1c <UART_SetConfig+0xf0>
 8007ad0:	4b8f      	ldr	r3, [pc, #572]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d81a      	bhi.n	8007b14 <UART_SetConfig+0xe8>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0xb8>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007b05 	.word	0x08007b05
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007b0d 	.word	0x08007b0d
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afa:	e116      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007afc:	2302      	movs	r3, #2
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b02:	e112      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0a:	e10e      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b12:	e10a      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1a:	e106      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a7c      	ldr	r2, [pc, #496]	; (8007d14 <UART_SetConfig+0x2e8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d138      	bne.n	8007b98 <UART_SetConfig+0x16c>
 8007b26:	4b7a      	ldr	r3, [pc, #488]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	f003 030c 	and.w	r3, r3, #12
 8007b30:	2b0c      	cmp	r3, #12
 8007b32:	d82d      	bhi.n	8007b90 <UART_SetConfig+0x164>
 8007b34:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <UART_SetConfig+0x110>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b71 	.word	0x08007b71
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007b91 	.word	0x08007b91
 8007b48:	08007b91 	.word	0x08007b91
 8007b4c:	08007b81 	.word	0x08007b81
 8007b50:	08007b91 	.word	0x08007b91
 8007b54:	08007b91 	.word	0x08007b91
 8007b58:	08007b91 	.word	0x08007b91
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	08007b91 	.word	0x08007b91
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b89 	.word	0x08007b89
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e0d8      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	e0d4      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b86:	e0d0      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	e0cc      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b96:	e0c8      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a5e      	ldr	r2, [pc, #376]	; (8007d18 <UART_SetConfig+0x2ec>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d125      	bne.n	8007bee <UART_SetConfig+0x1c2>
 8007ba2:	4b5b      	ldr	r3, [pc, #364]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bac:	2b30      	cmp	r3, #48	; 0x30
 8007bae:	d016      	beq.n	8007bde <UART_SetConfig+0x1b2>
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d818      	bhi.n	8007be6 <UART_SetConfig+0x1ba>
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d00a      	beq.n	8007bce <UART_SetConfig+0x1a2>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d814      	bhi.n	8007be6 <UART_SetConfig+0x1ba>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <UART_SetConfig+0x19a>
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d008      	beq.n	8007bd6 <UART_SetConfig+0x1aa>
 8007bc4:	e00f      	b.n	8007be6 <UART_SetConfig+0x1ba>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bcc:	e0ad      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd4:	e0a9      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bdc:	e0a5      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007bde:	2308      	movs	r3, #8
 8007be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be4:	e0a1      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007be6:	2310      	movs	r3, #16
 8007be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bec:	e09d      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a4a      	ldr	r2, [pc, #296]	; (8007d1c <UART_SetConfig+0x2f0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d125      	bne.n	8007c44 <UART_SetConfig+0x218>
 8007bf8:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c02:	2bc0      	cmp	r3, #192	; 0xc0
 8007c04:	d016      	beq.n	8007c34 <UART_SetConfig+0x208>
 8007c06:	2bc0      	cmp	r3, #192	; 0xc0
 8007c08:	d818      	bhi.n	8007c3c <UART_SetConfig+0x210>
 8007c0a:	2b80      	cmp	r3, #128	; 0x80
 8007c0c:	d00a      	beq.n	8007c24 <UART_SetConfig+0x1f8>
 8007c0e:	2b80      	cmp	r3, #128	; 0x80
 8007c10:	d814      	bhi.n	8007c3c <UART_SetConfig+0x210>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <UART_SetConfig+0x1f0>
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	d008      	beq.n	8007c2c <UART_SetConfig+0x200>
 8007c1a:	e00f      	b.n	8007c3c <UART_SetConfig+0x210>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e082      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c24:	2302      	movs	r3, #2
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e07e      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e07a      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c34:	2308      	movs	r3, #8
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3a:	e076      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c42:	e072      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a35      	ldr	r2, [pc, #212]	; (8007d20 <UART_SetConfig+0x2f4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d12a      	bne.n	8007ca4 <UART_SetConfig+0x278>
 8007c4e:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5c:	d01a      	beq.n	8007c94 <UART_SetConfig+0x268>
 8007c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c62:	d81b      	bhi.n	8007c9c <UART_SetConfig+0x270>
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c68:	d00c      	beq.n	8007c84 <UART_SetConfig+0x258>
 8007c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6e:	d815      	bhi.n	8007c9c <UART_SetConfig+0x270>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <UART_SetConfig+0x250>
 8007c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c78:	d008      	beq.n	8007c8c <UART_SetConfig+0x260>
 8007c7a:	e00f      	b.n	8007c9c <UART_SetConfig+0x270>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e052      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e04e      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e04a      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e046      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	e042      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <UART_SetConfig+0x2dc>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d13a      	bne.n	8007d24 <UART_SetConfig+0x2f8>
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <UART_SetConfig+0x2e4>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cbc:	d01a      	beq.n	8007cf4 <UART_SetConfig+0x2c8>
 8007cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc2:	d81b      	bhi.n	8007cfc <UART_SetConfig+0x2d0>
 8007cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc8:	d00c      	beq.n	8007ce4 <UART_SetConfig+0x2b8>
 8007cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cce:	d815      	bhi.n	8007cfc <UART_SetConfig+0x2d0>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <UART_SetConfig+0x2b0>
 8007cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd8:	d008      	beq.n	8007cec <UART_SetConfig+0x2c0>
 8007cda:	e00f      	b.n	8007cfc <UART_SetConfig+0x2d0>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce2:	e022      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cea:	e01e      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007cec:	2304      	movs	r3, #4
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e01a      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfa:	e016      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d02:	e012      	b.n	8007d2a <UART_SetConfig+0x2fe>
 8007d04:	cfff69f3 	.word	0xcfff69f3
 8007d08:	40008000 	.word	0x40008000
 8007d0c:	40013800 	.word	0x40013800
 8007d10:	40021000 	.word	0x40021000
 8007d14:	40004400 	.word	0x40004400
 8007d18:	40004800 	.word	0x40004800
 8007d1c:	40004c00 	.word	0x40004c00
 8007d20:	40005000 	.word	0x40005000
 8007d24:	2310      	movs	r3, #16
 8007d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4aae      	ldr	r2, [pc, #696]	; (8007fe8 <UART_SetConfig+0x5bc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	f040 8097 	bne.w	8007e64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d823      	bhi.n	8007d86 <UART_SetConfig+0x35a>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <UART_SetConfig+0x318>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d87 	.word	0x08007d87
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d87 	.word	0x08007d87
 8007d54:	08007d77 	.word	0x08007d77
 8007d58:	08007d87 	.word	0x08007d87
 8007d5c:	08007d87 	.word	0x08007d87
 8007d60:	08007d87 	.word	0x08007d87
 8007d64:	08007d7f 	.word	0x08007d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d68:	f7fd fd28 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007d6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d6e:	e010      	b.n	8007d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d70:	4b9e      	ldr	r3, [pc, #632]	; (8007fec <UART_SetConfig+0x5c0>)
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d74:	e00d      	b.n	8007d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fd fcb3 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 8007d7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d7c:	e009      	b.n	8007d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d84:	e005      	b.n	8007d92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8130 	beq.w	8007ffa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	4a94      	ldr	r2, [pc, #592]	; (8007ff0 <UART_SetConfig+0x5c4>)
 8007da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	4613      	mov	r3, r2
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d305      	bcc.n	8007dca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d903      	bls.n	8007dd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dd0:	e113      	b.n	8007ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	60bb      	str	r3, [r7, #8]
 8007dd8:	60fa      	str	r2, [r7, #12]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	4a84      	ldr	r2, [pc, #528]	; (8007ff0 <UART_SetConfig+0x5c4>)
 8007de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2200      	movs	r2, #0
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007df4:	f7f8 fe82 	bl	8000afc <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	020b      	lsls	r3, r1, #8
 8007e0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e0e:	0202      	lsls	r2, r0, #8
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	6849      	ldr	r1, [r1, #4]
 8007e14:	0849      	lsrs	r1, r1, #1
 8007e16:	2000      	movs	r0, #0
 8007e18:	460c      	mov	r4, r1
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	eb12 0804 	adds.w	r8, r2, r4
 8007e20:	eb43 0905 	adc.w	r9, r3, r5
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	469a      	mov	sl, r3
 8007e2c:	4693      	mov	fp, r2
 8007e2e:	4652      	mov	r2, sl
 8007e30:	465b      	mov	r3, fp
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 fe61 	bl	8000afc <__aeabi_uldivmod>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4613      	mov	r3, r2
 8007e40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e48:	d308      	bcc.n	8007e5c <UART_SetConfig+0x430>
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e50:	d204      	bcs.n	8007e5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a3a      	ldr	r2, [r7, #32]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	e0ce      	b.n	8007ffa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e62:	e0ca      	b.n	8007ffa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6c:	d166      	bne.n	8007f3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d827      	bhi.n	8007ec6 <UART_SetConfig+0x49a>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <UART_SetConfig+0x450>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ea9 	.word	0x08007ea9
 8007e84:	08007eb1 	.word	0x08007eb1
 8007e88:	08007ec7 	.word	0x08007ec7
 8007e8c:	08007eb7 	.word	0x08007eb7
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007ec7 	.word	0x08007ec7
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea0:	f7fd fc8c 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ea6:	e014      	b.n	8007ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea8:	f7fd fc9e 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b4e      	ldr	r3, [pc, #312]	; (8007fec <UART_SetConfig+0x5c0>)
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fd fc13 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 8007eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8090 	beq.w	8007ffa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	4a44      	ldr	r2, [pc, #272]	; (8007ff0 <UART_SetConfig+0x5c4>)
 8007ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d916      	bls.n	8007f34 <UART_SetConfig+0x508>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d212      	bcs.n	8007f34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f023 030f 	bic.w	r3, r3, #15
 8007f16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	8bfb      	ldrh	r3, [r7, #30]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	8bfa      	ldrh	r2, [r7, #30]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e062      	b.n	8007ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f3a:	e05e      	b.n	8007ffa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d828      	bhi.n	8007f96 <UART_SetConfig+0x56a>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x520>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f97 	.word	0x08007f97
 8007f5c:	08007f87 	.word	0x08007f87
 8007f60:	08007f97 	.word	0x08007f97
 8007f64:	08007f97 	.word	0x08007f97
 8007f68:	08007f97 	.word	0x08007f97
 8007f6c:	08007f8f 	.word	0x08007f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f70:	f7fd fc24 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f76:	e014      	b.n	8007fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f78:	f7fd fc36 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8007f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f7e:	e010      	b.n	8007fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f80:	4b1a      	ldr	r3, [pc, #104]	; (8007fec <UART_SetConfig+0x5c0>)
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f84:	e00d      	b.n	8007fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f86:	f7fd fbab 	bl	80056e0 <HAL_RCC_GetSysClockFreq>
 8007f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f8c:	e009      	b.n	8007fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f94:	e005      	b.n	8007fa2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d028      	beq.n	8007ffa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <UART_SetConfig+0x5c4>)
 8007fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	441a      	add	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	2b0f      	cmp	r3, #15
 8007fd0:	d910      	bls.n	8007ff4 <UART_SetConfig+0x5c8>
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd8:	d20c      	bcs.n	8007ff4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60da      	str	r2, [r3, #12]
 8007fe4:	e009      	b.n	8007ffa <UART_SetConfig+0x5ce>
 8007fe6:	bf00      	nop
 8007fe8:	40008000 	.word	0x40008000
 8007fec:	00f42400 	.word	0x00f42400
 8007ff0:	08009054 	.word	0x08009054
      }
      else
      {
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2201      	movs	r2, #1
 8008006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2200      	movs	r2, #0
 800800e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2200      	movs	r2, #0
 8008014:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008016:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800801a:	4618      	mov	r0, r3
 800801c:	3730      	adds	r7, #48	; 0x30
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00a      	beq.n	80080d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01a      	beq.n	800813a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008122:	d10a      	bne.n	800813a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]
  }
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b098      	sub	sp, #96	; 0x60
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008178:	f7fa f8fe 	bl	8002378 <HAL_GetTick>
 800817c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0308 	and.w	r3, r3, #8
 8008188:	2b08      	cmp	r3, #8
 800818a:	d12f      	bne.n	80081ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f88e 	bl	80082bc <UART_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d022      	beq.n	80081ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ba:	653b      	str	r3, [r7, #80]	; 0x50
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c4:	647b      	str	r3, [r7, #68]	; 0x44
 80081c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e6      	bne.n	80081a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e063      	b.n	80082b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d149      	bne.n	800828e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008202:	2200      	movs	r2, #0
 8008204:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f857 	bl	80082bc <UART_WaitOnFlagUntilTimeout>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d03c      	beq.n	800828e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	623b      	str	r3, [r7, #32]
   return(result);
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008232:	633b      	str	r3, [r7, #48]	; 0x30
 8008234:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e6      	bne.n	8008214 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60fb      	str	r3, [r7, #12]
   return(result);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	64bb      	str	r3, [r7, #72]	; 0x48
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008266:	61fa      	str	r2, [r7, #28]
 8008268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69b9      	ldr	r1, [r7, #24]
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	617b      	str	r3, [r7, #20]
   return(result);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e012      	b.n	80082b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3758      	adds	r7, #88	; 0x58
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082cc:	e04f      	b.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d04b      	beq.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082d6:	f7fa f84f 	bl	8002378 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <UART_WaitOnFlagUntilTimeout+0x30>
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e04e      	b.n	800838e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d037      	beq.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b80      	cmp	r3, #128	; 0x80
 8008302:	d034      	beq.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d031      	beq.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b08      	cmp	r3, #8
 8008316:	d110      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2208      	movs	r2, #8
 800831e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f838 	bl	8008396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2208      	movs	r2, #8
 800832a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e029      	b.n	800838e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008348:	d111      	bne.n	800836e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f81e 	bl	8008396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e00f      	b.n	800838e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4013      	ands	r3, r2
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	429a      	cmp	r2, r3
 800837c:	bf0c      	ite	eq
 800837e:	2301      	moveq	r3, #1
 8008380:	2300      	movne	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	461a      	mov	r2, r3
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	429a      	cmp	r2, r3
 800838a:	d0a0      	beq.n	80082ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008396:	b480      	push	{r7}
 8008398:	b095      	sub	sp, #84	; 0x54
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083bc:	643b      	str	r3, [r7, #64]	; 0x40
 80083be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3308      	adds	r3, #8
 80083d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e3      	bne.n	80083d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840c:	2b01      	cmp	r3, #1
 800840e:	d118      	bne.n	8008442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	60bb      	str	r3, [r7, #8]
   return(result);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f023 0310 	bic.w	r3, r3, #16
 8008424:	647b      	str	r3, [r7, #68]	; 0x44
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	613b      	str	r3, [r7, #16]
   return(result);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e6      	bne.n	8008410 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008456:	bf00      	nop
 8008458:	3754      	adds	r7, #84	; 0x54
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_UARTEx_DisableFifoMode+0x16>
 8008474:	2302      	movs	r3, #2
 8008476:	e027      	b.n	80084c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e02d      	b.n	8008548 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2224      	movs	r2, #36	; 0x24
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f84f 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e02d      	b.n	80085c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	; 0x24
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f811 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ec:	e031      	b.n	8008652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ee:	2308      	movs	r3, #8
 80085f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f2:	2308      	movs	r3, #8
 80085f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	0e5b      	lsrs	r3, r3, #25
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	0f5b      	lsrs	r3, r3, #29
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	7b3a      	ldrb	r2, [r7, #12]
 800861a:	4911      	ldr	r1, [pc, #68]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800861c:	5c8a      	ldrb	r2, [r1, r2]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008622:	7b3a      	ldrb	r2, [r7, #12]
 8008624:	490f      	ldr	r1, [pc, #60]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008628:	fb93 f3f2 	sdiv	r3, r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	7b7a      	ldrb	r2, [r7, #13]
 8008638:	4909      	ldr	r1, [pc, #36]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800863a:	5c8a      	ldrb	r2, [r1, r2]
 800863c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008640:	7b7a      	ldrb	r2, [r7, #13]
 8008642:	4908      	ldr	r1, [pc, #32]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008646:	fb93 f3f2 	sdiv	r3, r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	0800906c 	.word	0x0800906c
 8008664:	08009074 	.word	0x08009074

08008668 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	ed93 7a06 	vldr	s14, [r3, #24]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	edd3 7a07 	vldr	s15, [r3, #28]
 800867e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	edd3 7a08 	vldr	s15, [r3, #32]
 8008688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	edd3 7a06 	vldr	s15, [r3, #24]
 8008698:	eeb1 7a67 	vneg.f32	s14, s15
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	edd3 7a08 	vldr	s15, [r3, #32]
 80086a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80086a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1a      	ldr	r2, [r3, #32]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d006      	beq.n	80086cc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	330c      	adds	r3, #12
 80086c2:	220c      	movs	r2, #12
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f824 	bl	8008714 <memset>
  }

}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <siprintf>:
 80086d4:	b40e      	push	{r1, r2, r3}
 80086d6:	b500      	push	{lr}
 80086d8:	b09c      	sub	sp, #112	; 0x70
 80086da:	ab1d      	add	r3, sp, #116	; 0x74
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	9006      	str	r0, [sp, #24]
 80086e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086e4:	4809      	ldr	r0, [pc, #36]	; (800870c <siprintf+0x38>)
 80086e6:	9107      	str	r1, [sp, #28]
 80086e8:	9104      	str	r1, [sp, #16]
 80086ea:	4909      	ldr	r1, [pc, #36]	; (8008710 <siprintf+0x3c>)
 80086ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f0:	9105      	str	r1, [sp, #20]
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	a902      	add	r1, sp, #8
 80086f8:	f000 f9a0 	bl	8008a3c <_svfiprintf_r>
 80086fc:	9b02      	ldr	r3, [sp, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	b01c      	add	sp, #112	; 0x70
 8008704:	f85d eb04 	ldr.w	lr, [sp], #4
 8008708:	b003      	add	sp, #12
 800870a:	4770      	bx	lr
 800870c:	2000005c 	.word	0x2000005c
 8008710:	ffff0208 	.word	0xffff0208

08008714 <memset>:
 8008714:	4402      	add	r2, r0
 8008716:	4603      	mov	r3, r0
 8008718:	4293      	cmp	r3, r2
 800871a:	d100      	bne.n	800871e <memset+0xa>
 800871c:	4770      	bx	lr
 800871e:	f803 1b01 	strb.w	r1, [r3], #1
 8008722:	e7f9      	b.n	8008718 <memset+0x4>

08008724 <__errno>:
 8008724:	4b01      	ldr	r3, [pc, #4]	; (800872c <__errno+0x8>)
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	2000005c 	.word	0x2000005c

08008730 <__libc_init_array>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	4d0d      	ldr	r5, [pc, #52]	; (8008768 <__libc_init_array+0x38>)
 8008734:	4c0d      	ldr	r4, [pc, #52]	; (800876c <__libc_init_array+0x3c>)
 8008736:	1b64      	subs	r4, r4, r5
 8008738:	10a4      	asrs	r4, r4, #2
 800873a:	2600      	movs	r6, #0
 800873c:	42a6      	cmp	r6, r4
 800873e:	d109      	bne.n	8008754 <__libc_init_array+0x24>
 8008740:	4d0b      	ldr	r5, [pc, #44]	; (8008770 <__libc_init_array+0x40>)
 8008742:	4c0c      	ldr	r4, [pc, #48]	; (8008774 <__libc_init_array+0x44>)
 8008744:	f000 fc6a 	bl	800901c <_init>
 8008748:	1b64      	subs	r4, r4, r5
 800874a:	10a4      	asrs	r4, r4, #2
 800874c:	2600      	movs	r6, #0
 800874e:	42a6      	cmp	r6, r4
 8008750:	d105      	bne.n	800875e <__libc_init_array+0x2e>
 8008752:	bd70      	pop	{r4, r5, r6, pc}
 8008754:	f855 3b04 	ldr.w	r3, [r5], #4
 8008758:	4798      	blx	r3
 800875a:	3601      	adds	r6, #1
 800875c:	e7ee      	b.n	800873c <__libc_init_array+0xc>
 800875e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008762:	4798      	blx	r3
 8008764:	3601      	adds	r6, #1
 8008766:	e7f2      	b.n	800874e <__libc_init_array+0x1e>
 8008768:	080090b8 	.word	0x080090b8
 800876c:	080090b8 	.word	0x080090b8
 8008770:	080090b8 	.word	0x080090b8
 8008774:	080090bc 	.word	0x080090bc

08008778 <__retarget_lock_acquire_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_release_recursive>:
 800877a:	4770      	bx	lr

0800877c <memcpy>:
 800877c:	440a      	add	r2, r1
 800877e:	4291      	cmp	r1, r2
 8008780:	f100 33ff 	add.w	r3, r0, #4294967295
 8008784:	d100      	bne.n	8008788 <memcpy+0xc>
 8008786:	4770      	bx	lr
 8008788:	b510      	push	{r4, lr}
 800878a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008792:	4291      	cmp	r1, r2
 8008794:	d1f9      	bne.n	800878a <memcpy+0xe>
 8008796:	bd10      	pop	{r4, pc}

08008798 <_free_r>:
 8008798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800879a:	2900      	cmp	r1, #0
 800879c:	d044      	beq.n	8008828 <_free_r+0x90>
 800879e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a2:	9001      	str	r0, [sp, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f1a1 0404 	sub.w	r4, r1, #4
 80087aa:	bfb8      	it	lt
 80087ac:	18e4      	addlt	r4, r4, r3
 80087ae:	f000 f8df 	bl	8008970 <__malloc_lock>
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <_free_r+0x94>)
 80087b4:	9801      	ldr	r0, [sp, #4]
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	b933      	cbnz	r3, 80087c8 <_free_r+0x30>
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	b003      	add	sp, #12
 80087c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c4:	f000 b8da 	b.w	800897c <__malloc_unlock>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d908      	bls.n	80087de <_free_r+0x46>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	1961      	adds	r1, r4, r5
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf01      	itttt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	1949      	addeq	r1, r1, r5
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	e7ed      	b.n	80087ba <_free_r+0x22>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x50>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x46>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x70>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1e0      	bne.n	80087be <_free_r+0x26>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	440c      	add	r4, r1
 8008804:	6014      	str	r4, [r2, #0]
 8008806:	e7da      	b.n	80087be <_free_r+0x26>
 8008808:	d902      	bls.n	8008810 <_free_r+0x78>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d6      	b.n	80087be <_free_r+0x26>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7ca      	b.n	80087be <_free_r+0x26>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	2000050c 	.word	0x2000050c

08008830 <sbrk_aligned>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4e0e      	ldr	r6, [pc, #56]	; (800886c <sbrk_aligned+0x3c>)
 8008834:	460c      	mov	r4, r1
 8008836:	6831      	ldr	r1, [r6, #0]
 8008838:	4605      	mov	r5, r0
 800883a:	b911      	cbnz	r1, 8008842 <sbrk_aligned+0x12>
 800883c:	f000 fba6 	bl	8008f8c <_sbrk_r>
 8008840:	6030      	str	r0, [r6, #0]
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f000 fba1 	bl	8008f8c <_sbrk_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d00a      	beq.n	8008864 <sbrk_aligned+0x34>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d007      	beq.n	8008868 <sbrk_aligned+0x38>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4628      	mov	r0, r5
 800885c:	f000 fb96 	bl	8008f8c <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d101      	bne.n	8008868 <sbrk_aligned+0x38>
 8008864:	f04f 34ff 	mov.w	r4, #4294967295
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	20000510 	.word	0x20000510

08008870 <_malloc_r>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	1ccd      	adds	r5, r1, #3
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	2d00      	cmp	r5, #0
 8008884:	4607      	mov	r7, r0
 8008886:	db01      	blt.n	800888c <_malloc_r+0x1c>
 8008888:	42a9      	cmp	r1, r5
 800888a:	d905      	bls.n	8008898 <_malloc_r+0x28>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	2600      	movs	r6, #0
 8008892:	4630      	mov	r0, r6
 8008894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800896c <_malloc_r+0xfc>
 800889c:	f000 f868 	bl	8008970 <__malloc_lock>
 80088a0:	f8d8 3000 	ldr.w	r3, [r8]
 80088a4:	461c      	mov	r4, r3
 80088a6:	bb5c      	cbnz	r4, 8008900 <_malloc_r+0x90>
 80088a8:	4629      	mov	r1, r5
 80088aa:	4638      	mov	r0, r7
 80088ac:	f7ff ffc0 	bl	8008830 <sbrk_aligned>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	4604      	mov	r4, r0
 80088b4:	d155      	bne.n	8008962 <_malloc_r+0xf2>
 80088b6:	f8d8 4000 	ldr.w	r4, [r8]
 80088ba:	4626      	mov	r6, r4
 80088bc:	2e00      	cmp	r6, #0
 80088be:	d145      	bne.n	800894c <_malloc_r+0xdc>
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d048      	beq.n	8008956 <_malloc_r+0xe6>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	4631      	mov	r1, r6
 80088c8:	4638      	mov	r0, r7
 80088ca:	eb04 0903 	add.w	r9, r4, r3
 80088ce:	f000 fb5d 	bl	8008f8c <_sbrk_r>
 80088d2:	4581      	cmp	r9, r0
 80088d4:	d13f      	bne.n	8008956 <_malloc_r+0xe6>
 80088d6:	6821      	ldr	r1, [r4, #0]
 80088d8:	1a6d      	subs	r5, r5, r1
 80088da:	4629      	mov	r1, r5
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ffa7 	bl	8008830 <sbrk_aligned>
 80088e2:	3001      	adds	r0, #1
 80088e4:	d037      	beq.n	8008956 <_malloc_r+0xe6>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	442b      	add	r3, r5
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	f8d8 3000 	ldr.w	r3, [r8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d038      	beq.n	8008966 <_malloc_r+0xf6>
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	42a2      	cmp	r2, r4
 80088f8:	d12b      	bne.n	8008952 <_malloc_r+0xe2>
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	e00f      	b.n	8008920 <_malloc_r+0xb0>
 8008900:	6822      	ldr	r2, [r4, #0]
 8008902:	1b52      	subs	r2, r2, r5
 8008904:	d41f      	bmi.n	8008946 <_malloc_r+0xd6>
 8008906:	2a0b      	cmp	r2, #11
 8008908:	d917      	bls.n	800893a <_malloc_r+0xca>
 800890a:	1961      	adds	r1, r4, r5
 800890c:	42a3      	cmp	r3, r4
 800890e:	6025      	str	r5, [r4, #0]
 8008910:	bf18      	it	ne
 8008912:	6059      	strne	r1, [r3, #4]
 8008914:	6863      	ldr	r3, [r4, #4]
 8008916:	bf08      	it	eq
 8008918:	f8c8 1000 	streq.w	r1, [r8]
 800891c:	5162      	str	r2, [r4, r5]
 800891e:	604b      	str	r3, [r1, #4]
 8008920:	4638      	mov	r0, r7
 8008922:	f104 060b 	add.w	r6, r4, #11
 8008926:	f000 f829 	bl	800897c <__malloc_unlock>
 800892a:	f026 0607 	bic.w	r6, r6, #7
 800892e:	1d23      	adds	r3, r4, #4
 8008930:	1af2      	subs	r2, r6, r3
 8008932:	d0ae      	beq.n	8008892 <_malloc_r+0x22>
 8008934:	1b9b      	subs	r3, r3, r6
 8008936:	50a3      	str	r3, [r4, r2]
 8008938:	e7ab      	b.n	8008892 <_malloc_r+0x22>
 800893a:	42a3      	cmp	r3, r4
 800893c:	6862      	ldr	r2, [r4, #4]
 800893e:	d1dd      	bne.n	80088fc <_malloc_r+0x8c>
 8008940:	f8c8 2000 	str.w	r2, [r8]
 8008944:	e7ec      	b.n	8008920 <_malloc_r+0xb0>
 8008946:	4623      	mov	r3, r4
 8008948:	6864      	ldr	r4, [r4, #4]
 800894a:	e7ac      	b.n	80088a6 <_malloc_r+0x36>
 800894c:	4634      	mov	r4, r6
 800894e:	6876      	ldr	r6, [r6, #4]
 8008950:	e7b4      	b.n	80088bc <_malloc_r+0x4c>
 8008952:	4613      	mov	r3, r2
 8008954:	e7cc      	b.n	80088f0 <_malloc_r+0x80>
 8008956:	230c      	movs	r3, #12
 8008958:	603b      	str	r3, [r7, #0]
 800895a:	4638      	mov	r0, r7
 800895c:	f000 f80e 	bl	800897c <__malloc_unlock>
 8008960:	e797      	b.n	8008892 <_malloc_r+0x22>
 8008962:	6025      	str	r5, [r4, #0]
 8008964:	e7dc      	b.n	8008920 <_malloc_r+0xb0>
 8008966:	605b      	str	r3, [r3, #4]
 8008968:	deff      	udf	#255	; 0xff
 800896a:	bf00      	nop
 800896c:	2000050c 	.word	0x2000050c

08008970 <__malloc_lock>:
 8008970:	4801      	ldr	r0, [pc, #4]	; (8008978 <__malloc_lock+0x8>)
 8008972:	f7ff bf01 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8008976:	bf00      	nop
 8008978:	20000508 	.word	0x20000508

0800897c <__malloc_unlock>:
 800897c:	4801      	ldr	r0, [pc, #4]	; (8008984 <__malloc_unlock+0x8>)
 800897e:	f7ff befc 	b.w	800877a <__retarget_lock_release_recursive>
 8008982:	bf00      	nop
 8008984:	20000508 	.word	0x20000508

08008988 <__ssputs_r>:
 8008988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	688e      	ldr	r6, [r1, #8]
 800898e:	461f      	mov	r7, r3
 8008990:	42be      	cmp	r6, r7
 8008992:	680b      	ldr	r3, [r1, #0]
 8008994:	4682      	mov	sl, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4690      	mov	r8, r2
 800899a:	d82c      	bhi.n	80089f6 <__ssputs_r+0x6e>
 800899c:	898a      	ldrh	r2, [r1, #12]
 800899e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a2:	d026      	beq.n	80089f2 <__ssputs_r+0x6a>
 80089a4:	6965      	ldr	r5, [r4, #20]
 80089a6:	6909      	ldr	r1, [r1, #16]
 80089a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089ac:	eba3 0901 	sub.w	r9, r3, r1
 80089b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089b4:	1c7b      	adds	r3, r7, #1
 80089b6:	444b      	add	r3, r9
 80089b8:	106d      	asrs	r5, r5, #1
 80089ba:	429d      	cmp	r5, r3
 80089bc:	bf38      	it	cc
 80089be:	461d      	movcc	r5, r3
 80089c0:	0553      	lsls	r3, r2, #21
 80089c2:	d527      	bpl.n	8008a14 <__ssputs_r+0x8c>
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7ff ff53 	bl	8008870 <_malloc_r>
 80089ca:	4606      	mov	r6, r0
 80089cc:	b360      	cbz	r0, 8008a28 <__ssputs_r+0xa0>
 80089ce:	6921      	ldr	r1, [r4, #16]
 80089d0:	464a      	mov	r2, r9
 80089d2:	f7ff fed3 	bl	800877c <memcpy>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	6126      	str	r6, [r4, #16]
 80089e4:	6165      	str	r5, [r4, #20]
 80089e6:	444e      	add	r6, r9
 80089e8:	eba5 0509 	sub.w	r5, r5, r9
 80089ec:	6026      	str	r6, [r4, #0]
 80089ee:	60a5      	str	r5, [r4, #8]
 80089f0:	463e      	mov	r6, r7
 80089f2:	42be      	cmp	r6, r7
 80089f4:	d900      	bls.n	80089f8 <__ssputs_r+0x70>
 80089f6:	463e      	mov	r6, r7
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	4632      	mov	r2, r6
 80089fc:	4641      	mov	r1, r8
 80089fe:	f000 faab 	bl	8008f58 <memmove>
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	1b9b      	subs	r3, r3, r6
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	4433      	add	r3, r6
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	462a      	mov	r2, r5
 8008a16:	f000 fac9 	bl	8008fac <_realloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1e0      	bne.n	80089e2 <__ssputs_r+0x5a>
 8008a20:	6921      	ldr	r1, [r4, #16]
 8008a22:	4650      	mov	r0, sl
 8008a24:	f7ff feb8 	bl	8008798 <_free_r>
 8008a28:	230c      	movs	r3, #12
 8008a2a:	f8ca 3000 	str.w	r3, [sl]
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	e7e9      	b.n	8008a10 <__ssputs_r+0x88>

08008a3c <_svfiprintf_r>:
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	4698      	mov	r8, r3
 8008a42:	898b      	ldrh	r3, [r1, #12]
 8008a44:	061b      	lsls	r3, r3, #24
 8008a46:	b09d      	sub	sp, #116	; 0x74
 8008a48:	4607      	mov	r7, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	d50e      	bpl.n	8008a6e <_svfiprintf_r+0x32>
 8008a50:	690b      	ldr	r3, [r1, #16]
 8008a52:	b963      	cbnz	r3, 8008a6e <_svfiprintf_r+0x32>
 8008a54:	2140      	movs	r1, #64	; 0x40
 8008a56:	f7ff ff0b 	bl	8008870 <_malloc_r>
 8008a5a:	6028      	str	r0, [r5, #0]
 8008a5c:	6128      	str	r0, [r5, #16]
 8008a5e:	b920      	cbnz	r0, 8008a6a <_svfiprintf_r+0x2e>
 8008a60:	230c      	movs	r3, #12
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	e0d0      	b.n	8008c0c <_svfiprintf_r+0x1d0>
 8008a6a:	2340      	movs	r3, #64	; 0x40
 8008a6c:	616b      	str	r3, [r5, #20]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9309      	str	r3, [sp, #36]	; 0x24
 8008a72:	2320      	movs	r3, #32
 8008a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a7c:	2330      	movs	r3, #48	; 0x30
 8008a7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c24 <_svfiprintf_r+0x1e8>
 8008a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a86:	f04f 0901 	mov.w	r9, #1
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	469a      	mov	sl, r3
 8008a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a92:	b10a      	cbz	r2, 8008a98 <_svfiprintf_r+0x5c>
 8008a94:	2a25      	cmp	r2, #37	; 0x25
 8008a96:	d1f9      	bne.n	8008a8c <_svfiprintf_r+0x50>
 8008a98:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9c:	d00b      	beq.n	8008ab6 <_svfiprintf_r+0x7a>
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ff6f 	bl	8008988 <__ssputs_r>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f000 80a9 	beq.w	8008c02 <_svfiprintf_r+0x1c6>
 8008ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab2:	445a      	add	r2, fp
 8008ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 80a1 	beq.w	8008c02 <_svfiprintf_r+0x1c6>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aca:	f10a 0a01 	add.w	sl, sl, #1
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad8:	4654      	mov	r4, sl
 8008ada:	2205      	movs	r2, #5
 8008adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae0:	4850      	ldr	r0, [pc, #320]	; (8008c24 <_svfiprintf_r+0x1e8>)
 8008ae2:	f7f7 fb9d 	bl	8000220 <memchr>
 8008ae6:	9a04      	ldr	r2, [sp, #16]
 8008ae8:	b9d8      	cbnz	r0, 8008b22 <_svfiprintf_r+0xe6>
 8008aea:	06d0      	lsls	r0, r2, #27
 8008aec:	bf44      	itt	mi
 8008aee:	2320      	movmi	r3, #32
 8008af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af4:	0711      	lsls	r1, r2, #28
 8008af6:	bf44      	itt	mi
 8008af8:	232b      	movmi	r3, #43	; 0x2b
 8008afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afe:	f89a 3000 	ldrb.w	r3, [sl]
 8008b02:	2b2a      	cmp	r3, #42	; 0x2a
 8008b04:	d015      	beq.n	8008b32 <_svfiprintf_r+0xf6>
 8008b06:	9a07      	ldr	r2, [sp, #28]
 8008b08:	4654      	mov	r4, sl
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	f04f 0c0a 	mov.w	ip, #10
 8008b10:	4621      	mov	r1, r4
 8008b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b16:	3b30      	subs	r3, #48	; 0x30
 8008b18:	2b09      	cmp	r3, #9
 8008b1a:	d94d      	bls.n	8008bb8 <_svfiprintf_r+0x17c>
 8008b1c:	b1b0      	cbz	r0, 8008b4c <_svfiprintf_r+0x110>
 8008b1e:	9207      	str	r2, [sp, #28]
 8008b20:	e014      	b.n	8008b4c <_svfiprintf_r+0x110>
 8008b22:	eba0 0308 	sub.w	r3, r0, r8
 8008b26:	fa09 f303 	lsl.w	r3, r9, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	46a2      	mov	sl, r4
 8008b30:	e7d2      	b.n	8008ad8 <_svfiprintf_r+0x9c>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d19      	adds	r1, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9103      	str	r1, [sp, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfbb      	ittet	lt
 8008b3e:	425b      	neglt	r3, r3
 8008b40:	f042 0202 	orrlt.w	r2, r2, #2
 8008b44:	9307      	strge	r3, [sp, #28]
 8008b46:	9307      	strlt	r3, [sp, #28]
 8008b48:	bfb8      	it	lt
 8008b4a:	9204      	strlt	r2, [sp, #16]
 8008b4c:	7823      	ldrb	r3, [r4, #0]
 8008b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b50:	d10c      	bne.n	8008b6c <_svfiprintf_r+0x130>
 8008b52:	7863      	ldrb	r3, [r4, #1]
 8008b54:	2b2a      	cmp	r3, #42	; 0x2a
 8008b56:	d134      	bne.n	8008bc2 <_svfiprintf_r+0x186>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	9203      	str	r2, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bfb8      	it	lt
 8008b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b68:	3402      	adds	r4, #2
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008c34 <_svfiprintf_r+0x1f8>
 8008b70:	7821      	ldrb	r1, [r4, #0]
 8008b72:	2203      	movs	r2, #3
 8008b74:	4650      	mov	r0, sl
 8008b76:	f7f7 fb53 	bl	8000220 <memchr>
 8008b7a:	b138      	cbz	r0, 8008b8c <_svfiprintf_r+0x150>
 8008b7c:	9b04      	ldr	r3, [sp, #16]
 8008b7e:	eba0 000a 	sub.w	r0, r0, sl
 8008b82:	2240      	movs	r2, #64	; 0x40
 8008b84:	4082      	lsls	r2, r0
 8008b86:	4313      	orrs	r3, r2
 8008b88:	3401      	adds	r4, #1
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b90:	4825      	ldr	r0, [pc, #148]	; (8008c28 <_svfiprintf_r+0x1ec>)
 8008b92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b96:	2206      	movs	r2, #6
 8008b98:	f7f7 fb42 	bl	8000220 <memchr>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d038      	beq.n	8008c12 <_svfiprintf_r+0x1d6>
 8008ba0:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <_svfiprintf_r+0x1f0>)
 8008ba2:	bb1b      	cbnz	r3, 8008bec <_svfiprintf_r+0x1b0>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	3307      	adds	r3, #7
 8008ba8:	f023 0307 	bic.w	r3, r3, #7
 8008bac:	3308      	adds	r3, #8
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb2:	4433      	add	r3, r6
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	e768      	b.n	8008a8a <_svfiprintf_r+0x4e>
 8008bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e7a6      	b.n	8008b10 <_svfiprintf_r+0xd4>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	3401      	adds	r4, #1
 8008bc6:	9305      	str	r3, [sp, #20]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f04f 0c0a 	mov.w	ip, #10
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd4:	3a30      	subs	r2, #48	; 0x30
 8008bd6:	2a09      	cmp	r2, #9
 8008bd8:	d903      	bls.n	8008be2 <_svfiprintf_r+0x1a6>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0c6      	beq.n	8008b6c <_svfiprintf_r+0x130>
 8008bde:	9105      	str	r1, [sp, #20]
 8008be0:	e7c4      	b.n	8008b6c <_svfiprintf_r+0x130>
 8008be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008be6:	4604      	mov	r4, r0
 8008be8:	2301      	movs	r3, #1
 8008bea:	e7f0      	b.n	8008bce <_svfiprintf_r+0x192>
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <_svfiprintf_r+0x1f4>)
 8008bf4:	a904      	add	r1, sp, #16
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f3af 8000 	nop.w
 8008bfc:	1c42      	adds	r2, r0, #1
 8008bfe:	4606      	mov	r6, r0
 8008c00:	d1d6      	bne.n	8008bb0 <_svfiprintf_r+0x174>
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	065b      	lsls	r3, r3, #25
 8008c06:	f53f af2d 	bmi.w	8008a64 <_svfiprintf_r+0x28>
 8008c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c0c:	b01d      	add	sp, #116	; 0x74
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	ab03      	add	r3, sp, #12
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	462a      	mov	r2, r5
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <_svfiprintf_r+0x1f4>)
 8008c1a:	a904      	add	r1, sp, #16
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f000 f879 	bl	8008d14 <_printf_i>
 8008c22:	e7eb      	b.n	8008bfc <_svfiprintf_r+0x1c0>
 8008c24:	0800907c 	.word	0x0800907c
 8008c28:	08009086 	.word	0x08009086
 8008c2c:	00000000 	.word	0x00000000
 8008c30:	08008989 	.word	0x08008989
 8008c34:	08009082 	.word	0x08009082

08008c38 <_printf_common>:
 8008c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	4699      	mov	r9, r3
 8008c40:	688a      	ldr	r2, [r1, #8]
 8008c42:	690b      	ldr	r3, [r1, #16]
 8008c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bfb8      	it	lt
 8008c4c:	4613      	movlt	r3, r2
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c54:	4607      	mov	r7, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	b10a      	cbz	r2, 8008c5e <_printf_common+0x26>
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	0699      	lsls	r1, r3, #26
 8008c62:	bf42      	ittt	mi
 8008c64:	6833      	ldrmi	r3, [r6, #0]
 8008c66:	3302      	addmi	r3, #2
 8008c68:	6033      	strmi	r3, [r6, #0]
 8008c6a:	6825      	ldr	r5, [r4, #0]
 8008c6c:	f015 0506 	ands.w	r5, r5, #6
 8008c70:	d106      	bne.n	8008c80 <_printf_common+0x48>
 8008c72:	f104 0a19 	add.w	sl, r4, #25
 8008c76:	68e3      	ldr	r3, [r4, #12]
 8008c78:	6832      	ldr	r2, [r6, #0]
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dc26      	bgt.n	8008cce <_printf_common+0x96>
 8008c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c84:	1e13      	subs	r3, r2, #0
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	bf18      	it	ne
 8008c8a:	2301      	movne	r3, #1
 8008c8c:	0692      	lsls	r2, r2, #26
 8008c8e:	d42b      	bmi.n	8008ce8 <_printf_common+0xb0>
 8008c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c94:	4649      	mov	r1, r9
 8008c96:	4638      	mov	r0, r7
 8008c98:	47c0      	blx	r8
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d01e      	beq.n	8008cdc <_printf_common+0xa4>
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	6922      	ldr	r2, [r4, #16]
 8008ca2:	f003 0306 	and.w	r3, r3, #6
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	bf02      	ittt	eq
 8008caa:	68e5      	ldreq	r5, [r4, #12]
 8008cac:	6833      	ldreq	r3, [r6, #0]
 8008cae:	1aed      	subeq	r5, r5, r3
 8008cb0:	68a3      	ldr	r3, [r4, #8]
 8008cb2:	bf0c      	ite	eq
 8008cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb8:	2500      	movne	r5, #0
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	bfc4      	itt	gt
 8008cbe:	1a9b      	subgt	r3, r3, r2
 8008cc0:	18ed      	addgt	r5, r5, r3
 8008cc2:	2600      	movs	r6, #0
 8008cc4:	341a      	adds	r4, #26
 8008cc6:	42b5      	cmp	r5, r6
 8008cc8:	d11a      	bne.n	8008d00 <_printf_common+0xc8>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e008      	b.n	8008ce0 <_printf_common+0xa8>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4652      	mov	r2, sl
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	47c0      	blx	r8
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d103      	bne.n	8008ce4 <_printf_common+0xac>
 8008cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	e7c6      	b.n	8008c76 <_printf_common+0x3e>
 8008ce8:	18e1      	adds	r1, r4, r3
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	2030      	movs	r0, #48	; 0x30
 8008cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cf2:	4422      	add	r2, r4
 8008cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	e7c7      	b.n	8008c90 <_printf_common+0x58>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4622      	mov	r2, r4
 8008d04:	4649      	mov	r1, r9
 8008d06:	4638      	mov	r0, r7
 8008d08:	47c0      	blx	r8
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d0e6      	beq.n	8008cdc <_printf_common+0xa4>
 8008d0e:	3601      	adds	r6, #1
 8008d10:	e7d9      	b.n	8008cc6 <_printf_common+0x8e>
	...

08008d14 <_printf_i>:
 8008d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	7e0f      	ldrb	r7, [r1, #24]
 8008d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d1c:	2f78      	cmp	r7, #120	; 0x78
 8008d1e:	4691      	mov	r9, r2
 8008d20:	4680      	mov	r8, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	469a      	mov	sl, r3
 8008d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d2a:	d807      	bhi.n	8008d3c <_printf_i+0x28>
 8008d2c:	2f62      	cmp	r7, #98	; 0x62
 8008d2e:	d80a      	bhi.n	8008d46 <_printf_i+0x32>
 8008d30:	2f00      	cmp	r7, #0
 8008d32:	f000 80d4 	beq.w	8008ede <_printf_i+0x1ca>
 8008d36:	2f58      	cmp	r7, #88	; 0x58
 8008d38:	f000 80c0 	beq.w	8008ebc <_printf_i+0x1a8>
 8008d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d44:	e03a      	b.n	8008dbc <_printf_i+0xa8>
 8008d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d4a:	2b15      	cmp	r3, #21
 8008d4c:	d8f6      	bhi.n	8008d3c <_printf_i+0x28>
 8008d4e:	a101      	add	r1, pc, #4	; (adr r1, 8008d54 <_printf_i+0x40>)
 8008d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008d3d 	.word	0x08008d3d
 8008d60:	08008d3d 	.word	0x08008d3d
 8008d64:	08008d3d 	.word	0x08008d3d
 8008d68:	08008d3d 	.word	0x08008d3d
 8008d6c:	08008dc1 	.word	0x08008dc1
 8008d70:	08008d3d 	.word	0x08008d3d
 8008d74:	08008d3d 	.word	0x08008d3d
 8008d78:	08008d3d 	.word	0x08008d3d
 8008d7c:	08008d3d 	.word	0x08008d3d
 8008d80:	08008ec5 	.word	0x08008ec5
 8008d84:	08008ded 	.word	0x08008ded
 8008d88:	08008e7f 	.word	0x08008e7f
 8008d8c:	08008d3d 	.word	0x08008d3d
 8008d90:	08008d3d 	.word	0x08008d3d
 8008d94:	08008ee7 	.word	0x08008ee7
 8008d98:	08008d3d 	.word	0x08008d3d
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008d3d 	.word	0x08008d3d
 8008da4:	08008d3d 	.word	0x08008d3d
 8008da8:	08008e87 	.word	0x08008e87
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e09f      	b.n	8008f00 <_printf_i+0x1ec>
 8008dc0:	6820      	ldr	r0, [r4, #0]
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	0607      	lsls	r7, r0, #24
 8008dc6:	f103 0104 	add.w	r1, r3, #4
 8008dca:	6029      	str	r1, [r5, #0]
 8008dcc:	d501      	bpl.n	8008dd2 <_printf_i+0xbe>
 8008dce:	681e      	ldr	r6, [r3, #0]
 8008dd0:	e003      	b.n	8008dda <_printf_i+0xc6>
 8008dd2:	0646      	lsls	r6, r0, #25
 8008dd4:	d5fb      	bpl.n	8008dce <_printf_i+0xba>
 8008dd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	da03      	bge.n	8008de6 <_printf_i+0xd2>
 8008dde:	232d      	movs	r3, #45	; 0x2d
 8008de0:	4276      	negs	r6, r6
 8008de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de6:	485a      	ldr	r0, [pc, #360]	; (8008f50 <_printf_i+0x23c>)
 8008de8:	230a      	movs	r3, #10
 8008dea:	e012      	b.n	8008e12 <_printf_i+0xfe>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	1d19      	adds	r1, r3, #4
 8008df2:	6029      	str	r1, [r5, #0]
 8008df4:	0605      	lsls	r5, r0, #24
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0xe8>
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0xee>
 8008dfc:	0641      	lsls	r1, r0, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0xe4>
 8008e00:	881e      	ldrh	r6, [r3, #0]
 8008e02:	4853      	ldr	r0, [pc, #332]	; (8008f50 <_printf_i+0x23c>)
 8008e04:	2f6f      	cmp	r7, #111	; 0x6f
 8008e06:	bf0c      	ite	eq
 8008e08:	2308      	moveq	r3, #8
 8008e0a:	230a      	movne	r3, #10
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e12:	6865      	ldr	r5, [r4, #4]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	bfa2      	ittt	ge
 8008e1a:	6821      	ldrge	r1, [r4, #0]
 8008e1c:	f021 0104 	bicge.w	r1, r1, #4
 8008e20:	6021      	strge	r1, [r4, #0]
 8008e22:	b90e      	cbnz	r6, 8008e28 <_printf_i+0x114>
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	d04b      	beq.n	8008ec0 <_printf_i+0x1ac>
 8008e28:	4615      	mov	r5, r2
 8008e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e32:	5dc7      	ldrb	r7, [r0, r7]
 8008e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e38:	4637      	mov	r7, r6
 8008e3a:	42bb      	cmp	r3, r7
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	d9f4      	bls.n	8008e2a <_printf_i+0x116>
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d10b      	bne.n	8008e5c <_printf_i+0x148>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	07de      	lsls	r6, r3, #31
 8008e48:	d508      	bpl.n	8008e5c <_printf_i+0x148>
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	bfde      	ittt	le
 8008e52:	2330      	movle	r3, #48	; 0x30
 8008e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e5c:	1b52      	subs	r2, r2, r5
 8008e5e:	6122      	str	r2, [r4, #16]
 8008e60:	f8cd a000 	str.w	sl, [sp]
 8008e64:	464b      	mov	r3, r9
 8008e66:	aa03      	add	r2, sp, #12
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f7ff fee4 	bl	8008c38 <_printf_common>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d14a      	bne.n	8008f0a <_printf_i+0x1f6>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	b004      	add	sp, #16
 8008e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f043 0320 	orr.w	r3, r3, #32
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	4833      	ldr	r0, [pc, #204]	; (8008f54 <_printf_i+0x240>)
 8008e88:	2778      	movs	r7, #120	; 0x78
 8008e8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6829      	ldr	r1, [r5, #0]
 8008e92:	061f      	lsls	r7, r3, #24
 8008e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e98:	d402      	bmi.n	8008ea0 <_printf_i+0x18c>
 8008e9a:	065f      	lsls	r7, r3, #25
 8008e9c:	bf48      	it	mi
 8008e9e:	b2b6      	uxthmi	r6, r6
 8008ea0:	07df      	lsls	r7, r3, #31
 8008ea2:	bf48      	it	mi
 8008ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ea8:	6029      	str	r1, [r5, #0]
 8008eaa:	bf48      	it	mi
 8008eac:	6023      	strmi	r3, [r4, #0]
 8008eae:	b91e      	cbnz	r6, 8008eb8 <_printf_i+0x1a4>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	f023 0320 	bic.w	r3, r3, #32
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	2310      	movs	r3, #16
 8008eba:	e7a7      	b.n	8008e0c <_printf_i+0xf8>
 8008ebc:	4824      	ldr	r0, [pc, #144]	; (8008f50 <_printf_i+0x23c>)
 8008ebe:	e7e4      	b.n	8008e8a <_printf_i+0x176>
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	e7bd      	b.n	8008e40 <_printf_i+0x12c>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	6826      	ldr	r6, [r4, #0]
 8008ec8:	6961      	ldr	r1, [r4, #20]
 8008eca:	1d18      	adds	r0, r3, #4
 8008ecc:	6028      	str	r0, [r5, #0]
 8008ece:	0635      	lsls	r5, r6, #24
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_i+0x1c4>
 8008ed4:	6019      	str	r1, [r3, #0]
 8008ed6:	e002      	b.n	8008ede <_printf_i+0x1ca>
 8008ed8:	0670      	lsls	r0, r6, #25
 8008eda:	d5fb      	bpl.n	8008ed4 <_printf_i+0x1c0>
 8008edc:	8019      	strh	r1, [r3, #0]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	4615      	mov	r5, r2
 8008ee4:	e7bc      	b.n	8008e60 <_printf_i+0x14c>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	602a      	str	r2, [r5, #0]
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f7f7 f994 	bl	8000220 <memchr>
 8008ef8:	b108      	cbz	r0, 8008efe <_printf_i+0x1ea>
 8008efa:	1b40      	subs	r0, r0, r5
 8008efc:	6060      	str	r0, [r4, #4]
 8008efe:	6863      	ldr	r3, [r4, #4]
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f08:	e7aa      	b.n	8008e60 <_printf_i+0x14c>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4649      	mov	r1, r9
 8008f10:	4640      	mov	r0, r8
 8008f12:	47d0      	blx	sl
 8008f14:	3001      	adds	r0, #1
 8008f16:	d0ad      	beq.n	8008e74 <_printf_i+0x160>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	079b      	lsls	r3, r3, #30
 8008f1c:	d413      	bmi.n	8008f46 <_printf_i+0x232>
 8008f1e:	68e0      	ldr	r0, [r4, #12]
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	4298      	cmp	r0, r3
 8008f24:	bfb8      	it	lt
 8008f26:	4618      	movlt	r0, r3
 8008f28:	e7a6      	b.n	8008e78 <_printf_i+0x164>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4640      	mov	r0, r8
 8008f32:	47d0      	blx	sl
 8008f34:	3001      	adds	r0, #1
 8008f36:	d09d      	beq.n	8008e74 <_printf_i+0x160>
 8008f38:	3501      	adds	r5, #1
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	9903      	ldr	r1, [sp, #12]
 8008f3e:	1a5b      	subs	r3, r3, r1
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dcf2      	bgt.n	8008f2a <_printf_i+0x216>
 8008f44:	e7eb      	b.n	8008f1e <_printf_i+0x20a>
 8008f46:	2500      	movs	r5, #0
 8008f48:	f104 0619 	add.w	r6, r4, #25
 8008f4c:	e7f5      	b.n	8008f3a <_printf_i+0x226>
 8008f4e:	bf00      	nop
 8008f50:	0800908d 	.word	0x0800908d
 8008f54:	0800909e 	.word	0x0800909e

08008f58 <memmove>:
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	eb01 0402 	add.w	r4, r1, r2
 8008f60:	d902      	bls.n	8008f68 <memmove+0x10>
 8008f62:	4284      	cmp	r4, r0
 8008f64:	4623      	mov	r3, r4
 8008f66:	d807      	bhi.n	8008f78 <memmove+0x20>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	42a1      	cmp	r1, r4
 8008f6c:	d008      	beq.n	8008f80 <memmove+0x28>
 8008f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f76:	e7f8      	b.n	8008f6a <memmove+0x12>
 8008f78:	4402      	add	r2, r0
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	d100      	bne.n	8008f82 <memmove+0x2a>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f8a:	e7f7      	b.n	8008f7c <memmove+0x24>

08008f8c <_sbrk_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_sbrk_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f9 f918 	bl	80021cc <_sbrk>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_sbrk_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_sbrk_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20000504 	.word	0x20000504

08008fac <_realloc_r>:
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	4614      	mov	r4, r2
 8008fb4:	460e      	mov	r6, r1
 8008fb6:	b921      	cbnz	r1, 8008fc2 <_realloc_r+0x16>
 8008fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	f7ff bc57 	b.w	8008870 <_malloc_r>
 8008fc2:	b92a      	cbnz	r2, 8008fd0 <_realloc_r+0x24>
 8008fc4:	f7ff fbe8 	bl	8008798 <_free_r>
 8008fc8:	4625      	mov	r5, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	f000 f81b 	bl	800900a <_malloc_usable_size_r>
 8008fd4:	4284      	cmp	r4, r0
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	d802      	bhi.n	8008fe0 <_realloc_r+0x34>
 8008fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fde:	d812      	bhi.n	8009006 <_realloc_r+0x5a>
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	f7ff fc44 	bl	8008870 <_malloc_r>
 8008fe8:	4605      	mov	r5, r0
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d0ed      	beq.n	8008fca <_realloc_r+0x1e>
 8008fee:	42bc      	cmp	r4, r7
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	bf28      	it	cs
 8008ff6:	463a      	movcs	r2, r7
 8008ff8:	f7ff fbc0 	bl	800877c <memcpy>
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4640      	mov	r0, r8
 8009000:	f7ff fbca 	bl	8008798 <_free_r>
 8009004:	e7e1      	b.n	8008fca <_realloc_r+0x1e>
 8009006:	4635      	mov	r5, r6
 8009008:	e7df      	b.n	8008fca <_realloc_r+0x1e>

0800900a <_malloc_usable_size_r>:
 800900a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800900e:	1f18      	subs	r0, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfbc      	itt	lt
 8009014:	580b      	ldrlt	r3, [r1, r0]
 8009016:	18c0      	addlt	r0, r0, r3
 8009018:	4770      	bx	lr
	...

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
