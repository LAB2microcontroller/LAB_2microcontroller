
LAB_2_microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a128  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a340  0800a340  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a348  0800a348  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a348  0800a348  0001a348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000010  0800a360  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800a360  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a85  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6a  00000000  00000000  00038b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003b878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  0003cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f76  00000000  00000000  0003de7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c11  00000000  00000000  00066df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001147bf  00000000  00000000  0007fa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d8c  00000000  00000000  001941c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00199f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a2e8 	.word	0x0800a2e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800a2e8 	.word	0x0800a2e8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f001 fbf1 	bl	800253a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f8a2 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 fbb2 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d60:	f000 fb76 	bl	8001450 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d64:	f000 f970 	bl	8001048 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d68:	f000 f8e6 	bl	8000f38 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000d6c:	f000 fb22 	bl	80013b4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d70:	f000 f9b4 	bl	80010dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d74:	f000 fac8 	bl	8001308 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d78:	f000 fa78 	bl	800126c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d7c:	213c      	movs	r1, #60	; 0x3c
 8000d7e:	483b      	ldr	r0, [pc, #236]	; (8000e6c <main+0x11c>)
 8000d80:	f005 fd3c 	bl	80067fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d84:	483a      	ldr	r0, [pc, #232]	; (8000e70 <main+0x120>)
 8000d86:	f005 faa7 	bl	80062d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4839      	ldr	r0, [pc, #228]	; (8000e74 <main+0x124>)
 8000d8e:	f005 fb7d 	bl	800648c <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d92:	217f      	movs	r1, #127	; 0x7f
 8000d94:	4838      	ldr	r0, [pc, #224]	; (8000e78 <main+0x128>)
 8000d96:	f003 f9fd 	bl	8004194 <HAL_ADCEx_Calibration_Start>
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 10);
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	4937      	ldr	r1, [pc, #220]	; (8000e7c <main+0x12c>)
 8000d9e:	4836      	ldr	r0, [pc, #216]	; (8000e78 <main+0x128>)
 8000da0:	f002 f880 	bl	8002ea4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000da4:	4836      	ldr	r0, [pc, #216]	; (8000e80 <main+0x130>)
 8000da6:	f005 fa97 	bl	80062d8 <HAL_TIM_Base_Start_IT>

  PID.Kp = 0.001;
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <main+0x134>)
 8000dac:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <main+0x138>)
 8000dae:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <main+0x134>)
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <main+0x134>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4830      	ldr	r0, [pc, #192]	; (8000e84 <main+0x134>)
 8000dc4:	f009 fa2e 	bl	800a224 <arm_pid_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8000dc8:	482a      	ldr	r0, [pc, #168]	; (8000e74 <main+0x124>)
 8000dca:	f005 fa15 	bl	80061f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dce:	2104      	movs	r1, #4
 8000dd0:	4828      	ldr	r0, [pc, #160]	; (8000e74 <main+0x124>)
 8000dd2:	f005 fb5b 	bl	800648c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <main+0x124>)
 8000dda:	f005 fb57 	bl	800648c <HAL_TIM_PWM_Start>
  UARTInterruptConfig();
 8000dde:	f001 f8a7 	bl	8001f30 <UARTInterruptConfig>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Average_ADC_Value();
 8000de2:	f000 feed 	bl	8001bc0 <Average_ADC_Value>
	  led2();
 8000de6:	f000 fc15 	bl	8001614 <led2>
	  CurrentTime = micros();
 8000dea:	f001 f85f 	bl	8001eac <micros>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4926      	ldr	r1, [pc, #152]	; (8000e8c <main+0x13c>)
 8000df4:	e9c1 2300 	strd	r2, r3, [r1]
	  if(CurrentTime > TimeStamp)
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <main+0x13c>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	4924      	ldr	r1, [pc, #144]	; (8000e90 <main+0x140>)
 8000e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e04:	4290      	cmp	r0, r2
 8000e06:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e0a:	d219      	bcs.n	8000e40 <main+0xf0>
	  {
		  TimeStamp = CurrentTime + 5000;// 200 HZ
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <main+0x13c>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e16:	1854      	adds	r4, r2, r1
 8000e18:	f143 0500 	adc.w	r5, r3, #0
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <main+0x140>)
 8000e1e:	e9c3 4500 	strd	r4, r5, [r3]
		  Adc_to_Matlab();
 8000e22:	f001 f85d 	bl	8001ee0 <Adc_to_Matlab>
		  Error = (uint16_t)(RxBuffer[2]<< 8) + (uint8_t)(RxBuffer[1]);
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <main+0x144>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <main+0x144>)
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <main+0x148>)
 8000e3e:	801a      	strh	r2, [r3, #0]
  }
	  if(mode == 1){
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x14c>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <main+0xfe>
		  LAB2PART1();
 8000e48:	f000 fc0e 	bl	8001668 <LAB2PART1>
 8000e4c:	e7c9      	b.n	8000de2 <main+0x92>
	  }
	  else if(mode == 2){
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <main+0x14c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d102      	bne.n	8000e5c <main+0x10c>
		  LAB2PART2();
 8000e56:	f000 fcfd 	bl	8001854 <LAB2PART2>
 8000e5a:	e7c2      	b.n	8000de2 <main+0x92>
	  }
	  else if(mode == 3){
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <main+0x14c>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d1be      	bne.n	8000de2 <main+0x92>
		  LAB2PART3();
 8000e64:	f000 fdd2 	bl	8001a0c <LAB2PART3>
  {
 8000e68:	e7bb      	b.n	8000de2 <main+0x92>
 8000e6a:	bf00      	nop
 8000e6c:	200002e4 	.word	0x200002e4
 8000e70:	20000330 	.word	0x20000330
 8000e74:	2000024c 	.word	0x2000024c
 8000e78:	2000002c 	.word	0x2000002c
 8000e7c:	2000037c 	.word	0x2000037c
 8000e80:	20000298 	.word	0x20000298
 8000e84:	200003a8 	.word	0x200003a8
 8000e88:	3a83126f 	.word	0x3a83126f
 8000e8c:	20000400 	.word	0x20000400
 8000e90:	200003f8 	.word	0x200003f8
 8000e94:	200003e8 	.word	0x200003e8
 8000e98:	2000040a 	.word	0x2000040a
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2238      	movs	r2, #56	; 0x38
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f009 f9ee 	bl	800a290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f004 f910 	bl	80050e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ee2:	2355      	movs	r3, #85	; 0x55
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 f9aa 	bl	8005250 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f02:	f001 f83b 	bl	8001f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 fca8 	bl	8005874 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f2a:	f001 f827 	bl	8001f7c <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	; 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 f99d 	bl	800a290 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <MX_ADC1_Init+0x104>)
 8000f58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_ADC1_Init+0x104>)
 8000f60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f66:	4b35      	ldr	r3, [pc, #212]	; (800103c <MX_ADC1_Init+0x104>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <MX_ADC1_Init+0x104>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_ADC1_Init+0x104>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <MX_ADC1_Init+0x104>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <MX_ADC1_Init+0x104>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <MX_ADC1_Init+0x104>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <MX_ADC1_Init+0x104>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <MX_ADC1_Init+0x104>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_ADC1_Init+0x104>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_ADC1_Init+0x104>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_ADC1_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_ADC1_Init+0x104>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC1_Init+0x104>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_ADC1_Init+0x104>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <MX_ADC1_Init+0x104>)
 8000fc2:	f001 fdb3 	bl	8002b2c <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fcc:	f000 ffd6 	bl	8001f7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_ADC1_Init+0x104>)
 8000fdc:	f003 f96e 	bl	80042bc <HAL_ADCEx_MultiModeConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fe6:	f000 ffc9 	bl	8001f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC1_Init+0x108>)
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff6:	237f      	movs	r3, #127	; 0x7f
 8000ff8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_ADC1_Init+0x104>)
 8001008:	f002 faa8 	bl	800355c <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001012:	f000 ffb3 	bl	8001f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_ADC1_Init+0x10c>)
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800101a:	230c      	movs	r3, #12
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_ADC1_Init+0x104>)
 8001024:	f002 fa9a 	bl	800355c <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800102e:	f000 ffa5 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000002c 	.word	0x2000002c
 8001040:	04300002 	.word	0x04300002
 8001044:	08600004 	.word	0x08600004

08001048 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <MX_LPUART1_UART_Init+0x90>)
 8001050:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800108c:	f006 fdf6 	bl	8007c7c <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001096:	f000 ff71 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800109a:	2100      	movs	r1, #0
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 800109e:	f008 fff6 	bl	800a08e <HAL_UARTEx_SetTxFifoThreshold>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010a8:	f000 ff68 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 80010b0:	f009 f82b 	bl	800a10a <HAL_UARTEx_SetRxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010ba:	f000 ff5f 	bl	8001f7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_LPUART1_UART_Init+0x8c>)
 80010c0:	f008 ffac 	bl	800a01c <HAL_UARTEx_DisableFifoMode>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010ca:	f000 ff57 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000f8 	.word	0x200000f8
 80010d8:	40008000 	.word	0x40008000

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09c      	sub	sp, #112	; 0x70
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2234      	movs	r2, #52	; 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f009 f8ba 	bl	800a290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b51      	ldr	r3, [pc, #324]	; (8001264 <MX_TIM1_Init+0x188>)
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <MX_TIM1_Init+0x18c>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <MX_TIM1_Init+0x188>)
 8001124:	22a9      	movs	r2, #169	; 0xa9
 8001126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <MX_TIM1_Init+0x188>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <MX_TIM1_Init+0x188>)
 8001130:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <MX_TIM1_Init+0x188>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <MX_TIM1_Init+0x188>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <MX_TIM1_Init+0x188>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001148:	4846      	ldr	r0, [pc, #280]	; (8001264 <MX_TIM1_Init+0x188>)
 800114a:	f004 fffd 	bl	8006148 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001154:	f000 ff12 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001162:	4619      	mov	r1, r3
 8001164:	483f      	ldr	r0, [pc, #252]	; (8001264 <MX_TIM1_Init+0x188>)
 8001166:	f005 fe3b 	bl	8006de0 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001170:	f000 ff04 	bl	8001f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001174:	483b      	ldr	r0, [pc, #236]	; (8001264 <MX_TIM1_Init+0x188>)
 8001176:	f005 f927 	bl	80063c8 <HAL_TIM_PWM_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001180:	f000 fefc 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001194:	4619      	mov	r1, r3
 8001196:	4833      	ldr	r0, [pc, #204]	; (8001264 <MX_TIM1_Init+0x188>)
 8001198:	f006 fc00 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011a2:	f000 feeb 	bl	8001f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <MX_TIM1_Init+0x188>)
 80011cc:	f005 fcf4 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011d6:	f000 fed1 	bl	8001f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011de:	2204      	movs	r2, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4820      	ldr	r0, [pc, #128]	; (8001264 <MX_TIM1_Init+0x188>)
 80011e4:	f005 fce8 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011ee:	f000 fec5 	bl	8001f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f6:	2208      	movs	r2, #8
 80011f8:	4619      	mov	r1, r3
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <MX_TIM1_Init+0x188>)
 80011fc:	f005 fcdc 	bl	8006bb8 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001206:	f000 feb9 	bl	8001f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM1_Init+0x188>)
 8001248:	f006 fc3e 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001252:	f000 fe93 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM1_Init+0x188>)
 8001258:	f001 f88e 	bl	8002378 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3770      	adds	r7, #112	; 0x70
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000024c 	.word	0x2000024c
 8001268:	40012c00 	.word	0x40012c00

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM2_Init+0x98>)
 800128c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001290:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM2_Init+0x98>)
 8001294:	22a9      	movs	r2, #169	; 0xa9
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM2_Init+0x98>)
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_TIM2_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM2_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MX_TIM2_Init+0x98>)
 80012b4:	f004 ff48 	bl	8006148 <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012be:	f000 fe5d 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM2_Init+0x98>)
 80012d0:	f005 fd86 	bl	8006de0 <HAL_TIM_ConfigClockSource>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012da:	f000 fe4f 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM2_Init+0x98>)
 80012ec:	f006 fb56 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012f6:	f000 fe41 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000298 	.word	0x20000298

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2224      	movs	r2, #36	; 0x24
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f008 ffba 	bl	800a290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <MX_TIM3_Init+0xa8>)
 800132a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_TIM3_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_TIM3_Init+0xa4>)
 800133a:	f640 32ff 	movw	r2, #3071	; 0xbff
 800133e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800134c:	2303      	movs	r3, #3
 800134e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001364:	2301      	movs	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001378:	f005 f99a 	bl	80066b0 <HAL_TIM_Encoder_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001382:	f000 fdfb 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM3_Init+0xa4>)
 8001394:	f006 fb02 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800139e:	f000 fded 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e4 	.word	0x200002e4
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_TIM5_Init+0x94>)
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <MX_TIM5_Init+0x98>)
 80013d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_TIM5_Init+0x94>)
 80013da:	22a9      	movs	r2, #169	; 0xa9
 80013dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM5_Init+0x94>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM5_Init+0x94>)
 80013e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_TIM5_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM5_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_TIM5_Init+0x94>)
 80013fa:	f004 fea5 	bl	8006148 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001404:	f000 fdba 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_TIM5_Init+0x94>)
 8001416:	f005 fce3 	bl	8006de0 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001420:	f000 fdac 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM5_Init+0x94>)
 8001432:	f006 fab3 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fd9e 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000330 	.word	0x20000330
 800144c:	40000c00 	.word	0x40000c00

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_DMA_Init+0x70>)
 8001458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <MX_DMA_Init+0x70>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6493      	str	r3, [r2, #72]	; 0x48
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_DMA_Init+0x70>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_DMA_Init+0x70>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_DMA_Init+0x70>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6493      	str	r3, [r2, #72]	; 0x48
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_DMA_Init+0x70>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200b      	movs	r0, #11
 800148c:	f003 f8f9 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001490:	200b      	movs	r0, #11
 8001492:	f003 f910 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	200c      	movs	r0, #12
 800149c:	f003 f8f1 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014a0:	200c      	movs	r0, #12
 80014a2:	f003 f908 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200d      	movs	r0, #13
 80014ac:	f003 f8e9 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014b0:	200d      	movs	r0, #13
 80014b2:	f003 f900 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <MX_GPIO_Init+0xfc>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <MX_GPIO_Init+0xfc>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <MX_GPIO_Init+0xfc>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <MX_GPIO_Init+0xfc>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <MX_GPIO_Init+0xfc>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <MX_GPIO_Init+0xfc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <MX_GPIO_Init+0xfc>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2120      	movs	r1, #32
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f003 fd87 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2130      	movs	r1, #48	; 0x30
 800154a:	481e      	ldr	r0, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x100>)
 800154c:	f003 fd82 	bl	8005054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_GPIO_Init+0x104>)
 8001568:	f003 fbf2 	bl	8004d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800156c:	2320      	movs	r3, #32
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f003 fbe3 	bl	8004d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800158a:	2330      	movs	r3, #48	; 0x30
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_GPIO_Init+0x100>)
 80015a2:	f003 fbd5 	bl	8004d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2028      	movs	r0, #40	; 0x28
 80015ac:	f003 f869 	bl	8004682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b0:	2028      	movs	r0, #40	; 0x28
 80015b2:	f003 f880 	bl	80046b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000800 	.word	0x48000800

080015cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015dc:	d112      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x38>
		if (mode == 1){
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_GPIO_EXTI_Callback+0x44>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d103      	bne.n	80015ee <HAL_GPIO_EXTI_Callback+0x22>
				mode = 2;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_GPIO_EXTI_Callback+0x44>)
 80015e8:	2202      	movs	r2, #2
 80015ea:	801a      	strh	r2, [r3, #0]
		else {
				mode = 1;

			}
		}
}
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_EXTI_Callback+0x38>
		else if (mode == 2){
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_GPIO_EXTI_Callback+0x44>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d103      	bne.n	80015fe <HAL_GPIO_EXTI_Callback+0x32>
				mode = 3;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_GPIO_EXTI_Callback+0x44>)
 80015f8:	2203      	movs	r2, #3
 80015fa:	801a      	strh	r2, [r3, #0]
}
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_EXTI_Callback+0x38>
				mode = 1;
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_GPIO_EXTI_Callback+0x44>)
 8001600:	2201      	movs	r2, #1
 8001602:	801a      	strh	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000000 	.word	0x20000000

08001614 <led2>:
void led2(){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	if (mode == 1){
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <led2+0x50>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d106      	bne.n	800162e <led2+0x1a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2120      	movs	r1, #32
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f003 fd14 	bl	8005054 <HAL_GPIO_WritePin>
	}
	else if (mode == 3) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(500);
	}
}
 800162c:	e017      	b.n	800165e <led2+0x4a>
	else if (mode == 2){
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <led2+0x50>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d106      	bne.n	8001644 <led2+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2120      	movs	r1, #32
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f003 fd09 	bl	8005054 <HAL_GPIO_WritePin>
}
 8001642:	e00c      	b.n	800165e <led2+0x4a>
	else if (mode == 3) {
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <led2+0x50>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d108      	bne.n	800165e <led2+0x4a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800164c:	2120      	movs	r1, #32
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f003 fd17 	bl	8005084 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f000 ffdf 	bl	800261c <HAL_Delay>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000000 	.word	0x20000000

08001668 <LAB2PART1>:
void LAB2PART1(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	if(Vfeedback > 1){
 800166c:	4b70      	ldr	r3, [pc, #448]	; (8001830 <LAB2PART1+0x1c8>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	dd4d      	ble.n	800171c <LAB2PART1+0xb4>
		 		  setSpd = (Vfeedback/360)*(1000-600)+600;
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <LAB2PART1+0x1c8>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001834 <LAB2PART1+0x1cc>
 800168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001838 <LAB2PART1+0x1d0>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800183c <LAB2PART1+0x1d4>
 800169a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <LAB2PART1+0x1d8>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < 180){
 80016a4:	4b62      	ldr	r3, [pc, #392]	; (8001830 <LAB2PART1+0x1c8>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001844 <LAB2PART1+0x1dc>
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d513      	bpl.n	80016e0 <LAB2PART1+0x78>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	4862      	ldr	r0, [pc, #392]	; (8001848 <LAB2PART1+0x1e0>)
 80016be:	f003 fcc9 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2120      	movs	r1, #32
 80016c6:	4860      	ldr	r0, [pc, #384]	; (8001848 <LAB2PART1+0x1e0>)
 80016c8:	f003 fcc4 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80016cc:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <LAB2PART1+0x1d8>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	4b5e      	ldr	r3, [pc, #376]	; (800184c <LAB2PART1+0x1e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016da:	ee17 2a90 	vmov	r2, s15
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > 180){
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <LAB2PART1+0x1c8>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001844 <LAB2PART1+0x1dc>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	dd13      	ble.n	800171c <LAB2PART1+0xb4>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2110      	movs	r1, #16
 80016f8:	4853      	ldr	r0, [pc, #332]	; (8001848 <LAB2PART1+0x1e0>)
 80016fa:	f003 fcab 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	2120      	movs	r1, #32
 8001702:	4851      	ldr	r0, [pc, #324]	; (8001848 <LAB2PART1+0x1e0>)
 8001704:	f003 fca6 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001708:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <LAB2PART1+0x1d8>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <LAB2PART1+0x1e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 2a90 	vmov	r2, s15
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < -1){
 800171c:	4b44      	ldr	r3, [pc, #272]	; (8001830 <LAB2PART1+0x1c8>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d54f      	bpl.n	80017d0 <LAB2PART1+0x168>
		 		  setSpd = (-Vfeedback/360)*(1000-600)+600;
 8001730:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <LAB2PART1+0x1c8>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	eeb1 7a67 	vneg.f32	s14, s15
 800173a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001834 <LAB2PART1+0x1cc>
 800173e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001742:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001838 <LAB2PART1+0x1d0>
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800183c <LAB2PART1+0x1d4>
 800174e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <LAB2PART1+0x1d8>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback < -180){
 8001758:	4b35      	ldr	r3, [pc, #212]	; (8001830 <LAB2PART1+0x1c8>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001850 <LAB2PART1+0x1e8>
 8001762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d513      	bpl.n	8001794 <LAB2PART1+0x12c>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2110      	movs	r1, #16
 8001770:	4835      	ldr	r0, [pc, #212]	; (8001848 <LAB2PART1+0x1e0>)
 8001772:	f003 fc6f 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2120      	movs	r1, #32
 800177a:	4833      	ldr	r0, [pc, #204]	; (8001848 <LAB2PART1+0x1e0>)
 800177c:	f003 fc6a 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <LAB2PART1+0x1d8>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <LAB2PART1+0x1e4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 2a90 	vmov	r2, s15
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Vfeedback > -180){
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <LAB2PART1+0x1c8>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001850 <LAB2PART1+0x1e8>
 800179e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dd13      	ble.n	80017d0 <LAB2PART1+0x168>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2110      	movs	r1, #16
 80017ac:	4826      	ldr	r0, [pc, #152]	; (8001848 <LAB2PART1+0x1e0>)
 80017ae:	f003 fc51 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2120      	movs	r1, #32
 80017b6:	4824      	ldr	r0, [pc, #144]	; (8001848 <LAB2PART1+0x1e0>)
 80017b8:	f003 fc4c 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <LAB2PART1+0x1d8>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <LAB2PART1+0x1e4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ca:	ee17 2a90 	vmov	r2, s15
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Vfeedback < 1 && Vfeedback > -1)
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <LAB2PART1+0x1c8>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d400      	bmi.n	80017e6 <LAB2PART1+0x17e>
		 		  setSpd = 0;
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
		 	  }
}
 80017e4:	e022      	b.n	800182c <LAB2PART1+0x1c4>
	if(Vfeedback < 1 && Vfeedback > -1)
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <LAB2PART1+0x1c8>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	dc00      	bgt.n	80017fc <LAB2PART1+0x194>
}
 80017fa:	e017      	b.n	800182c <LAB2PART1+0x1c4>
		 		  setSpd = 0;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <LAB2PART1+0x1d8>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2110      	movs	r1, #16
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <LAB2PART1+0x1e0>)
 800180a:	f003 fc23 	bl	8005054 <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2120      	movs	r1, #32
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <LAB2PART1+0x1e0>)
 8001814:	f003 fc1e 	bl	8005054 <HAL_GPIO_WritePin>
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <LAB2PART1+0x1d8>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <LAB2PART1+0x1e4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001826:	ee17 2a90 	vmov	r2, s15
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200003d8 	.word	0x200003d8
 8001834:	43b40000 	.word	0x43b40000
 8001838:	43c80000 	.word	0x43c80000
 800183c:	44160000 	.word	0x44160000
 8001840:	200003e0 	.word	0x200003e0
 8001844:	43340000 	.word	0x43340000
 8001848:	48000400 	.word	0x48000400
 800184c:	2000024c 	.word	0x2000024c
 8001850:	c3340000 	.word	0xc3340000

08001854 <LAB2PART2>:
void LAB2PART2(){
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

	avg_adc_part2=avg_adc1;
 8001858:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <LAB2PART2+0x190>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <LAB2PART2+0x194>)
 800185e:	6013      	str	r3, [r2, #0]
	if(Vfeedback2 > 1){
 8001860:	4b62      	ldr	r3, [pc, #392]	; (80019ec <LAB2PART2+0x198>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800186a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	dd41      	ble.n	80018f8 <LAB2PART2+0xa4>
		 		  setSpd = (Vfeedback2/360)*(1000-100)+100;
 8001874:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <LAB2PART2+0x198>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80019f0 <LAB2PART2+0x19c>
 800187e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001882:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80019f4 <LAB2PART2+0x1a0>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80019f8 <LAB2PART2+0x1a4>
 800188e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <LAB2PART2+0x1a8>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < 180){
 8001898:	4b54      	ldr	r3, [pc, #336]	; (80019ec <LAB2PART2+0x198>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001a00 <LAB2PART2+0x1ac>
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d50d      	bpl.n	80018c8 <LAB2PART2+0x74>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <LAB2PART2+0x1a8>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <LAB2PART2+0x1b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <LAB2PART2+0x1b0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > 180){
 80018c8:	4b48      	ldr	r3, [pc, #288]	; (80019ec <LAB2PART2+0x198>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a00 <LAB2PART2+0x1ac>
 80018d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd0d      	ble.n	80018f8 <LAB2PART2+0xa4>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <LAB2PART2+0x1b0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <LAB2PART2+0x1a8>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <LAB2PART2+0x1b0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f2:	ee17 2a90 	vmov	r2, s15
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < -1){
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <LAB2PART2+0x198>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d543      	bpl.n	8001994 <LAB2PART2+0x140>
		 		  setSpd = (-Vfeedback2/360)*(1000-100)+100;
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <LAB2PART2+0x198>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	eeb1 7a67 	vneg.f32	s14, s15
 8001916:	eddf 6a36 	vldr	s13, [pc, #216]	; 80019f0 <LAB2PART2+0x19c>
 800191a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80019f4 <LAB2PART2+0x1a0>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80019f8 <LAB2PART2+0x1a4>
 800192a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <LAB2PART2+0x1a8>)
 8001930:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Vfeedback2 < -180){
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <LAB2PART2+0x198>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001a08 <LAB2PART2+0x1b4>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d50d      	bpl.n	8001964 <LAB2PART2+0x110>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,  setSpd);
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <LAB2PART2+0x1a8>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <LAB2PART2+0x1b0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001956:	ee17 2a90 	vmov	r2, s15
 800195a:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,0);
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <LAB2PART2+0x1b0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 		  if(Vfeedback2 > -180){
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <LAB2PART2+0x198>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001a08 <LAB2PART2+0x1b4>
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd0d      	ble.n	8001994 <LAB2PART2+0x140>
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <LAB2PART2+0x1b0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
		 			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, setSpd);
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <LAB2PART2+0x1a8>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <LAB2PART2+0x1b0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198e:	ee17 2a90 	vmov	r2, s15
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
		 		  }
		 	  }
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <LAB2PART2+0x198>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d400      	bmi.n	80019aa <LAB2PART2+0x156>
		 	  {
		 		  setSpd = 0;
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		 	  }
}
 80019a8:	e016      	b.n	80019d8 <LAB2PART2+0x184>
	if(Vfeedback2 < 1 && Vfeedback2 > -1)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <LAB2PART2+0x198>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	dc00      	bgt.n	80019c0 <LAB2PART2+0x16c>
}
 80019be:	e00b      	b.n	80019d8 <LAB2PART2+0x184>
		 		  setSpd = 0;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <LAB2PART2+0x1a8>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <LAB2PART2+0x1b0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	639a      	str	r2, [r3, #56]	; 0x38
		 		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LAB2PART2+0x1b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000390 	.word	0x20000390
 80019e8:	20000398 	.word	0x20000398
 80019ec:	200003dc 	.word	0x200003dc
 80019f0:	43b40000 	.word	0x43b40000
 80019f4:	44610000 	.word	0x44610000
 80019f8:	42c80000 	.word	0x42c80000
 80019fc:	200003e0 	.word	0x200003e0
 8001a00:	43340000 	.word	0x43340000
 8001a04:	2000024c 	.word	0x2000024c
 8001a08:	c3340000 	.word	0xc3340000

08001a0c <LAB2PART3>:

void LAB2PART3(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	if(Error > 326.76){
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <LAB2PART3+0x198>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001a1a:	dd4d      	ble.n	8001ab8 <LAB2PART3+0xac>
		 		  setSpd = (Error/32676)*(1000-600)+600;
 8001a1c:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <LAB2PART3+0x198>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <LAB2PART3+0x19c>)
 8001a24:	fb82 1203 	smull	r1, r2, r2, r3
 8001a28:	1292      	asrs	r2, r2, #10
 8001a2a:	17db      	asrs	r3, r3, #31
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <LAB2PART3+0x1a0>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Error < 16338){
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <LAB2PART3+0x198>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	f643 72d1 	movw	r2, #16337	; 0x3fd1
 8001a56:	4293      	cmp	r3, r2
 8001a58:	dc13      	bgt.n	8001a82 <LAB2PART3+0x76>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4854      	ldr	r0, [pc, #336]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001a60:	f003 faf8 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2120      	movs	r1, #32
 8001a68:	4851      	ldr	r0, [pc, #324]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001a6a:	f003 faf3 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <LAB2PART3+0x1a0>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <LAB2PART3+0x1a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Error > 16338){
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <LAB2PART3+0x198>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	f643 72d2 	movw	r2, #16338	; 0x3fd2
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd13      	ble.n	8001ab8 <LAB2PART3+0xac>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2110      	movs	r1, #16
 8001a94:	4846      	ldr	r0, [pc, #280]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001a96:	f003 fadd 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	4844      	ldr	r0, [pc, #272]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001aa0:	f003 fad8 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <LAB2PART3+0x1a0>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <LAB2PART3+0x1a8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab2:	ee17 2a90 	vmov	r2, s15
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Error < -326.76){
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <LAB2PART3+0x198>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	f513 7fa3 	cmn.w	r3, #326	; 0x146
 8001ac2:	da49      	bge.n	8001b58 <LAB2PART3+0x14c>
		 		  setSpd = (-Error/32676)*(1000-600)+600;
 8001ac4:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <LAB2PART3+0x198>)
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <LAB2PART3+0x19c>)
 8001acc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad0:	1292      	asrs	r2, r2, #10
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <LAB2PART3+0x1a0>)
 8001aec:	edc3 7a00 	vstr	s15, [r3]
		 		  if(Error < -16338){
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <LAB2PART3+0x198>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	4a30      	ldr	r2, [pc, #192]	; (8001bb8 <LAB2PART3+0x1ac>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	da13      	bge.n	8001b24 <LAB2PART3+0x118>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2110      	movs	r1, #16
 8001b00:	482b      	ldr	r0, [pc, #172]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b02:	f003 faa7 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2120      	movs	r1, #32
 8001b0a:	4829      	ldr	r0, [pc, #164]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b0c:	f003 faa2 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <LAB2PART3+0x1a0>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <LAB2PART3+0x1a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b1e:	ee17 2a90 	vmov	r2, s15
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 		  if(Error > -16338){
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <LAB2PART3+0x198>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <LAB2PART3+0x1b0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	db13      	blt.n	8001b58 <LAB2PART3+0x14c>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	481e      	ldr	r0, [pc, #120]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b36:	f003 fa8d 	bl	8005054 <HAL_GPIO_WritePin>
		 			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b40:	f003 fa88 	bl	8005054 <HAL_GPIO_WritePin>
		 			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <LAB2PART3+0x1a0>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <LAB2PART3+0x1a8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b52:	ee17 2a90 	vmov	r2, s15
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
		 		  }
		 	  }
	if(Error < 326.76 && Error > -326.76)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <LAB2PART3+0x198>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8001b62:	dc1d      	bgt.n	8001ba0 <LAB2PART3+0x194>
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <LAB2PART3+0x198>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	f513 7fa3 	cmn.w	r3, #326	; 0x146
 8001b6e:	db17      	blt.n	8001ba0 <LAB2PART3+0x194>
		 	  {
		 		  setSpd = 0;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <LAB2PART3+0x1a0>)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b7e:	f003 fa69 	bl	8005054 <HAL_GPIO_WritePin>
		 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2120      	movs	r1, #32
 8001b86:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <LAB2PART3+0x1a4>)
 8001b88:	f003 fa64 	bl	8005054 <HAL_GPIO_WritePin>
		 		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setSpd);
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <LAB2PART3+0x1a0>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LAB2PART3+0x1a8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 2a90 	vmov	r2, s15
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
		 	  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000040a 	.word	0x2000040a
 8001ba8:	0805c425 	.word	0x0805c425
 8001bac:	200003e0 	.word	0x200003e0
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	2000024c 	.word	0x2000024c
 8001bb8:	ffffc02e 	.word	0xffffc02e
 8001bbc:	ffffc02f 	.word	0xffffc02f

08001bc0 <Average_ADC_Value>:

void Average_ADC_Value() {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
    uint32_t sum_adc1 = 0, sum_adc2 = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e015      	b.n	8001c00 <Average_ADC_Value+0x40>
        sum_adc1 += ADC_RawRead[i*2];
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <Average_ADC_Value+0x70>)
 8001bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
        sum_adc2 += ADC_RawRead[i*2+1];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <Average_ADC_Value+0x70>)
 8001bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < 5; i++) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d9e6      	bls.n	8001bd4 <Average_ADC_Value+0x14>
//        sum_adc3 += ADC_RawRead[i*3+2];
    }
    avg_adc1 = sum_adc1 / 5;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <Average_ADC_Value+0x74>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <Average_ADC_Value+0x78>)
 8001c12:	6013      	str	r3, [r2, #0]
    avg_adc2 = sum_adc2 / 5;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <Average_ADC_Value+0x74>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <Average_ADC_Value+0x7c>)
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000037c 	.word	0x2000037c
 8001c34:	cccccccd 	.word	0xcccccccd
 8001c38:	20000390 	.word	0x20000390
 8001c3c:	20000394 	.word	0x20000394

08001c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if (htim == &htim5 )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a87      	ldr	r2, [pc, #540]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	f040 8100 	bne.w	8001e52 <HAL_TIM_PeriodElapsedCallback+0x212>
  {
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8001c52:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	4a85      	ldr	r2, [pc, #532]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001c5a:	6013      	str	r3, [r2, #0]
	  ADCReadRaw = avg_adc2;
 8001c5c:	4b85      	ldr	r3, [pc, #532]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c68:	4b83      	ldr	r3, [pc, #524]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
	  set_pos = (avg_adc1/4095.0)*360.0;
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc12 	bl	800049c <__aeabi_ui2d>
 8001c78:	a379      	add	r3, pc, #484	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fdb1 	bl	80007e4 <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001c90:	f7fe fc7e 	bl	8000590 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe fe8a 	bl	80009b4 <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a78      	ldr	r2, [pc, #480]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001ca4:	6013      	str	r3, [r2, #0]
	  pos = (ADCReadRaw/4095.0)*360.0;;
 8001ca6:	4b74      	ldr	r3, [pc, #464]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc18 	bl	80004e0 <__aeabi_f2d>
 8001cb0:	a36b      	add	r3, pc, #428	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fd95 	bl	80007e4 <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001cc8:	f7fe fc62 	bl	8000590 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe fe6e 	bl	80009b4 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4a6b      	ldr	r2, [pc, #428]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001cdc:	6013      	str	r3, [r2, #0]

	  set_pos_part2 = (avg_adc_part2/4095.0)*360.0;
 8001cde:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fbda 	bl	800049c <__aeabi_ui2d>
 8001ce8:	a35d      	add	r3, pc, #372	; (adr r3, 8001e60 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fd79 	bl	80007e4 <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001d00:	f7fe fc46 	bl	8000590 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe fe52 	bl	80009b4 <__aeabi_d2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a5f      	ldr	r2, [pc, #380]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d14:	6013      	str	r3, [r2, #0]
	  angle_part2 =(QEIReadRaw/3072.0)*360.0;
 8001d16:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fbbe 	bl	800049c <__aeabi_ui2d>
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d26:	f7fe fd5d 	bl	80007e4 <__aeabi_ddiv>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001d38:	f7fe fc2a 	bl	8000590 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe fe36 	bl	80009b4 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d4c:	6013      	str	r3, [r2, #0]

	  Vfeedback = (arm_pid_f32(&PID, set_pos - pos)*1000);
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	ed93 7a00 	vldr	s14, [r3]
 8001d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d70:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001ea0 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
	  Vfeedback2 = (arm_pid_f32(&PID, set_pos_part2 - angle_part2)*1000);
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001dd2:	ed93 7a00 	vldr	s14, [r3]
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	edc7 7a06 	vstr	s15, [r7, #24]
    out = (S->A0 * in) +
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001e06:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	615a      	str	r2, [r3, #20]
    return (out);
 8001e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e44:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ea0 <HAL_TIM_PeriodElapsedCallback+0x260>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e4e:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001e52:	bf00      	nop
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40affe00 	.word	0x40affe00
 8001e68:	20000330 	.word	0x20000330
 8001e6c:	200002e4 	.word	0x200002e4
 8001e70:	2000039c 	.word	0x2000039c
 8001e74:	20000394 	.word	0x20000394
 8001e78:	200003cc 	.word	0x200003cc
 8001e7c:	20000390 	.word	0x20000390
 8001e80:	40768000 	.word	0x40768000
 8001e84:	200003d4 	.word	0x200003d4
 8001e88:	200003d0 	.word	0x200003d0
 8001e8c:	20000398 	.word	0x20000398
 8001e90:	200003a4 	.word	0x200003a4
 8001e94:	40a80000 	.word	0x40a80000
 8001e98:	200003a0 	.word	0x200003a0
 8001e9c:	200003a8 	.word	0x200003a8
 8001ea0:	447a0000 	.word	0x447a0000
 8001ea4:	200003d8 	.word	0x200003d8
 8001ea8:	200003dc 	.word	0x200003dc

08001eac <micros>:
//////UART/////
//adc & 0xFF;
//adc>>8 & oxFF

uint64_t micros()
{
 8001eac:	b4b0      	push	{r4, r5, r7}
 8001eae:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim2)+_micros;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <micros+0x2c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <micros+0x30>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	1884      	adds	r4, r0, r2
 8001ec4:	eb41 0503 	adc.w	r5, r1, r3
 8001ec8:	4622      	mov	r2, r4
 8001eca:	462b      	mov	r3, r5
}
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bcb0      	pop	{r4, r5, r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000298 	.word	0x20000298
 8001edc:	200003f0 	.word	0x200003f0

08001ee0 <Adc_to_Matlab>:

void Adc_to_Matlab(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	avg_adc11= avg_adc2;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <Adc_to_Matlab+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <Adc_to_Matlab+0x44>)
 8001eec:	801a      	strh	r2, [r3, #0]
	ADCgo[0] = 0x69;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <Adc_to_Matlab+0x48>)
 8001ef0:	2269      	movs	r2, #105	; 0x69
 8001ef2:	701a      	strb	r2, [r3, #0]
	ADCgo[1] =(uint8_t)(avg_adc11& 0xFF);//avg_adc11/100;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <Adc_to_Matlab+0x44>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <Adc_to_Matlab+0x48>)
 8001efc:	705a      	strb	r2, [r3, #1]
	ADCgo[2] =(uint8_t)((avg_adc11>>8)& 0xFF);//avg_adc11%100;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <Adc_to_Matlab+0x44>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <Adc_to_Matlab+0x48>)
 8001f0a:	709a      	strb	r2, [r3, #2]
	ADCgo[3] = 0x0A;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <Adc_to_Matlab+0x48>)
 8001f0e:	220a      	movs	r2, #10
 8001f10:	70da      	strb	r2, [r3, #3]
HAL_UART_Transmit_IT(&hlpuart1, ADCgo, 4);
 8001f12:	2204      	movs	r2, #4
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <Adc_to_Matlab+0x48>)
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <Adc_to_Matlab+0x4c>)
 8001f18:	f005 ff00 	bl	8007d1c <HAL_UART_Transmit_IT>

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000394 	.word	0x20000394
 8001f24:	20000408 	.word	0x20000408
 8001f28:	200003e4 	.word	0x200003e4
 8001f2c:	200000f8 	.word	0x200000f8

08001f30 <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001f34:	2204      	movs	r2, #4
 8001f36:	4903      	ldr	r1, [pc, #12]	; (8001f44 <UARTInterruptConfig+0x14>)
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <UARTInterruptConfig+0x18>)
 8001f3a:	f005 ff83 	bl	8007e44 <HAL_UART_Receive_IT>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003e8 	.word	0x200003e8
 8001f48:	200000f8 	.word	0x200000f8

08001f4c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_UART_RxCpltCallback+0x28>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d107      	bne.n	8001f6c <HAL_UART_RxCpltCallback+0x20>
	{
		RxBuffer[4] = '\0';
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_UART_RxCpltCallback+0x2c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 8001f62:	2204      	movs	r2, #4
 8001f64:	4904      	ldr	r1, [pc, #16]	; (8001f78 <HAL_UART_RxCpltCallback+0x2c>)
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <HAL_UART_RxCpltCallback+0x28>)
 8001f68:	f005 ff6c 	bl	8007e44 <HAL_UART_Receive_IT>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200000f8 	.word	0x200000f8
 8001f78:	200003e8 	.word	0x200003e8

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_MspInit+0x44>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6613      	str	r3, [r2, #96]	; 0x60
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_MspInit+0x44>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_MspInit+0x44>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_MspInit+0x44>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fbe:	f003 f937 	bl	8005230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09e      	sub	sp, #120	; 0x78
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2254      	movs	r2, #84	; 0x54
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f008 f94d 	bl	800a290 <memset>
  if(hadc->Instance==ADC1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffe:	d167      	bne.n	80020d0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002004:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002006:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800200a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fe4b 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800201c:	f7ff ffae 	bl	8001f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 8002026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800202a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_ADC_MspInit+0x108>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002050:	2303      	movs	r3, #3
 8002052:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f002 fe73 	bl	8004d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_ADC_MspInit+0x110>)
 800206e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 8002072:	2205      	movs	r2, #5
 8002074:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 8002092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002096:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 800209a:	2220      	movs	r2, #32
 800209c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 80020a6:	f002 fb21 	bl	80046ec <HAL_DMA_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80020b0:	f7ff ff64 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_ADC_MspInit+0x10c>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2012      	movs	r0, #18
 80020c6:	f002 fadc 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020ca:	2012      	movs	r0, #18
 80020cc:	f002 faf3 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d0:	bf00      	nop
 80020d2:	3778      	adds	r7, #120	; 0x78
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	20000098 	.word	0x20000098
 80020e0:	40020008 	.word	0x40020008

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b09e      	sub	sp, #120	; 0x78
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2254      	movs	r2, #84	; 0x54
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f008 f8c3 	bl	800a290 <memset>
  if(huart->Instance==LPUART1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_UART_MspInit+0x160>)
 8002110:	4293      	cmp	r3, r2
 8002112:	f040 8092 	bne.w	800223a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002116:	2320      	movs	r3, #32
 8002118:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fdc2 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800212e:	f7ff ff25 	bl	8001f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002132:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_UART_MspInit+0x164>)
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	4a44      	ldr	r2, [pc, #272]	; (8002248 <HAL_UART_MspInit+0x164>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_UART_MspInit+0x164>)
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_UART_MspInit+0x164>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <HAL_UART_MspInit+0x164>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_UART_MspInit+0x164>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002162:	230c      	movs	r3, #12
 8002164:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002172:	230c      	movs	r3, #12
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002180:	f002 fde6 	bl	8004d50 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_UART_MspInit+0x168>)
 8002186:	4a32      	ldr	r2, [pc, #200]	; (8002250 <HAL_UART_MspInit+0x16c>)
 8002188:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_UART_MspInit+0x168>)
 800218c:	2222      	movs	r2, #34	; 0x22
 800218e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_UART_MspInit+0x168>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_UART_MspInit+0x168>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_UART_MspInit+0x168>)
 800219e:	2280      	movs	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_UART_MspInit+0x168>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_UART_MspInit+0x168>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_UART_MspInit+0x168>)
 80021b0:	2220      	movs	r2, #32
 80021b2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_UART_MspInit+0x168>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80021ba:	4824      	ldr	r0, [pc, #144]	; (800224c <HAL_UART_MspInit+0x168>)
 80021bc:	f002 fa96 	bl	80046ec <HAL_DMA_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80021c6:	f7ff fed9 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_UART_MspInit+0x168>)
 80021ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80021d2:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_UART_MspInit+0x168>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_UART_MspInit+0x174>)
 80021dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021e0:	2223      	movs	r2, #35	; 0x23
 80021e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021e6:	2210      	movs	r2, #16
 80021e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_UART_MspInit+0x170>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_UART_MspInit+0x170>)
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_UART_MspInit+0x170>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800220e:	4811      	ldr	r0, [pc, #68]	; (8002254 <HAL_UART_MspInit+0x170>)
 8002210:	f002 fa6c 	bl	80046ec <HAL_DMA_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800221a:	f7ff feaf 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_UART_MspInit+0x170>)
 8002222:	67da      	str	r2, [r3, #124]	; 0x7c
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <HAL_UART_MspInit+0x170>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	205b      	movs	r0, #91	; 0x5b
 8002230:	f002 fa27 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002234:	205b      	movs	r0, #91	; 0x5b
 8002236:	f002 fa3e 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3778      	adds	r7, #120	; 0x78
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40008000 	.word	0x40008000
 8002248:	40021000 	.word	0x40021000
 800224c:	2000018c 	.word	0x2000018c
 8002250:	4002001c 	.word	0x4002001c
 8002254:	200001ec 	.word	0x200001ec
 8002258:	40020030 	.word	0x40020030

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_TIM_Base_MspInit+0x8c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10c      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 8002274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002286:	e02a      	b.n	80022de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d10c      	bne.n	80022ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
}
 80022aa:	e018      	b.n	80022de <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_TIM_Base_MspInit+0x94>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d113      	bne.n	80022de <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_TIM_Base_MspInit+0x90>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2032      	movs	r0, #50	; 0x32
 80022d4:	f002 f9d5 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80022d8:	2032      	movs	r0, #50	; 0x32
 80022da:	f002 f9ec 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40000c00 	.word	0x40000c00

080022f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d128      	bne.n	8002368 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_TIM_Encoder_MspInit+0x80>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002356:	2302      	movs	r3, #2
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f002 fcf4 	bl	8004d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40000400 	.word	0x40000400
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_TIM_MspPostInit+0x64>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11b      	bne.n	80023d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_TIM_MspPostInit+0x68>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_TIM_MspPostInit+0x68>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_TIM_MspPostInit+0x68>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <HAL_TIM_MspPostInit+0x6c>)
 80023ce:	f002 fcbf 	bl	8004d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000800 	.word	0x48000800

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f8d4 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Channel1_IRQHandler+0x10>)
 8002442:	f002 fb36 	bl	8004ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000098 	.word	0x20000098

08002450 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <DMA1_Channel2_IRQHandler+0x10>)
 8002456:	f002 fb2c 	bl	8004ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000018c 	.word	0x2000018c

08002464 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Channel3_IRQHandler+0x10>)
 800246a:	f002 fb22 	bl	8004ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200001ec 	.word	0x200001ec

08002478 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <ADC1_2_IRQHandler+0x10>)
 800247e:	f000 fde5 	bl	800304c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000002c 	.word	0x2000002c

0800248c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002490:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002494:	f002 fe10 	bl	80050b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM5_IRQHandler+0x10>)
 80024a2:	f004 fa39 	bl	8006918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000330 	.word	0x20000330

080024b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <LPUART1_IRQHandler+0x10>)
 80024b6:	f005 fd11 	bl	8007edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000f8 	.word	0x200000f8

080024c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ec:	f7ff ffea 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <LoopForever+0xe>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	; (8002534 <LoopForever+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f007 fec3 	bl	800a2a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251a:	f7fe fc19 	bl	8000d50 <main>

0800251e <LoopForever>:

LoopForever:
    b LoopForever
 800251e:	e7fe      	b.n	800251e <LoopForever>
  ldr   r0, =_estack
 8002520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800252c:	0800a350 	.word	0x0800a350
  ldr r2, =_sbss
 8002530:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002534:	20000410 	.word	0x20000410

08002538 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC3_IRQHandler>

0800253a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f002 f891 	bl	800466c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f80e 	bl	800256c <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	e001      	b.n	8002560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255c:	f7ff fd14 	bl	8001f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002560:	79fb      	ldrb	r3, [r7, #7]

}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_InitTick+0x68>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d022      	beq.n	80025c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_InitTick+0x6c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_InitTick+0x68>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800258c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f002 f89c 	bl	80046d2 <HAL_SYSTICK_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d809      	bhi.n	80025ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a6:	2200      	movs	r2, #0
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295
 80025ae:	f002 f868 	bl	8004682 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_InitTick+0x70>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e007      	b.n	80025ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e004      	b.n	80025ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e001      	b.n	80025ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000000c 	.word	0x2000000c
 80025d8:	20000004 	.word	0x20000004
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_IncTick+0x1c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_IncTick+0x20>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a03      	ldr	r2, [pc, #12]	; (80025fc <HAL_IncTick+0x1c>)
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	2000040c 	.word	0x2000040c
 8002600:	2000000c 	.word	0x2000000c

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000040c 	.word	0x2000040c

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d004      	beq.n	8002640 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_Delay+0x40>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002640:	bf00      	nop
 8002642:	f7ff ffdf 	bl	8002604 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d8f7      	bhi.n	8002642 <HAL_Delay+0x26>
  {
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000000c 	.word	0x2000000c

08002660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3360      	adds	r3, #96	; 0x60
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <LL_ADC_SetOffset+0x44>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	03fff000 	.word	0x03fff000

08002710 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	461a      	mov	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3360      	adds	r3, #96	; 0x60
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	431a      	orrs	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3360      	adds	r3, #96	; 0x60
 80027b8:	461a      	mov	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	615a      	str	r2, [r3, #20]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800282a:	b480      	push	{r7}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	4413      	add	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	211f      	movs	r1, #31
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 011f 	and.w	r1, r3, #31
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3314      	adds	r3, #20
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0e5b      	lsrs	r3, r3, #25
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	0d1b      	lsrs	r3, r3, #20
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2107      	movs	r1, #7
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	401a      	ands	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	0d1b      	lsrs	r3, r3, #20
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	431a      	orrs	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0318 	and.w	r3, r3, #24
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002924:	40d9      	lsrs	r1, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	400b      	ands	r3, r1
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	431a      	orrs	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	0007ffff 	.word	0x0007ffff

08002948 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 031f 	and.w	r3, r3, #31
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6093      	str	r3, [r2, #8]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b8:	d101      	bne.n	80029be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a08:	d101      	bne.n	8002a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a58:	f043 0202 	orr.w	r2, r3, #2
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <LL_ADC_IsEnabled+0x18>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_ADC_IsEnabled+0x1a>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d101      	bne.n	8002aaa <LL_ADC_IsDisableOngoing+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_ADC_IsDisableOngoing+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1a9      	b.n	8002e9a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fa3b 	bl	8001fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff19 	bl	80029a4 <LL_ADC_IsDeepPowerDownEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff feff 	bl	8002980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff34 	bl	80029f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff18 	bl	80029cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9c:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_ADC_Init+0x2e4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	4a9c      	ldr	r2, [pc, #624]	; (8002e14 <HAL_ADC_Init+0x2e8>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	099b      	lsrs	r3, r3, #6
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff16 	bl	80029f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff76 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8142 	bne.w	8002e88 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 813e 	bne.w	8002e88 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c14:	f043 0202 	orr.w	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff23 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d141      	bne.n	8002cb0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c34:	d004      	beq.n	8002c40 <HAL_ADC_Init+0x114>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_ADC_Init+0x2ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d10f      	bne.n	8002c60 <HAL_ADC_Init+0x134>
 8002c40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c44:	f7ff ff12 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	4873      	ldr	r0, [pc, #460]	; (8002e18 <HAL_ADC_Init+0x2ec>)
 8002c4c:	f7ff ff0e 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4323      	orrs	r3, r4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e012      	b.n	8002c86 <HAL_ADC_Init+0x15a>
 8002c60:	486e      	ldr	r0, [pc, #440]	; (8002e1c <HAL_ADC_Init+0x2f0>)
 8002c62:	f7ff ff03 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c66:	4604      	mov	r4, r0
 8002c68:	486d      	ldr	r0, [pc, #436]	; (8002e20 <HAL_ADC_Init+0x2f4>)
 8002c6a:	f7ff feff 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	431c      	orrs	r4, r3
 8002c72:	486c      	ldr	r0, [pc, #432]	; (8002e24 <HAL_ADC_Init+0x2f8>)
 8002c74:	f7ff fefa 	bl	8002a6c <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c92:	d004      	beq.n	8002c9e <HAL_ADC_Init+0x172>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5f      	ldr	r2, [pc, #380]	; (8002e18 <HAL_ADC_Init+0x2ec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0x176>
 8002c9e:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_ADC_Init+0x2fc>)
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_Init+0x178>
 8002ca2:	4a62      	ldr	r2, [pc, #392]	; (8002e2c <HAL_ADC_Init+0x300>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f7ff fcd8 	bl	8002660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7f5b      	ldrb	r3, [r3, #29]
 8002cb4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cc0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cc6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	045b      	lsls	r3, r3, #17
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <HAL_ADC_Init+0x304>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fee5 	bl	8002b06 <LL_ADC_INJ_IsConversionOngoing>
 8002d3c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d17f      	bne.n	8002e44 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d17c      	bne.n	8002e44 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d4e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6911      	ldr	r1, [r2, #16]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002daa:	e013      	b.n	8002dd4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d12a      	bne.n	8002e34 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e00:	430a      	orrs	r2, r1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	e019      	b.n	8002e44 <HAL_ADC_Init+0x318>
 8002e10:	20000004 	.word	0x20000004
 8002e14:	053e2d63 	.word	0x053e2d63
 8002e18:	50000100 	.word	0x50000100
 8002e1c:	50000400 	.word	0x50000400
 8002e20:	50000500 	.word	0x50000500
 8002e24:	50000600 	.word	0x50000600
 8002e28:	50000300 	.word	0x50000300
 8002e2c:	50000700 	.word	0x50000700
 8002e30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f023 010f 	bic.w	r1, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
 8002e64:	e007      	b.n	8002e76 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 020f 	bic.w	r2, r2, #15
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e86:	e007      	b.n	8002e98 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f043 0210 	orr.w	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	bf00      	nop

08002ea4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADC_Start_DMA+0x20>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5a      	ldr	r2, [pc, #360]	; (8003028 <HAL_ADC_Start_DMA+0x184>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x24>
 8002ec4:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_ADC_Start_DMA+0x188>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_Start_DMA+0x26>
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_ADC_Start_DMA+0x18c>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fd3c 	bl	8002948 <LL_ADC_GetMultimode>
 8002ed0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe02 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 809b 	bne.w	800301a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_Start_DMA+0x4e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e096      	b.n	8003020 <HAL_ADC_Start_DMA+0x17c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_ADC_Start_DMA+0x190>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d008      	beq.n	8002f16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d002      	beq.n	8002f16 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d17a      	bne.n	800300c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 ff60 	bl	8003ddc <ADC_Enable>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d16d      	bne.n	8003002 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <HAL_ADC_Start_DMA+0x184>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_ADC_Start_DMA+0xb4>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <HAL_ADC_Start_DMA+0x194>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d002      	beq.n	8002f54 <HAL_ADC_Start_DMA+0xb0>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_Start_DMA+0xb8>
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_ADC_Start_DMA+0x198>)
 8002f56:	e001      	b.n	8002f5c <HAL_ADC_Start_DMA+0xb8>
 8002f58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d002      	beq.n	8002f6a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	f023 0206 	bic.w	r2, r3, #6
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60
 8002f8e:	e002      	b.n	8002f96 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	4a29      	ldr	r2, [pc, #164]	; (8003040 <HAL_ADC_Start_DMA+0x19c>)
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_ADC_Start_DMA+0x1a0>)
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	4a27      	ldr	r2, [pc, #156]	; (8003048 <HAL_ADC_Start_DMA+0x1a4>)
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	221c      	movs	r2, #28
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0210 	orr.w	r2, r2, #16
 8002fcc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3340      	adds	r3, #64	; 0x40
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f001 fc25 	bl	800483c <HAL_DMA_Start_IT>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fd5c 	bl	8002ab8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003000:	e00d      	b.n	800301e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800300a:	e008      	b.n	800301e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003018:	e001      	b.n	800301e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800301a:	2302      	movs	r3, #2
 800301c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	50000100 	.word	0x50000100
 800302c:	50000300 	.word	0x50000300
 8003030:	50000700 	.word	0x50000700
 8003034:	50000600 	.word	0x50000600
 8003038:	50000500 	.word	0x50000500
 800303c:	50000400 	.word	0x50000400
 8003040:	08003fc7 	.word	0x08003fc7
 8003044:	0800409f 	.word	0x0800409f
 8003048:	080040bb 	.word	0x080040bb

0800304c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003070:	d004      	beq.n	800307c <HAL_ADC_IRQHandler+0x30>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a8e      	ldr	r2, [pc, #568]	; (80032b0 <HAL_ADC_IRQHandler+0x264>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_ADC_IRQHandler+0x34>
 800307c:	4b8d      	ldr	r3, [pc, #564]	; (80032b4 <HAL_ADC_IRQHandler+0x268>)
 800307e:	e000      	b.n	8003082 <HAL_ADC_IRQHandler+0x36>
 8003080:	4b8d      	ldr	r3, [pc, #564]	; (80032b8 <HAL_ADC_IRQHandler+0x26c>)
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fc60 	bl	8002948 <LL_ADC_GetMultimode>
 8003088:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d017      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x78>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 f8f6 	bl	80042a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <HAL_ADC_IRQHandler+0x8c>
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8094 	beq.w	800320c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 808e 	beq.w	800320c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fb79 	bl	8002804 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d072      	beq.n	80031fe <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <HAL_ADC_IRQHandler+0x264>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_ADC_IRQHandler+0xea>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a65      	ldr	r2, [pc, #404]	; (80032bc <HAL_ADC_IRQHandler+0x270>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d002      	beq.n	8003132 <HAL_ADC_IRQHandler+0xe6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	e003      	b.n	800313a <HAL_ADC_IRQHandler+0xee>
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <HAL_ADC_IRQHandler+0x274>)
 8003134:	e001      	b.n	800313a <HAL_ADC_IRQHandler+0xee>
 8003136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4293      	cmp	r3, r2
 8003140:	d008      	beq.n	8003154 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d002      	beq.n	8003154 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b09      	cmp	r3, #9
 8003152:	d104      	bne.n	800315e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	623b      	str	r3, [r7, #32]
 800315c:	e014      	b.n	8003188 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_ADC_IRQHandler+0x264>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_ADC_IRQHandler+0x130>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a53      	ldr	r2, [pc, #332]	; (80032bc <HAL_ADC_IRQHandler+0x270>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d002      	beq.n	8003178 <HAL_ADC_IRQHandler+0x12c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e003      	b.n	8003180 <HAL_ADC_IRQHandler+0x134>
 8003178:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_ADC_IRQHandler+0x274>)
 800317a:	e001      	b.n	8003180 <HAL_ADC_IRQHandler+0x134>
 800317c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003180:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d135      	bne.n	80031fe <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d12e      	bne.n	80031fe <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fc9b 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 020c 	bic.w	r2, r2, #12
 80031be:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d112      	bne.n	80031fe <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80031e4:	e00b      	b.n	80031fe <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f984 	bl	800350c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	220c      	movs	r2, #12
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_ADC_IRQHandler+0x1d4>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80b3 	beq.w	8003392 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80ad 	beq.w	8003392 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fb14 	bl	8002882 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800325a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff facf 	bl	8002804 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003266:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_ADC_IRQHandler+0x264>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_ADC_IRQHandler+0x23a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a11      	ldr	r2, [pc, #68]	; (80032bc <HAL_ADC_IRQHandler+0x270>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d002      	beq.n	8003282 <HAL_ADC_IRQHandler+0x236>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	e003      	b.n	800328a <HAL_ADC_IRQHandler+0x23e>
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_ADC_IRQHandler+0x274>)
 8003284:	e001      	b.n	800328a <HAL_ADC_IRQHandler+0x23e>
 8003286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	4293      	cmp	r3, r2
 8003290:	d008      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d002      	beq.n	80032a4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b07      	cmp	r3, #7
 80032a2:	d10f      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	e01f      	b.n	80032ee <HAL_ADC_IRQHandler+0x2a2>
 80032ae:	bf00      	nop
 80032b0:	50000100 	.word	0x50000100
 80032b4:	50000300 	.word	0x50000300
 80032b8:	50000700 	.word	0x50000700
 80032bc:	50000500 	.word	0x50000500
 80032c0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a8b      	ldr	r2, [pc, #556]	; (80034f8 <HAL_ADC_IRQHandler+0x4ac>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_ADC_IRQHandler+0x296>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a8a      	ldr	r2, [pc, #552]	; (80034fc <HAL_ADC_IRQHandler+0x4b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d002      	beq.n	80032de <HAL_ADC_IRQHandler+0x292>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_IRQHandler+0x29a>
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_ADC_IRQHandler+0x4b4>)
 80032e0:	e001      	b.n	80032e6 <HAL_ADC_IRQHandler+0x29a>
 80032e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032e6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d047      	beq.n	8003384 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_ADC_IRQHandler+0x2c2>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d03f      	beq.n	8003384 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d13a      	bne.n	8003384 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d133      	bne.n	8003384 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d12e      	bne.n	8003384 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fbeb 	bl	8002b06 <LL_ADC_INJ_IsConversionOngoing>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d11a      	bne.n	800336c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003344:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d112      	bne.n	8003384 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	65da      	str	r2, [r3, #92]	; 0x5c
 800336a:	e00b      	b.n	8003384 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	f043 0210 	orr.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 ff67 	bl	8004258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2260      	movs	r2, #96	; 0x60
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	2b00      	cmp	r3, #0
 800339a:	d011      	beq.n	80033c0 <HAL_ADC_IRQHandler+0x374>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8be 	bl	8003534 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d012      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x3a4>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 ff4d 	bl	8004280 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d012      	beq.n	8003420 <HAL_ADC_IRQHandler+0x3d4>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 ff3f 	bl	8004294 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d043      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x466>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03e      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800343c:	2301      	movs	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e021      	b.n	8003486 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003450:	d004      	beq.n	800345c <HAL_ADC_IRQHandler+0x410>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_ADC_IRQHandler+0x4ac>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_ADC_IRQHandler+0x414>
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_ADC_IRQHandler+0x4b8>)
 800345e:	e000      	b.n	8003462 <HAL_ADC_IRQHandler+0x416>
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_ADC_IRQHandler+0x4bc>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fa7e 	bl	8002964 <LL_ADC_GetMultiDMATransfer>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800346e:	2301      	movs	r3, #1
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e008      	b.n	8003486 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10e      	bne.n	80034aa <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349c:	f043 0202 	orr.w	r2, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f84f 	bl	8003548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d018      	beq.n	80034ee <HAL_ADC_IRQHandler+0x4a2>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	f043 0208 	orr.w	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 febf 	bl	800426c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	50000100 	.word	0x50000100
 80034fc:	50000500 	.word	0x50000500
 8003500:	50000400 	.word	0x50000400
 8003504:	50000300 	.word	0x50000300
 8003508:	50000700 	.word	0x50000700

0800350c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0b6      	sub	sp, #216	; 0xd8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x24>
 800357a:	2302      	movs	r3, #2
 800357c:	f000 bc13 	b.w	8003da6 <HAL_ADC_ConfigChannel+0x84a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff faa7 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 83f3 	bne.w	8003d80 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7ff f93f 	bl	800282a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fa95 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 80035b6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff faa1 	bl	8002b06 <LL_ADC_INJ_IsConversionOngoing>
 80035c4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f040 81d9 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 81d4 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e4:	d10f      	bne.n	8003606 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7ff f959 	bl	80028a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f8ed 	bl	80027de <LL_ADC_SetSamplingTimeCommonConfig>
 8003604:	e00e      	b.n	8003624 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	461a      	mov	r2, r3
 8003614:	f7ff f948 	bl	80028a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f8dd 	bl	80027de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d022      	beq.n	800368c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6919      	ldr	r1, [r3, #16]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003656:	f7ff f837 	bl	80026c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	461a      	mov	r2, r3
 8003668:	f7ff f883 	bl	8002772 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003678:	2b01      	cmp	r3, #1
 800367a:	d102      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x126>
 800367c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003680:	e000      	b.n	8003684 <HAL_ADC_ConfigChannel+0x128>
 8003682:	2300      	movs	r3, #0
 8003684:	461a      	mov	r2, r3
 8003686:	f7ff f88f 	bl	80027a8 <LL_ADC_SetOffsetSaturation>
 800368a:	e17b      	b.n	8003984 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f83c 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x15c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f831 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80036ae:	4603      	mov	r3, r0
 80036b0:	0e9b      	lsrs	r3, r3, #26
 80036b2:	f003 021f 	and.w	r2, r3, #31
 80036b6:	e01e      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x19a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f826 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80036e6:	2320      	movs	r3, #32
 80036e8:	e004      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80036ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_ADC_ConfigChannel+0x1b2>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0e9b      	lsrs	r3, r3, #26
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	e018      	b.n	8003740 <HAL_ADC_ConfigChannel+0x1e4>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800372a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003732:	2320      	movs	r3, #32
 8003734:	e004      	b.n	8003740 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003740:	429a      	cmp	r2, r3
 8003742:	d106      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fff5 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe ffd9 	bl	8002710 <LL_ADC_GetOffsetChannel>
 800375e:	4603      	mov	r3, r0
 8003760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <HAL_ADC_ConfigChannel+0x222>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe ffce 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003774:	4603      	mov	r3, r0
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	e01e      	b.n	80037bc <HAL_ADC_ConfigChannel+0x260>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe ffc3 	bl	8002710 <LL_ADC_GetOffsetChannel>
 800378a:	4603      	mov	r3, r0
 800378c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800379c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e004      	b.n	80037ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x278>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	e018      	b.n	8003806 <HAL_ADC_ConfigChannel+0x2aa>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e004      	b.n	8003806 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80037fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003806:	429a      	cmp	r2, r3
 8003808:	d106      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	2101      	movs	r1, #1
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe ff92 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe ff76 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003824:	4603      	mov	r3, r0
 8003826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x2e8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe ff6b 	bl	8002710 <LL_ADC_GetOffsetChannel>
 800383a:	4603      	mov	r3, r0
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	f003 021f 	and.w	r2, r3, #31
 8003842:	e01e      	b.n	8003882 <HAL_ADC_ConfigChannel+0x326>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ff60 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003850:	4603      	mov	r3, r0
 8003852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800386a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003872:	2320      	movs	r3, #32
 8003874:	e004      	b.n	8003880 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_ADC_ConfigChannel+0x33e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	e016      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x36c>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038ba:	2320      	movs	r3, #32
 80038bc:	e004      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d106      	bne.n	80038da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe ff31 	bl	800273c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2103      	movs	r1, #3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe ff15 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x3aa>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2103      	movs	r1, #3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe ff0a 	bl	8002710 <LL_ADC_GetOffsetChannel>
 80038fc:	4603      	mov	r3, r0
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	e017      	b.n	8003936 <HAL_ADC_ConfigChannel+0x3da>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2103      	movs	r1, #3
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe feff 	bl	8002710 <LL_ADC_GetOffsetChannel>
 8003912:	4603      	mov	r3, r0
 8003914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800391e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003920:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_ADC_ConfigChannel+0x3f2>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	e011      	b.n	8003972 <HAL_ADC_ConfigChannel+0x416>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800395c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003966:	2320      	movs	r3, #32
 8003968:	e003      	b.n	8003972 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003972:	429a      	cmp	r2, r3
 8003974:	d106      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	2103      	movs	r1, #3
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fedc 	bl	800273c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f86f 	bl	8002a6c <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 813d 	bne.w	8003c10 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6819      	ldr	r1, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f7fe ffac 	bl	8002900 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4aa2      	ldr	r2, [pc, #648]	; (8003c38 <HAL_ADC_ConfigChannel+0x6dc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f040 812e 	bne.w	8003c10 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x480>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	bf94      	ite	ls
 80039d4:	2301      	movls	r3, #1
 80039d6:	2300      	movhi	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e019      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x4b4>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80039f4:	2320      	movs	r3, #32
 80039f6:	e003      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80039f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2b09      	cmp	r3, #9
 8003a08:	bf94      	ite	ls
 8003a0a:	2301      	movls	r3, #1
 8003a0c:	2300      	movhi	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d079      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x4d4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0e9b      	lsrs	r3, r3, #26
 8003a26:	3301      	adds	r3, #1
 8003a28:	069b      	lsls	r3, r3, #26
 8003a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a2e:	e015      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x500>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	e003      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	069b      	lsls	r3, r3, #26
 8003a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x520>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e9b      	lsrs	r3, r3, #26
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	e017      	b.n	8003aac <HAL_ADC_ConfigChannel+0x550>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e003      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	ea42 0103 	orr.w	r1, r2, r3
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x576>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	0e9b      	lsrs	r3, r3, #26
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	051b      	lsls	r3, r3, #20
 8003ad0:	e018      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x5a8>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e003      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b04:	430b      	orrs	r3, r1
 8003b06:	e07e      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x5c8>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0e9b      	lsrs	r3, r3, #26
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	069b      	lsls	r3, r3, #26
 8003b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b22:	e015      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x5f4>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	069b      	lsls	r3, r3, #26
 8003b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x614>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2101      	movs	r1, #1
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	e017      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x644>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	61fb      	str	r3, [r7, #28]
  return result;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b88:	2320      	movs	r3, #32
 8003b8a:	e003      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	ea42 0103 	orr.w	r1, r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x670>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f003 021f 	and.w	r2, r3, #31
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b1e      	subs	r3, #30
 8003bc4:	051b      	lsls	r3, r3, #20
 8003bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bca:	e01b      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x6a8>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	613b      	str	r3, [r7, #16]
  return result;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003be4:	2320      	movs	r3, #32
 8003be6:	e003      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f003 021f 	and.w	r2, r3, #31
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3b1e      	subs	r3, #30
 8003bfe:	051b      	lsls	r3, r3, #20
 8003c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c04:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f7fe fe4c 	bl	80028a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_ADC_ConfigChannel+0x6e0>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80be 	beq.w	8003d9a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x6d6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10a      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x6ec>
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c34:	e009      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x6ee>
 8003c36:	bf00      	nop
 8003c38:	407f0000 	.word	0x407f0000
 8003c3c:	80080000 	.word	0x80080000
 8003c40:	50000100 	.word	0x50000100
 8003c44:	50000300 	.word	0x50000300
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_ADC_ConfigChannel+0x854>)
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fd2e 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 8003c50:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a56      	ldr	r2, [pc, #344]	; (8003db4 <HAL_ADC_ConfigChannel+0x858>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x70c>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_ADC_ConfigChannel+0x85c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d13a      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d134      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7c:	d005      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x72e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a4e      	ldr	r2, [pc, #312]	; (8003dbc <HAL_ADC_ConfigChannel+0x860>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f040 8085 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c92:	d004      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x742>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a49      	ldr	r2, [pc, #292]	; (8003dc0 <HAL_ADC_ConfigChannel+0x864>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x746>
 8003c9e:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_ADC_ConfigChannel+0x868>)
 8003ca0:	e000      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x748>
 8003ca2:	4a43      	ldr	r2, [pc, #268]	; (8003db0 <HAL_ADC_ConfigChannel+0x854>)
 8003ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f7fe fce9 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cb4:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <HAL_ADC_ConfigChannel+0x86c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <HAL_ADC_ConfigChannel+0x870>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cdc:	e05a      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <HAL_ADC_ConfigChannel+0x874>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d125      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11f      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a31      	ldr	r2, [pc, #196]	; (8003dc0 <HAL_ADC_ConfigChannel+0x864>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d104      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x7ac>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <HAL_ADC_ConfigChannel+0x878>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d047      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x7c0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <HAL_ADC_ConfigChannel+0x864>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x7c4>
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_ADC_ConfigChannel+0x868>)
 8003d1e:	e000      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x7c6>
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_ADC_ConfigChannel+0x854>)
 8003d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fcaa 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d32:	e031      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <HAL_ADC_ConfigChannel+0x87c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12d      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d127      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_ADC_ConfigChannel+0x864>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0x80c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_ADC_ConfigChannel+0x864>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x810>
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_ADC_ConfigChannel+0x868>)
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x812>
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_ADC_ConfigChannel+0x854>)
 8003d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fe fc84 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
 8003d7e:	e00c      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d92:	e002      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003da2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	37d8      	adds	r7, #216	; 0xd8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	50000700 	.word	0x50000700
 8003db4:	c3210000 	.word	0xc3210000
 8003db8:	90c00010 	.word	0x90c00010
 8003dbc:	50000600 	.word	0x50000600
 8003dc0:	50000100 	.word	0x50000100
 8003dc4:	50000300 	.word	0x50000300
 8003dc8:	20000004 	.word	0x20000004
 8003dcc:	053e2d63 	.word	0x053e2d63
 8003dd0:	c7520000 	.word	0xc7520000
 8003dd4:	50000500 	.word	0x50000500
 8003dd8:	cb840000 	.word	0xcb840000

08003ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fe3d 	bl	8002a6c <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d176      	bne.n	8003ee6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <ADC_Enable+0x114>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e062      	b.n	8003ee8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fdf8 	bl	8002a1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e34:	d004      	beq.n	8003e40 <ADC_Enable+0x64>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <ADC_Enable+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <ADC_Enable+0x68>
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <ADC_Enable+0x11c>)
 8003e42:	e000      	b.n	8003e46 <ADC_Enable+0x6a>
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <ADC_Enable+0x120>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fc30 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 8003e4c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d013      	beq.n	8003e7e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <ADC_Enable+0x124>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <ADC_Enable+0x128>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e70:	e002      	b.n	8003e78 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f9      	bne.n	8003e72 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e7e:	f7fe fbc1 	bl	8002604 <HAL_GetTick>
 8003e82:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e84:	e028      	b.n	8003ed8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fdee 	bl	8002a6c <LL_ADC_IsEnabled>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fdbe 	bl	8002a1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ea0:	f7fe fbb0 	bl	8002604 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d914      	bls.n	8003ed8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d00d      	beq.n	8003ed8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	f043 0210 	orr.w	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d1cf      	bne.n	8003e86 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	8000003f 	.word	0x8000003f
 8003ef4:	50000100 	.word	0x50000100
 8003ef8:	50000300 	.word	0x50000300
 8003efc:	50000700 	.word	0x50000700
 8003f00:	20000004 	.word	0x20000004
 8003f04:	053e2d63 	.word	0x053e2d63

08003f08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fdbc 	bl	8002a92 <LL_ADC_IsDisableOngoing>
 8003f1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fda3 	bl	8002a6c <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d144      	bne.n	8003fbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030d 	and.w	r3, r3, #13
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10c      	bne.n	8003f5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fd7d 	bl	8002a44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f52:	f7fe fb57 	bl	8002604 <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f58:	e029      	b.n	8003fae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	f043 0210 	orr.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e023      	b.n	8003fbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f76:	f7fe fb45 	bl	8002604 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d914      	bls.n	8003fae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1dc      	bne.n	8003f76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d14b      	bne.n	8004078 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fc00 	bl	8002804 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d032      	beq.n	8004070 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d12b      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11f      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	65da      	str	r2, [r3, #92]	; 0x5c
 800403c:	e018      	b.n	8004070 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff fa4b 	bl	800350c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004076:	e00e      	b.n	8004096 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff fa5f 	bl	8003548 <HAL_ADC_ErrorCallback>
}
 800408a:	e004      	b.n	8004096 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff fa37 	bl	8003520 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff fa31 	bl	8003548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <LL_ADC_IsEnabled>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <LL_ADC_IsEnabled+0x18>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <LL_ADC_IsEnabled+0x1a>
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_StartCalibration>:
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004126:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004130:	4313      	orrs	r3, r2
 8004132:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_ADC_IsCalibrationOnGoing>:
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415a:	d101      	bne.n	8004160 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_ADC_REG_IsConversionOngoing>:
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d101      	bne.n	8004186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e04d      	b.n	800424c <HAL_ADCEx_Calibration_Start+0xb8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fea5 	bl	8003f08 <ADC_Disable>
 80041be:	4603      	mov	r3, r0
 80041c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d136      	bne.n	8004236 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	f043 0202 	orr.w	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6839      	ldr	r1, [r7, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff96 	bl	8004114 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041e8:	e014      	b.n	8004214 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_ADCEx_Calibration_Start+0xc0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d90d      	bls.n	8004214 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f023 0312 	bic.w	r3, r3, #18
 8004200:	f043 0210 	orr.w	r2, r3, #16
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e01b      	b.n	800424c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff94 	bl	8004146 <LL_ADC_IsCalibrationOnGoing>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e2      	bne.n	80041ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	f023 0303 	bic.w	r3, r3, #3
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	; 0x5c
 8004234:	e005      	b.n	8004242 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0004de01 	.word	0x0004de01

08004258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b0a1      	sub	sp, #132	; 0x84
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0e7      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80042e2:	2300      	movs	r3, #0
 80042e4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80042e6:	2300      	movs	r3, #0
 80042e8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f2:	d102      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	e009      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6e      	ldr	r2, [pc, #440]	; (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d102      	bne.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004304:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	e001      	b.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0be      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff1d 	bl	800416e <LL_ADC_REG_IsConversionOngoing>
 8004334:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff17 	bl	800416e <LL_ADC_REG_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 80a0 	bne.w	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 809c 	bne.w	8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004358:	d004      	beq.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004364:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004366:	e000      	b.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800436a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04b      	beq.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004386:	035b      	lsls	r3, r3, #13
 8004388:	430b      	orrs	r3, r1
 800438a:	431a      	orrs	r2, r3
 800438c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800438e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a45      	ldr	r2, [pc, #276]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10f      	bne.n	80043c4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80043a8:	f7ff fea1 	bl	80040ee <LL_ADC_IsEnabled>
 80043ac:	4604      	mov	r4, r0
 80043ae:	4841      	ldr	r0, [pc, #260]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043b0:	f7ff fe9d 	bl	80040ee <LL_ADC_IsEnabled>
 80043b4:	4603      	mov	r3, r0
 80043b6:	4323      	orrs	r3, r4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e012      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043c4:	483c      	ldr	r0, [pc, #240]	; (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043c6:	f7ff fe92 	bl	80040ee <LL_ADC_IsEnabled>
 80043ca:	4604      	mov	r4, r0
 80043cc:	483b      	ldr	r0, [pc, #236]	; (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043ce:	f7ff fe8e 	bl	80040ee <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	431c      	orrs	r4, r3
 80043d6:	483c      	ldr	r0, [pc, #240]	; (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043d8:	f7ff fe89 	bl	80040ee <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	4323      	orrs	r3, r4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d056      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043f6:	f023 030f 	bic.w	r3, r3, #15
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	6811      	ldr	r1, [r2, #0]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	6892      	ldr	r2, [r2, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800440a:	e047      	b.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800440c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004420:	d004      	beq.n	800442c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10f      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800442c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004430:	f7ff fe5d 	bl	80040ee <LL_ADC_IsEnabled>
 8004434:	4604      	mov	r4, r0
 8004436:	481f      	ldr	r0, [pc, #124]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004438:	f7ff fe59 	bl	80040ee <LL_ADC_IsEnabled>
 800443c:	4603      	mov	r3, r0
 800443e:	4323      	orrs	r3, r4
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e012      	b.n	8004472 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800444c:	481a      	ldr	r0, [pc, #104]	; (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800444e:	f7ff fe4e 	bl	80040ee <LL_ADC_IsEnabled>
 8004452:	4604      	mov	r4, r0
 8004454:	4819      	ldr	r0, [pc, #100]	; (80044bc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004456:	f7ff fe4a 	bl	80040ee <LL_ADC_IsEnabled>
 800445a:	4603      	mov	r3, r0
 800445c:	431c      	orrs	r4, r3
 800445e:	481a      	ldr	r0, [pc, #104]	; (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004460:	f7ff fe45 	bl	80040ee <LL_ADC_IsEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	4323      	orrs	r3, r4
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d012      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004484:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004486:	e009      	b.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800449a:	e000      	b.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800449c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3784      	adds	r7, #132	; 0x84
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	50000100 	.word	0x50000100
 80044b8:	50000400 	.word	0x50000400
 80044bc:	50000500 	.word	0x50000500
 80044c0:	50000300 	.word	0x50000300
 80044c4:	50000700 	.word	0x50000700
 80044c8:	50000600 	.word	0x50000600

080044cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <__NVIC_SetPriorityGrouping+0x44>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e8:	4013      	ands	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fe:	4a04      	ldr	r2, [pc, #16]	; (8004510 <__NVIC_SetPriorityGrouping+0x44>)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	60d3      	str	r3, [r2, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <__NVIC_GetPriorityGrouping+0x18>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	f003 0307 	and.w	r3, r3, #7
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	2b00      	cmp	r3, #0
 8004540:	db0b      	blt.n	800455a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4907      	ldr	r1, [pc, #28]	; (8004568 <__NVIC_EnableIRQ+0x38>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2001      	movs	r0, #1
 8004552:	fa00 f202 	lsl.w	r2, r0, r2
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100

0800456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	; (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	; (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf28      	it	cs
 80045de:	2304      	movcs	r3, #4
 80045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d902      	bls.n	80045f0 <NVIC_EncodePriority+0x30>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3b03      	subs	r3, #3
 80045ee:	e000      	b.n	80045f2 <NVIC_EncodePriority+0x32>
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004608:	f04f 31ff 	mov.w	r1, #4294967295
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	43d9      	mvns	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	4313      	orrs	r3, r2
         );
}
 800461a:	4618      	mov	r0, r3
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004638:	d301      	bcc.n	800463e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <SysTick_Config+0x40>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004646:	210f      	movs	r1, #15
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	f7ff ff8e 	bl	800456c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <SysTick_Config+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SysTick_Config+0x40>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000e010 	.word	0xe000e010

0800466c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff29 	bl	80044cc <__NVIC_SetPriorityGrouping>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004690:	f7ff ff40 	bl	8004514 <__NVIC_GetPriorityGrouping>
 8004694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff90 	bl	80045c0 <NVIC_EncodePriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff5f 	bl	800456c <__NVIC_SetPriority>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff33 	bl	8004530 <__NVIC_EnableIRQ>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ffa4 	bl	8004628 <SysTick_Config>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e08d      	b.n	800481a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	4b47      	ldr	r3, [pc, #284]	; (8004824 <HAL_DMA_Init+0x138>)
 8004706:	429a      	cmp	r2, r3
 8004708:	d80f      	bhi.n	800472a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	4b45      	ldr	r3, [pc, #276]	; (8004828 <HAL_DMA_Init+0x13c>)
 8004712:	4413      	add	r3, r2
 8004714:	4a45      	ldr	r2, [pc, #276]	; (800482c <HAL_DMA_Init+0x140>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a42      	ldr	r2, [pc, #264]	; (8004830 <HAL_DMA_Init+0x144>)
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
 8004728:	e00e      	b.n	8004748 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	4b40      	ldr	r3, [pc, #256]	; (8004834 <HAL_DMA_Init+0x148>)
 8004732:	4413      	add	r3, r2
 8004734:	4a3d      	ldr	r2, [pc, #244]	; (800482c <HAL_DMA_Init+0x140>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	009a      	lsls	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <HAL_DMA_Init+0x14c>)
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800476c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa76 	bl	8004c8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a8:	d102      	bne.n	80047b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d010      	beq.n	80047f0 <HAL_DMA_Init+0x104>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d80c      	bhi.n	80047f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa96 	bl	8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	e008      	b.n	8004802 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40020407 	.word	0x40020407
 8004828:	bffdfff8 	.word	0xbffdfff8
 800482c:	cccccccd 	.word	0xcccccccd
 8004830:	40020000 	.word	0x40020000
 8004834:	bffdfbf8 	.word	0xbffdfbf8
 8004838:	40020400 	.word	0x40020400

0800483c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_DMA_Start_IT+0x20>
 8004858:	2302      	movs	r3, #2
 800485a:	e066      	b.n	800492a <HAL_DMA_Start_IT+0xee>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d155      	bne.n	800491c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f9bb 	bl	8004c10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 020e 	orr.w	r2, r2, #14
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e00f      	b.n	80048d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0204 	bic.w	r2, r2, #4
 80048c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 020a 	orr.w	r2, r2, #10
 80048d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004908:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e005      	b.n	8004928 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d005      	beq.n	8004956 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	e037      	b.n	80049c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 020e 	bic.w	r2, r2, #14
 8004964:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004974:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	f003 021f 	and.w	r2, r3, #31
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f202 	lsl.w	r2, r1, r2
 8004998:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d00d      	beq.n	8004a18 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2204      	movs	r2, #4
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
 8004a16:	e047      	b.n	8004aa8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 020e 	bic.w	r2, r2, #14
 8004a26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
    }
  }
  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d026      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x7a>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d021      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0204 	bic.w	r2, r2, #4
 8004b04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f003 021f 	and.w	r2, r3, #31
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2104      	movs	r1, #4
 8004b14:	fa01 f202 	lsl.w	r2, r1, r2
 8004b18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d071      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b2a:	e06c      	b.n	8004c06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	2202      	movs	r2, #2
 8004b36:	409a      	lsls	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02e      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d029      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 020a 	bic.w	r2, r2, #10
 8004b66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d038      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b9c:	e033      	b.n	8004c06 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02a      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d025      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 020e 	bic.w	r2, r2, #14
 8004bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	2101      	movs	r1, #1
 8004bda:	fa01 f202 	lsl.w	r2, r1, r2
 8004bde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
}
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	f003 021f 	and.w	r2, r3, #31
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2101      	movs	r1, #1
 8004c48:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d108      	bne.n	8004c70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c6e:	e007      	b.n	8004c80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b16      	ldr	r3, [pc, #88]	; (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d802      	bhi.n	8004ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ca0:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e001      	b.n	8004caa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ca8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3b08      	subs	r3, #8
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	089b      	lsrs	r3, r3, #2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2201      	movs	r2, #1
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40020407 	.word	0x40020407
 8004cf8:	40020800 	.word	0x40020800
 8004cfc:	40020820 	.word	0x40020820
 8004d00:	cccccccd 	.word	0xcccccccd
 8004d04:	40020880 	.word	0x40020880

08004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	461a      	mov	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	1000823f 	.word	0x1000823f
 8004d4c:	40020940 	.word	0x40020940

08004d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d5e:	e15a      	b.n	8005016 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 814c 	beq.w	8005010 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d005      	beq.n	8004d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d130      	bne.n	8004df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4013      	ands	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0201 	and.w	r2, r3, #1
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d017      	beq.n	8004e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d123      	bne.n	8004e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	08da      	lsrs	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3208      	adds	r2, #8
 8004e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	220f      	movs	r2, #15
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	08da      	lsrs	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3208      	adds	r2, #8
 8004e7c:	6939      	ldr	r1, [r7, #16]
 8004e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4013      	ands	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0203 	and.w	r2, r3, #3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80a6 	beq.w	8005010 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec4:	4b5b      	ldr	r3, [pc, #364]	; (8005034 <HAL_GPIO_Init+0x2e4>)
 8004ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec8:	4a5a      	ldr	r2, [pc, #360]	; (8005034 <HAL_GPIO_Init+0x2e4>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6613      	str	r3, [r2, #96]	; 0x60
 8004ed0:	4b58      	ldr	r3, [pc, #352]	; (8005034 <HAL_GPIO_Init+0x2e4>)
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004edc:	4a56      	ldr	r2, [pc, #344]	; (8005038 <HAL_GPIO_Init+0x2e8>)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f06:	d01f      	beq.n	8004f48 <HAL_GPIO_Init+0x1f8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a4c      	ldr	r2, [pc, #304]	; (800503c <HAL_GPIO_Init+0x2ec>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d019      	beq.n	8004f44 <HAL_GPIO_Init+0x1f4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a4b      	ldr	r2, [pc, #300]	; (8005040 <HAL_GPIO_Init+0x2f0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <HAL_GPIO_Init+0x1f0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a4a      	ldr	r2, [pc, #296]	; (8005044 <HAL_GPIO_Init+0x2f4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00d      	beq.n	8004f3c <HAL_GPIO_Init+0x1ec>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a49      	ldr	r2, [pc, #292]	; (8005048 <HAL_GPIO_Init+0x2f8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <HAL_GPIO_Init+0x1e8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a48      	ldr	r2, [pc, #288]	; (800504c <HAL_GPIO_Init+0x2fc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_GPIO_Init+0x1e4>
 8004f30:	2305      	movs	r3, #5
 8004f32:	e00a      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f34:	2306      	movs	r3, #6
 8004f36:	e008      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e006      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e004      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e002      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_GPIO_Init+0x1fa>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	f002 0203 	and.w	r2, r2, #3
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	4093      	lsls	r3, r2
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f5a:	4937      	ldr	r1, [pc, #220]	; (8005038 <HAL_GPIO_Init+0x2e8>)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f8c:	4a30      	ldr	r2, [pc, #192]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f92:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fb6:	4a26      	ldr	r2, [pc, #152]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004fbc:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_GPIO_Init+0x300>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800500a:	4a11      	ldr	r2, [pc, #68]	; (8005050 <HAL_GPIO_Init+0x300>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3301      	adds	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f ae9d 	bne.w	8004d60 <HAL_GPIO_Init+0x10>
  }
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40021000 	.word	0x40021000
 8005038:	40010000 	.word	0x40010000
 800503c:	48000400 	.word	0x48000400
 8005040:	48000800 	.word	0x48000800
 8005044:	48000c00 	.word	0x48000c00
 8005048:	48001000 	.word	0x48001000
 800504c:	48001400 	.word	0x48001400
 8005050:	40010400 	.word	0x40010400

08005054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
 8005060:	4613      	mov	r3, r2
 8005062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005070:	e002      	b.n	8005078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4013      	ands	r3, r2
 800509c:	041a      	lsls	r2, r3, #16
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	43d9      	mvns	r1, r3
 80050a2:	887b      	ldrh	r3, [r7, #2]
 80050a4:	400b      	ands	r3, r1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d006      	beq.n	80050dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc fa78 	bl	80015cc <HAL_GPIO_EXTI_Callback>
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40010400 	.word	0x40010400

080050e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d141      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050f6:	4b4b      	ldr	r3, [pc, #300]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005102:	d131      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b47      	ldr	r3, [pc, #284]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510a:	4a46      	ldr	r2, [pc, #280]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800511c:	4a41      	ldr	r2, [pc, #260]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005124:	4b40      	ldr	r3, [pc, #256]	; (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2232      	movs	r2, #50	; 0x32
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	4a3f      	ldr	r2, [pc, #252]	; (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800513a:	e002      	b.n	8005142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005142:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	d102      	bne.n	8005156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f2      	bne.n	800513c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005156:	4b33      	ldr	r3, [pc, #204]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005162:	d158      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e057      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005168:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516e:	4a2d      	ldr	r2, [pc, #180]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005178:	e04d      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d141      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005182:	4b28      	ldr	r3, [pc, #160]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	d131      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005196:	4a23      	ldr	r2, [pc, #140]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a0:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051a8:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2232      	movs	r2, #50	; 0x32
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c6:	e002      	b.n	80051ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d102      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d112      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005204:	e007      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40007000 	.word	0x40007000
 8005228:	20000004 	.word	0x20000004
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a04      	ldr	r2, [pc, #16]	; (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800523a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40007000 	.word	0x40007000

08005250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e2fe      	b.n	8005860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b97      	ldr	r3, [pc, #604]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b94      	ldr	r3, [pc, #592]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d102      	bne.n	800528e <HAL_RCC_OscConfig+0x3e>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d002      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e2d9      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a84      	ldr	r2, [pc, #528]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b7f      	ldr	r3, [pc, #508]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7e      	ldr	r2, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7b      	ldr	r2, [pc, #492]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b78      	ldr	r3, [pc, #480]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a77      	ldr	r2, [pc, #476]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b75      	ldr	r3, [pc, #468]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd f97c 	bl	8002604 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fd f978 	bl	8002604 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e29e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	4b6a      	ldr	r3, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fd f968 	bl	8002604 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7fd f964 	bl	8002604 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e28a      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	4b60      	ldr	r3, [pc, #384]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d075      	beq.n	8005452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005370:	4b56      	ldr	r3, [pc, #344]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d102      	bne.n	8005386 <HAL_RCC_OscConfig+0x136>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d002      	beq.n	800538c <HAL_RCC_OscConfig+0x13c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11f      	bne.n	80053cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	4b4f      	ldr	r3, [pc, #316]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x154>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e25d      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4946      	ldr	r1, [pc, #280]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053b8:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <HAL_RCC_OscConfig+0x280>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd f8d5 	bl	800256c <HAL_InitTick>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d043      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e249      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d023      	beq.n	800541c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fd f910 	bl	8002604 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fd f90c 	bl	8002604 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e232      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fa:	4b34      	ldr	r3, [pc, #208]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b31      	ldr	r3, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	492d      	ldr	r1, [pc, #180]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e01a      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fd f8ec 	bl	8002604 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fd f8e8 	bl	8002604 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e20e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1e0>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d041      	beq.n	80054e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546c:	4a17      	ldr	r2, [pc, #92]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fd f8c5 	bl	8002604 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fd f8c1 	bl	8002604 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1e7      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005490:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <HAL_RCC_OscConfig+0x22e>
 800549e:	e020      	b.n	80054e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fd f8a8 	bl	8002604 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b6:	e00d      	b.n	80054d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fd f8a4 	bl	8002604 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d906      	bls.n	80054d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1ca      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054d4:	4b8c      	ldr	r3, [pc, #560]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ea      	bne.n	80054b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a6 	beq.w	800563c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054f4:	4b84      	ldr	r3, [pc, #528]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_OscConfig+0x2b4>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x2b6>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b7f      	ldr	r3, [pc, #508]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	4a7e      	ldr	r2, [pc, #504]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	; 0x58
 8005516:	4b7c      	ldr	r3, [pc, #496]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005526:	4b79      	ldr	r3, [pc, #484]	; (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b76      	ldr	r3, [pc, #472]	; (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a75      	ldr	r2, [pc, #468]	; (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fd f861 	bl	8002604 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fd f85d 	bl	8002604 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e183      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005558:	4b6c      	ldr	r3, [pc, #432]	; (800570c <HAL_RCC_OscConfig+0x4bc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d108      	bne.n	800557e <HAL_RCC_OscConfig+0x32e>
 800556c:	4b66      	ldr	r3, [pc, #408]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	4a65      	ldr	r2, [pc, #404]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800557c:	e024      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d110      	bne.n	80055a8 <HAL_RCC_OscConfig+0x358>
 8005586:	4b60      	ldr	r3, [pc, #384]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	4a5e      	ldr	r2, [pc, #376]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005596:	4b5c      	ldr	r3, [pc, #368]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	4a5a      	ldr	r2, [pc, #360]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055a6:	e00f      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 80055a8:	4b57      	ldr	r3, [pc, #348]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	4a56      	ldr	r2, [pc, #344]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055b8:	4b53      	ldr	r3, [pc, #332]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	4a52      	ldr	r2, [pc, #328]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fd f818 	bl	8002604 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fd f814 	bl	8002604 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e138      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	4b46      	ldr	r3, [pc, #280]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ed      	beq.n	80055d8 <HAL_RCC_OscConfig+0x388>
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fd f801 	bl	8002604 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005604:	e00a      	b.n	800561c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fc fffd 	bl	8002604 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	; 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e121      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ed      	bne.n	8005606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a34      	ldr	r2, [pc, #208]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d03c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01c      	beq.n	800568a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005656:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fc ffd0 	bl	8002604 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005668:	f7fc ffcc 	bl	8002604 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0f2      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <HAL_RCC_OscConfig+0x418>
 8005688:	e01b      	b.n	80056c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800568a:	4b1f      	ldr	r3, [pc, #124]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005690:	4a1d      	ldr	r2, [pc, #116]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fc ffb3 	bl	8002604 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a2:	f7fc ffaf 	bl	8002604 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0d5      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b4:	4b14      	ldr	r3, [pc, #80]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80c9 	beq.w	800585e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056cc:	4b0e      	ldr	r3, [pc, #56]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d15e      	bne.n	80057a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fc ff89 	bl	8002604 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	e00c      	b.n	8005710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f6:	f7fc ff85 	bl	8002604 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d905      	bls.n	8005710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0ab      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	4b55      	ldr	r3, [pc, #340]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ec      	bne.n	80056f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571c:	4b52      	ldr	r3, [pc, #328]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	4b52      	ldr	r3, [pc, #328]	; (800586c <HAL_RCC_OscConfig+0x61c>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6a11      	ldr	r1, [r2, #32]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800572c:	3a01      	subs	r2, #1
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	4311      	orrs	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4311      	orrs	r1, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	3a01      	subs	r2, #1
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800574a:	0852      	lsrs	r2, r2, #1
 800574c:	3a01      	subs	r2, #1
 800574e:	0652      	lsls	r2, r2, #25
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005756:	06d2      	lsls	r2, r2, #27
 8005758:	430a      	orrs	r2, r1
 800575a:	4943      	ldr	r1, [pc, #268]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a40      	ldr	r2, [pc, #256]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800576c:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a3d      	ldr	r2, [pc, #244]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc ff44 	bl	8002604 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fc ff40 	bl	8002604 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e066      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x530>
 800579e:	e05e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b31      	ldr	r3, [pc, #196]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fc ff2a 	bl	8002604 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc ff26 	bl	8002604 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e04c      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c6:	4b28      	ldr	r3, [pc, #160]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	4924      	ldr	r1, [pc, #144]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <HAL_RCC_OscConfig+0x620>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
 80057de:	e03e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e039      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <HAL_RCC_OscConfig+0x618>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d12c      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	3b01      	subs	r3, #1
 800580c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d123      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d11b      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d113      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d109      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	019f800c 	.word	0x019f800c
 8005870:	feeefffc 	.word	0xfeeefffc

08005874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e11e      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b91      	ldr	r3, [pc, #580]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d910      	bls.n	80058bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b8e      	ldr	r3, [pc, #568]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 020f 	bic.w	r2, r3, #15
 80058a2:	498c      	ldr	r1, [pc, #560]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b8a      	ldr	r3, [pc, #552]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e106      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d073      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d129      	bne.n	8005924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d0:	4b81      	ldr	r3, [pc, #516]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f4      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058e0:	f000 f99e 	bl	8005c20 <RCC_GetSysClockFreqFromPLLSource>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a7c      	ldr	r2, [pc, #496]	; (8005adc <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d93f      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058ee:	4b7a      	ldr	r3, [pc, #488]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12f      	bne.n	800596e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800590e:	4b72      	ldr	r3, [pc, #456]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005916:	4a70      	ldr	r2, [pc, #448]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e024      	b.n	800596e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0c6      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	4b66      	ldr	r3, [pc, #408]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0be      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800594c:	f000 f8ce 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a61      	ldr	r2, [pc, #388]	; (8005adc <HAL_RCC_ClockConfig+0x268>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d909      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800595a:	4b5f      	ldr	r3, [pc, #380]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005962:	4a5d      	ldr	r2, [pc, #372]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b5a      	ldr	r3, [pc, #360]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4957      	ldr	r1, [pc, #348]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fc fe40 	bl	8002604 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc fe3c 	bl	8002604 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e095      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b4e      	ldr	r3, [pc, #312]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c8:	4b43      	ldr	r3, [pc, #268]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a42      	ldr	r2, [pc, #264]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059e0:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059e8:	4a3b      	ldr	r2, [pc, #236]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4936      	ldr	r1, [pc, #216]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a0a:	4b33      	ldr	r3, [pc, #204]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d21d      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f023 020f 	bic.w	r2, r3, #15
 8005a2c:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a34:	f7fc fde6 	bl	8002604 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fc fde2 	bl	8002604 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03b      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1ed      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4917      	ldr	r1, [pc, #92]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	490f      	ldr	r1, [pc, #60]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a9e:	f000 f825 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490c      	ldr	r1, [pc, #48]	; (8005ae0 <HAL_RCC_ClockConfig+0x26c>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <HAL_RCC_ClockConfig+0x270>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <HAL_RCC_ClockConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc fd52 	bl	800256c <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40022000 	.word	0x40022000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	04c4b400 	.word	0x04c4b400
 8005ae0:	0800a300 	.word	0x0800a300
 8005ae4:	20000004 	.word	0x20000004
 8005ae8:	20000008 	.word	0x20000008

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005af2:	4b2c      	ldr	r3, [pc, #176]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afe:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e047      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b26      	ldr	r3, [pc, #152]	; (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e03e      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d136      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
      break;
 8005b72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0e5b      	lsrs	r3, r3, #25
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e001      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	016e3600 	.word	0x016e3600

08005bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000004 	.word	0x20000004

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bcc:	f7ff fff0 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4904      	ldr	r1, [pc, #16]	; (8005bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	0800a310 	.word	0x0800a310

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bf8:	f7ff ffda 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0adb      	lsrs	r3, r3, #11
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800a310 	.word	0x0800a310

08005c20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c26:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c30:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d10c      	bne.n	8005c5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	0a12      	lsrs	r2, r2, #8
 8005c52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	617b      	str	r3, [r7, #20]
    break;
 8005c5c:	e00c      	b.n	8005c78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5e:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	0a12      	lsrs	r2, r2, #8
 8005c6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
    break;
 8005c76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c78:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	0e5b      	lsrs	r3, r3, #25
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	3301      	adds	r3, #1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c92:	687b      	ldr	r3, [r7, #4]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	016e3600 	.word	0x016e3600
 8005ca8:	00f42400 	.word	0x00f42400

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8098 	beq.w	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cce:	4b43      	ldr	r3, [pc, #268]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	4a3f      	ldr	r2, [pc, #252]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a39      	ldr	r2, [pc, #228]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fc fc7f 	bl	8002604 <HAL_GetTick>
 8005d06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d08:	e009      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fc fc7b 	bl	8002604 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1e:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d159      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d30:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4c:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d68:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fc fc3b 	bl	8002604 <HAL_GetTick>
 8005d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d90:	e00b      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fc fc37 	bl	8002604 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d902      	bls.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	74fb      	strb	r3, [r7, #19]
            break;
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005daa:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ec      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005dd4:	e008      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	74bb      	strb	r3, [r7, #18]
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005de8:	7c7b      	ldrb	r3, [r7, #17]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4ba7      	ldr	r3, [pc, #668]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	4aa6      	ldr	r2, [pc, #664]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e06:	4ba1      	ldr	r3, [pc, #644]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0c:	f023 0203 	bic.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	499d      	ldr	r1, [pc, #628]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e28:	4b98      	ldr	r3, [pc, #608]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f023 020c 	bic.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4995      	ldr	r1, [pc, #596]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e4a:	4b90      	ldr	r3, [pc, #576]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	498c      	ldr	r1, [pc, #560]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e6c:	4b87      	ldr	r3, [pc, #540]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	4984      	ldr	r1, [pc, #528]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e8e:	4b7f      	ldr	r3, [pc, #508]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	497b      	ldr	r1, [pc, #492]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb0:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	4973      	ldr	r1, [pc, #460]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ed2:	4b6e      	ldr	r3, [pc, #440]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	496a      	ldr	r1, [pc, #424]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef4:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	4962      	ldr	r1, [pc, #392]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f16:	4b5d      	ldr	r3, [pc, #372]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	4959      	ldr	r1, [pc, #356]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f38:	4b54      	ldr	r3, [pc, #336]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	4951      	ldr	r1, [pc, #324]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5a:	4b4c      	ldr	r3, [pc, #304]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	4948      	ldr	r1, [pc, #288]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d015      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	4940      	ldr	r1, [pc, #256]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f9c:	4b3b      	ldr	r3, [pc, #236]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a3a      	ldr	r2, [pc, #232]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fb4:	4b35      	ldr	r3, [pc, #212]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	4932      	ldr	r1, [pc, #200]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd4:	4b2d      	ldr	r3, [pc, #180]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fec:	4b27      	ldr	r3, [pc, #156]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	4924      	ldr	r1, [pc, #144]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800600a:	d105      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800600c:	4b1f      	ldr	r3, [pc, #124]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a1e      	ldr	r2, [pc, #120]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006016:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006024:	4b19      	ldr	r3, [pc, #100]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	4916      	ldr	r1, [pc, #88]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a10      	ldr	r2, [pc, #64]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800604e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4908      	ldr	r1, [pc, #32]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a02      	ldr	r2, [pc, #8]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006086:	60d3      	str	r3, [r2, #12]
 8006088:	e002      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800609c:	4b29      	ldr	r3, [pc, #164]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	4926      	ldr	r1, [pc, #152]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ba:	d105      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060bc:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a20      	ldr	r2, [pc, #128]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060d4:	4b1b      	ldr	r3, [pc, #108]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e2:	4918      	ldr	r1, [pc, #96]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d105      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060f4:	4b13      	ldr	r3, [pc, #76]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4a12      	ldr	r2, [pc, #72]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611a:	490a      	ldr	r1, [pc, #40]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800612a:	d105      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4a04      	ldr	r2, [pc, #16]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006136:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006138:	7cbb      	ldrb	r3, [r7, #18]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000

08006148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e049      	b.n	80061ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc f874 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f000 ff68 	bl	800705c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d001      	beq.n	8006210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e04c      	b.n	80062aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_TIM_Base_Start+0xc0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d022      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d01d      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a22      	ldr	r2, [pc, #136]	; (80062bc <HAL_TIM_Base_Start+0xc4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <HAL_TIM_Base_Start+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <HAL_TIM_Base_Start+0xcc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1e      	ldr	r2, [pc, #120]	; (80062c8 <HAL_TIM_Base_Start+0xd0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <HAL_TIM_Base_Start+0xd4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <HAL_TIM_Base_Start+0xd8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d115      	bne.n	8006294 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <HAL_TIM_Base_Start+0xdc>)
 8006270:	4013      	ands	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d015      	beq.n	80062a6 <HAL_TIM_Base_Start+0xae>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d011      	beq.n	80062a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	e008      	b.n	80062a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40013400 	.word	0x40013400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40015000 	.word	0x40015000
 80062d4:	00010007 	.word	0x00010007

080062d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d001      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e054      	b.n	800639a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a26      	ldr	r2, [pc, #152]	; (80063a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d022      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d01d      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d018      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00e      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d009      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_TIM_Base_Start_IT+0xe4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d004      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0x80>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d115      	bne.n	8006384 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_TIM_Base_Start_IT+0xec>)
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b06      	cmp	r3, #6
 8006368:	d015      	beq.n	8006396 <HAL_TIM_Base_Start_IT+0xbe>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006370:	d011      	beq.n	8006396 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	e008      	b.n	8006396 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e000      	b.n	8006398 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40015000 	.word	0x40015000
 80063c4:	00010007 	.word	0x00010007

080063c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e049      	b.n	800646e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f841 	bl	8006476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f000 fe28 	bl	800705c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <HAL_TIM_PWM_Start+0x24>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	bf14      	ite	ne
 80064a8:	2301      	movne	r3, #1
 80064aa:	2300      	moveq	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	e03c      	b.n	800652a <HAL_TIM_PWM_Start+0x9e>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d109      	bne.n	80064ca <HAL_TIM_PWM_Start+0x3e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	bf14      	ite	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2300      	moveq	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	e02f      	b.n	800652a <HAL_TIM_PWM_Start+0x9e>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d109      	bne.n	80064e4 <HAL_TIM_PWM_Start+0x58>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e022      	b.n	800652a <HAL_TIM_PWM_Start+0x9e>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	d109      	bne.n	80064fe <HAL_TIM_PWM_Start+0x72>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	bf14      	ite	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	2300      	moveq	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	e015      	b.n	800652a <HAL_TIM_PWM_Start+0x9e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b10      	cmp	r3, #16
 8006502:	d109      	bne.n	8006518 <HAL_TIM_PWM_Start+0x8c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	bf14      	ite	ne
 8006510:	2301      	movne	r3, #1
 8006512:	2300      	moveq	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	e008      	b.n	800652a <HAL_TIM_PWM_Start+0x9e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0a6      	b.n	8006680 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <HAL_TIM_PWM_Start+0xb6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006540:	e023      	b.n	800658a <HAL_TIM_PWM_Start+0xfe>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d104      	bne.n	8006552 <HAL_TIM_PWM_Start+0xc6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006550:	e01b      	b.n	800658a <HAL_TIM_PWM_Start+0xfe>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d104      	bne.n	8006562 <HAL_TIM_PWM_Start+0xd6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006560:	e013      	b.n	800658a <HAL_TIM_PWM_Start+0xfe>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xe6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006570:	e00b      	b.n	800658a <HAL_TIM_PWM_Start+0xfe>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b10      	cmp	r3, #16
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xf6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	e003      	b.n	800658a <HAL_TIM_PWM_Start+0xfe>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2201      	movs	r2, #1
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f9dc 	bl	8007950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3a      	ldr	r2, [pc, #232]	; (8006688 <HAL_TIM_PWM_Start+0x1fc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d018      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x148>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a39      	ldr	r2, [pc, #228]	; (800668c <HAL_TIM_PWM_Start+0x200>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x148>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a37      	ldr	r2, [pc, #220]	; (8006690 <HAL_TIM_PWM_Start+0x204>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00e      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x148>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a36      	ldr	r2, [pc, #216]	; (8006694 <HAL_TIM_PWM_Start+0x208>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d009      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x148>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a34      	ldr	r2, [pc, #208]	; (8006698 <HAL_TIM_PWM_Start+0x20c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x148>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a33      	ldr	r2, [pc, #204]	; (800669c <HAL_TIM_PWM_Start+0x210>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x14c>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_TIM_PWM_Start+0x14e>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a25      	ldr	r2, [pc, #148]	; (8006688 <HAL_TIM_PWM_Start+0x1fc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d01d      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a26      	ldr	r2, [pc, #152]	; (80066a0 <HAL_TIM_PWM_Start+0x214>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <HAL_TIM_PWM_Start+0x218>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <HAL_TIM_PWM_Start+0x21c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a19      	ldr	r2, [pc, #100]	; (800668c <HAL_TIM_PWM_Start+0x200>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_TIM_PWM_Start+0x204>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_TIM_PWM_Start+0x1b2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <HAL_TIM_PWM_Start+0x210>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d115      	bne.n	800666a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_TIM_PWM_Start+0x220>)
 8006646:	4013      	ands	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d015      	beq.n	800667c <HAL_TIM_PWM_Start+0x1f0>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d011      	beq.n	800667c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006668:	e008      	b.n	800667c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e000      	b.n	800667e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40015000 	.word	0x40015000
 80066a0:	40000400 	.word	0x40000400
 80066a4:	40000800 	.word	0x40000800
 80066a8:	40000c00 	.word	0x40000c00
 80066ac:	00010007 	.word	0x00010007

080066b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e097      	b.n	80067f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fb fe0b 	bl	80022f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066f4:	f023 0307 	bic.w	r3, r3, #7
 80066f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f000 fca9 	bl	800705c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	4313      	orrs	r3, r2
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006750:	f023 030c 	bic.w	r3, r3, #12
 8006754:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800675c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	4313      	orrs	r3, r2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	011a      	lsls	r2, r3, #4
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	031b      	lsls	r3, r3, #12
 8006780:	4313      	orrs	r3, r2
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4313      	orrs	r3, r2
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006814:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800681c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006824:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d110      	bne.n	800684e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d102      	bne.n	8006838 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006832:	7b7b      	ldrb	r3, [r7, #13]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d001      	beq.n	800683c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e069      	b.n	8006910 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684c:	e031      	b.n	80068b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d110      	bne.n	8006876 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d102      	bne.n	8006860 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800685a:	7b3b      	ldrb	r3, [r7, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d001      	beq.n	8006864 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e055      	b.n	8006910 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006874:	e01d      	b.n	80068b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d108      	bne.n	800688e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006882:	7b7b      	ldrb	r3, [r7, #13]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d102      	bne.n	800688e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006888:	7b3b      	ldrb	r3, [r7, #12]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e03e      	b.n	8006910 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <HAL_TIM_Encoder_Start+0xc4>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d008      	beq.n	80068d0 <HAL_TIM_Encoder_Start+0xd4>
 80068be:	e00f      	b.n	80068e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f841 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 80068ce:	e016      	b.n	80068fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2201      	movs	r2, #1
 80068d6:	2104      	movs	r1, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f839 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 80068de:	e00e      	b.n	80068fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2201      	movs	r2, #1
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f831 	bl	8007950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	2104      	movs	r1, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f82a 	bl	8007950 <TIM_CCxChannelCmd>
      break;
 80068fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d020      	beq.n	800697c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01b      	beq.n	800697c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0202 	mvn.w	r2, #2
 800694c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb5c 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb4e 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb5f 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d020      	beq.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0204 	mvn.w	r2, #4
 8006998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb36 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb28 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb39 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d020      	beq.n	8006a14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0208 	mvn.w	r2, #8
 80069e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fb10 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fb02 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fb13 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d020      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01b      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0210 	mvn.w	r2, #16
 8006a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2208      	movs	r2, #8
 8006a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 faea 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fadc 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 faed 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0201 	mvn.w	r2, #1
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fb f8de 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00c      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f8a9 	bl	8007c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f8a1 	bl	8007c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 faa7 	bl	8007048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0220 	mvn.w	r2, #32
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f869 	bl	8007bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f875 	bl	8007c2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f86d 	bl	8007c40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f865 	bl	8007c54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 f85d 	bl	8007c68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e0ff      	b.n	8006dd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b14      	cmp	r3, #20
 8006be2:	f200 80f0 	bhi.w	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006dc7 	.word	0x08006dc7
 8006bf4:	08006dc7 	.word	0x08006dc7
 8006bf8:	08006dc7 	.word	0x08006dc7
 8006bfc:	08006c81 	.word	0x08006c81
 8006c00:	08006dc7 	.word	0x08006dc7
 8006c04:	08006dc7 	.word	0x08006dc7
 8006c08:	08006dc7 	.word	0x08006dc7
 8006c0c:	08006cc3 	.word	0x08006cc3
 8006c10:	08006dc7 	.word	0x08006dc7
 8006c14:	08006dc7 	.word	0x08006dc7
 8006c18:	08006dc7 	.word	0x08006dc7
 8006c1c:	08006d03 	.word	0x08006d03
 8006c20:	08006dc7 	.word	0x08006dc7
 8006c24:	08006dc7 	.word	0x08006dc7
 8006c28:	08006dc7 	.word	0x08006dc7
 8006c2c:	08006d45 	.word	0x08006d45
 8006c30:	08006dc7 	.word	0x08006dc7
 8006c34:	08006dc7 	.word	0x08006dc7
 8006c38:	08006dc7 	.word	0x08006dc7
 8006c3c:	08006d85 	.word	0x08006d85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fabc 	bl	80071c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0208 	orr.w	r2, r2, #8
 8006c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0204 	bic.w	r2, r2, #4
 8006c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6999      	ldr	r1, [r3, #24]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	619a      	str	r2, [r3, #24]
      break;
 8006c7e:	e0a5      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb36 	bl	80072f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6999      	ldr	r1, [r3, #24]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	021a      	lsls	r2, r3, #8
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	619a      	str	r2, [r3, #24]
      break;
 8006cc0:	e084      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fba9 	bl	8007420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0208 	orr.w	r2, r2, #8
 8006cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0204 	bic.w	r2, r2, #4
 8006cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69d9      	ldr	r1, [r3, #28]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	61da      	str	r2, [r3, #28]
      break;
 8006d00:	e064      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fc1b 	bl	8007544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69d9      	ldr	r1, [r3, #28]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	021a      	lsls	r2, r3, #8
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	61da      	str	r2, [r3, #28]
      break;
 8006d42:	e043      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fc8e 	bl	800766c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0204 	bic.w	r2, r2, #4
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d82:	e023      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fcd8 	bl	8007740 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	021a      	lsls	r2, r3, #8
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006dc4:	e002      	b.n	8006dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop

08006de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIM_ConfigClockSource+0x1c>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e0f6      	b.n	8006fea <HAL_TIM_ConfigClockSource+0x20a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a6f      	ldr	r2, [pc, #444]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	f000 80c1 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e3c:	4a6d      	ldr	r2, [pc, #436]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	f200 80c6 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	4a6c      	ldr	r2, [pc, #432]	; (8006ff8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 80b9 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e4c:	4a6a      	ldr	r2, [pc, #424]	; (8006ff8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f200 80be 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	4a69      	ldr	r2, [pc, #420]	; (8006ffc <HAL_TIM_ConfigClockSource+0x21c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f000 80b1 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e5c:	4a67      	ldr	r2, [pc, #412]	; (8006ffc <HAL_TIM_ConfigClockSource+0x21c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f200 80b6 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e64:	4a66      	ldr	r2, [pc, #408]	; (8007000 <HAL_TIM_ConfigClockSource+0x220>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f000 80a9 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e6c:	4a64      	ldr	r2, [pc, #400]	; (8007000 <HAL_TIM_ConfigClockSource+0x220>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f200 80ae 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e74:	4a63      	ldr	r2, [pc, #396]	; (8007004 <HAL_TIM_ConfigClockSource+0x224>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 80a1 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e7c:	4a61      	ldr	r2, [pc, #388]	; (8007004 <HAL_TIM_ConfigClockSource+0x224>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f200 80a6 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e84:	4a60      	ldr	r2, [pc, #384]	; (8007008 <HAL_TIM_ConfigClockSource+0x228>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f000 8099 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e8c:	4a5e      	ldr	r2, [pc, #376]	; (8007008 <HAL_TIM_ConfigClockSource+0x228>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f200 809e 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e98:	f000 8091 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006e9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ea0:	f200 8096 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea8:	f000 8089 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb0:	f200 808e 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb8:	d03e      	beq.n	8006f38 <HAL_TIM_ConfigClockSource+0x158>
 8006eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebe:	f200 8087 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec6:	f000 8086 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x1f6>
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d87f      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed0:	2b70      	cmp	r3, #112	; 0x70
 8006ed2:	d01a      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0x12a>
 8006ed4:	2b70      	cmp	r3, #112	; 0x70
 8006ed6:	d87b      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed8:	2b60      	cmp	r3, #96	; 0x60
 8006eda:	d050      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x19e>
 8006edc:	2b60      	cmp	r3, #96	; 0x60
 8006ede:	d877      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee0:	2b50      	cmp	r3, #80	; 0x50
 8006ee2:	d03c      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x17e>
 8006ee4:	2b50      	cmp	r3, #80	; 0x50
 8006ee6:	d873      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d058      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x1be>
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d86f      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d064      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d86b      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d060      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d867      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05c      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d05a      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1de>
 8006f08:	e062      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f1a:	f000 fcf9 	bl	8007910 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
      break;
 8006f36:	e04f      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f48:	f000 fce2 	bl	8007910 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f5a:	609a      	str	r2, [r3, #8]
      break;
 8006f5c:	e03c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f000 fc54 	bl	8007818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2150      	movs	r1, #80	; 0x50
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fcad 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006f7c:	e02c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f000 fc73 	bl	8007876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2160      	movs	r1, #96	; 0x60
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fc9d 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e01c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fc34 	bl	8007818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2140      	movs	r1, #64	; 0x40
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fc8d 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e00c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f000 fc84 	bl	80078d6 <TIM_ITRx_SetConfig>
      break;
 8006fce:	e003      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	00100070 	.word	0x00100070
 8006ff8:	00100060 	.word	0x00100060
 8006ffc:	00100050 	.word	0x00100050
 8007000:	00100040 	.word	0x00100040
 8007004:	00100030 	.word	0x00100030
 8007008:	00100020 	.word	0x00100020

0800700c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a4c      	ldr	r2, [pc, #304]	; (80071a0 <TIM_Base_SetConfig+0x144>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d017      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707a:	d013      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a49      	ldr	r2, [pc, #292]	; (80071a4 <TIM_Base_SetConfig+0x148>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00f      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a48      	ldr	r2, [pc, #288]	; (80071a8 <TIM_Base_SetConfig+0x14c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00b      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a47      	ldr	r2, [pc, #284]	; (80071ac <TIM_Base_SetConfig+0x150>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d007      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a46      	ldr	r2, [pc, #280]	; (80071b0 <TIM_Base_SetConfig+0x154>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d003      	beq.n	80070a4 <TIM_Base_SetConfig+0x48>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a45      	ldr	r2, [pc, #276]	; (80071b4 <TIM_Base_SetConfig+0x158>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d108      	bne.n	80070b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <TIM_Base_SetConfig+0x144>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d023      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c4:	d01f      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a36      	ldr	r2, [pc, #216]	; (80071a4 <TIM_Base_SetConfig+0x148>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01b      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a35      	ldr	r2, [pc, #212]	; (80071a8 <TIM_Base_SetConfig+0x14c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d017      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a34      	ldr	r2, [pc, #208]	; (80071ac <TIM_Base_SetConfig+0x150>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a33      	ldr	r2, [pc, #204]	; (80071b0 <TIM_Base_SetConfig+0x154>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00f      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <TIM_Base_SetConfig+0x15c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00b      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a32      	ldr	r2, [pc, #200]	; (80071bc <TIM_Base_SetConfig+0x160>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a31      	ldr	r2, [pc, #196]	; (80071c0 <TIM_Base_SetConfig+0x164>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_Base_SetConfig+0xaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <TIM_Base_SetConfig+0x158>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <TIM_Base_SetConfig+0x144>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <TIM_Base_SetConfig+0x110>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <TIM_Base_SetConfig+0x154>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00f      	beq.n	800716c <TIM_Base_SetConfig+0x110>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <TIM_Base_SetConfig+0x15c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00b      	beq.n	800716c <TIM_Base_SetConfig+0x110>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a19      	ldr	r2, [pc, #100]	; (80071bc <TIM_Base_SetConfig+0x160>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d007      	beq.n	800716c <TIM_Base_SetConfig+0x110>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <TIM_Base_SetConfig+0x164>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <TIM_Base_SetConfig+0x110>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <TIM_Base_SetConfig+0x158>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d103      	bne.n	8007174 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b01      	cmp	r3, #1
 8007184:	d105      	bne.n	8007192 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	611a      	str	r2, [r3, #16]
  }
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40015000 	.word	0x40015000
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f023 0201 	bic.w	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0303 	bic.w	r3, r3, #3
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 0302 	bic.w	r3, r3, #2
 8007210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a30      	ldr	r2, [pc, #192]	; (80072e0 <TIM_OC1_SetConfig+0x11c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d013      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <TIM_OC1_SetConfig+0x120>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00f      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <TIM_OC1_SetConfig+0x124>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00b      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <TIM_OC1_SetConfig+0x128>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d007      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <TIM_OC1_SetConfig+0x12c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_OC1_SetConfig+0x88>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a2b      	ldr	r2, [pc, #172]	; (80072f4 <TIM_OC1_SetConfig+0x130>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d10c      	bne.n	8007266 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0308 	bic.w	r3, r3, #8
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0304 	bic.w	r3, r3, #4
 8007264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <TIM_OC1_SetConfig+0x11c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <TIM_OC1_SetConfig+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00f      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a1b      	ldr	r2, [pc, #108]	; (80072e8 <TIM_OC1_SetConfig+0x124>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00b      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <TIM_OC1_SetConfig+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d007      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <TIM_OC1_SetConfig+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC1_SetConfig+0xd2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <TIM_OC1_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d111      	bne.n	80072ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800
 80072f4:	40015000 	.word	0x40015000

080072f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f023 0210 	bic.w	r2, r3, #16
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a2c      	ldr	r2, [pc, #176]	; (8007408 <TIM_OC2_SetConfig+0x110>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d007      	beq.n	800736c <TIM_OC2_SetConfig+0x74>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a2b      	ldr	r2, [pc, #172]	; (800740c <TIM_OC2_SetConfig+0x114>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0x74>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <TIM_OC2_SetConfig+0x118>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d10d      	bne.n	8007388 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <TIM_OC2_SetConfig+0x110>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a1e      	ldr	r2, [pc, #120]	; (800740c <TIM_OC2_SetConfig+0x114>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00f      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <TIM_OC2_SetConfig+0x11c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <TIM_OC2_SetConfig+0x120>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a1c      	ldr	r2, [pc, #112]	; (800741c <TIM_OC2_SetConfig+0x124>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC2_SetConfig+0xc0>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a17      	ldr	r2, [pc, #92]	; (8007410 <TIM_OC2_SetConfig+0x118>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d113      	bne.n	80073e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40015000 	.word	0x40015000
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800746c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2b      	ldr	r2, [pc, #172]	; (800752c <TIM_OC3_SetConfig+0x10c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d007      	beq.n	8007492 <TIM_OC3_SetConfig+0x72>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <TIM_OC3_SetConfig+0x110>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x72>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <TIM_OC3_SetConfig+0x114>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1e      	ldr	r2, [pc, #120]	; (800752c <TIM_OC3_SetConfig+0x10c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <TIM_OC3_SetConfig+0x110>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <TIM_OC3_SetConfig+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	; (800753c <TIM_OC3_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <TIM_OC3_SetConfig+0x120>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC3_SetConfig+0xbe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <TIM_OC3_SetConfig+0x114>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d113      	bne.n	8007506 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	621a      	str	r2, [r3, #32]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40013400 	.word	0x40013400
 8007534:	40015000 	.word	0x40015000
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800

08007544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a2c      	ldr	r2, [pc, #176]	; (8007654 <TIM_OC4_SetConfig+0x110>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a2b      	ldr	r2, [pc, #172]	; (8007658 <TIM_OC4_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC4_SetConfig+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2a      	ldr	r2, [pc, #168]	; (800765c <TIM_OC4_SetConfig+0x118>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10d      	bne.n	80075d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <TIM_OC4_SetConfig+0x110>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <TIM_OC4_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <TIM_OC4_SetConfig+0x11c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <TIM_OC4_SetConfig+0x120>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <TIM_OC4_SetConfig+0x124>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC4_SetConfig+0xc0>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a17      	ldr	r2, [pc, #92]	; (800765c <TIM_OC4_SetConfig+0x118>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d113      	bne.n	800762c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007612:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	019b      	lsls	r3, r3, #6
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	019b      	lsls	r3, r3, #6
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40015000 	.word	0x40015000
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <TIM_OC5_SetConfig+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <TIM_OC5_SetConfig+0xc0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00f      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a17      	ldr	r2, [pc, #92]	; (8007730 <TIM_OC5_SetConfig+0xc4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a16      	ldr	r2, [pc, #88]	; (8007734 <TIM_OC5_SetConfig+0xc8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <TIM_OC5_SetConfig+0xcc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC5_SetConfig+0x82>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <TIM_OC5_SetConfig+0xd0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d109      	bne.n	8007702 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40013400 	.word	0x40013400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800
 800773c:	40015000 	.word	0x40015000

08007740 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800776e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a1a      	ldr	r2, [pc, #104]	; (8007800 <TIM_OC6_SetConfig+0xc0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a19      	ldr	r2, [pc, #100]	; (8007804 <TIM_OC6_SetConfig+0xc4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <TIM_OC6_SetConfig+0xc8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <TIM_OC6_SetConfig+0xcc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <TIM_OC6_SetConfig+0xd0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_OC6_SetConfig+0x84>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a15      	ldr	r2, [pc, #84]	; (8007814 <TIM_OC6_SetConfig+0xd4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d109      	bne.n	80077d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	029b      	lsls	r3, r3, #10
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40015000 	.word	0x40015000

08007818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 030a 	bic.w	r3, r3, #10
 8007854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007876:	b480      	push	{r7}
 8007878:	b087      	sub	sp, #28
 800787a:	af00      	add	r7, sp, #0
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f023 0210 	bic.w	r2, r3, #16
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	031b      	lsls	r3, r3, #12
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f043 0307 	orr.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800792a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	431a      	orrs	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2201      	movs	r2, #1
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1a      	ldr	r2, [r3, #32]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e074      	b.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a34      	ldr	r2, [pc, #208]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d009      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a33      	ldr	r2, [pc, #204]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d004      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a31      	ldr	r2, [pc, #196]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d108      	bne.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a34:	d01d      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1f      	ldr	r2, [pc, #124]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d018      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a18      	ldr	r2, [pc, #96]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10c      	bne.n	8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	40015000 	.word	0x40015000
 8007ab8:	40000400 	.word	0x40000400
 8007abc:	40000800 	.word	0x40000800
 8007ac0:	40000c00 	.word	0x40000c00
 8007ac4:	40014000 	.word	0x40014000

08007ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e078      	b.n	8007bd6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d009      	beq.n	8007b8a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d11c      	bne.n	8007bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	051b      	lsls	r3, r3, #20
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40015000 	.word	0x40015000

08007bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e042      	b.n	8007d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fa fa1f 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff48 	bl	8008b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc49 	bl	8008564 <UART_SetConfig>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e01b      	b.n	8007d14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 ffc7 	bl	8008ca0 <UART_CheckIdleState>
 8007d12:	4603      	mov	r3, r0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b091      	sub	sp, #68	; 0x44
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d178      	bne.n	8007e26 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_UART_Transmit_IT+0x24>
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e071      	b.n	8007e28 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2221      	movs	r2, #33	; 0x21
 8007d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d78:	d12a      	bne.n	8007dd0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d82:	d107      	bne.n	8007d94 <HAL_UART_Transmit_IT+0x78>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a29      	ldr	r2, [pc, #164]	; (8007e34 <HAL_UART_Transmit_IT+0x118>)
 8007d90:	679a      	str	r2, [r3, #120]	; 0x78
 8007d92:	e002      	b.n	8007d9a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a28      	ldr	r2, [pc, #160]	; (8007e38 <HAL_UART_Transmit_IT+0x11c>)
 8007d98:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dba:	637a      	str	r2, [r7, #52]	; 0x34
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e5      	bne.n	8007d9a <HAL_UART_Transmit_IT+0x7e>
 8007dce:	e028      	b.n	8007e22 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d107      	bne.n	8007dea <HAL_UART_Transmit_IT+0xce>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d103      	bne.n	8007dea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_UART_Transmit_IT+0x120>)
 8007de6:	679a      	str	r2, [r3, #120]	; 0x78
 8007de8:	e002      	b.n	8007df0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <HAL_UART_Transmit_IT+0x124>)
 8007dee:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	623b      	str	r3, [r7, #32]
 8007e10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	69f9      	ldr	r1, [r7, #28]
 8007e14:	6a3a      	ldr	r2, [r7, #32]
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e6      	bne.n	8007df0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007e26:	2302      	movs	r3, #2
  }
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3744      	adds	r7, #68	; 0x44
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	08009467 	.word	0x08009467
 8007e38:	08009387 	.word	0x08009387
 8007e3c:	080092c5 	.word	0x080092c5
 8007e40:	0800920d 	.word	0x0800920d

08007e44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08a      	sub	sp, #40	; 0x28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d137      	bne.n	8007ecc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_UART_Receive_IT+0x24>
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e030      	b.n	8007ece <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a18      	ldr	r2, [pc, #96]	; (8007ed8 <HAL_UART_Receive_IT+0x94>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d01f      	beq.n	8007ebc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d018      	beq.n	8007ebc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	613b      	str	r3, [r7, #16]
   return(result);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	623b      	str	r3, [r7, #32]
 8007eaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69f9      	ldr	r1, [r7, #28]
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e6      	bne.n	8007e8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f001 f804 	bl	8008ed0 <UART_Start_Receive_IT>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	e000      	b.n	8007ece <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ecc:	2302      	movs	r3, #2
  }
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3728      	adds	r7, #40	; 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40008000 	.word	0x40008000

08007edc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b0ba      	sub	sp, #232	; 0xe8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f06:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11b      	bne.n	8007f50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d015      	beq.n	8007f50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d105      	bne.n	8007f3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 82e3 	beq.w	800850c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	4798      	blx	r3
      }
      return;
 8007f4e:	e2dd      	b.n	800850c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8123 	beq.w	80081a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f5e:	4b8d      	ldr	r3, [pc, #564]	; (8008194 <HAL_UART_IRQHandler+0x2b8>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f6a:	4b8b      	ldr	r3, [pc, #556]	; (8008198 <HAL_UART_IRQHandler+0x2bc>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 8116 	beq.w	80081a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xc8>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2201      	movs	r2, #1
 8007f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9a:	f043 0201 	orr.w	r2, r3, #1
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xf8>
 8007fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f043 0204 	orr.w	r2, r3, #4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d011      	beq.n	8008004 <HAL_UART_IRQHandler+0x128>
 8007fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffa:	f043 0202 	orr.w	r2, r3, #2
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d017      	beq.n	8008040 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800801c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008020:	4b5c      	ldr	r3, [pc, #368]	; (8008194 <HAL_UART_IRQHandler+0x2b8>)
 8008022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2208      	movs	r2, #8
 800802e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f043 0208 	orr.w	r2, r3, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008048:	2b00      	cmp	r3, #0
 800804a:	d012      	beq.n	8008072 <HAL_UART_IRQHandler+0x196>
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008068:	f043 0220 	orr.w	r2, r3, #32
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8249 	beq.w	8008510 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800808a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800809a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d005      	beq.n	80080d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d054      	beq.n	8008180 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 f81c 	bl	8009114 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d146      	bne.n	8008178 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3308      	adds	r3, #8
 8008112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800811a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800812e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1d9      	bne.n	80080ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813c:	2b00      	cmp	r3, #0
 800813e:	d017      	beq.n	8008170 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008146:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_UART_IRQHandler+0x2c0>)
 8008148:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008150:	4618      	mov	r0, r3
 8008152:	f7fc fc47 	bl	80049e4 <HAL_DMA_Abort_IT>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d019      	beq.n	8008190 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800816a:	4610      	mov	r0, r2
 800816c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816e:	e00f      	b.n	8008190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9e1 	bl	8008538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008176:	e00b      	b.n	8008190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f9dd 	bl	8008538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817e:	e007      	b.n	8008190 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f9d9 	bl	8008538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800818e:	e1bf      	b.n	8008510 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008190:	bf00      	nop
    return;
 8008192:	e1bd      	b.n	8008510 <HAL_UART_IRQHandler+0x634>
 8008194:	10000001 	.word	0x10000001
 8008198:	04000120 	.word	0x04000120
 800819c:	080091e1 	.word	0x080091e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	f040 8153 	bne.w	8008450 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 814c 	beq.w	8008450 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8145 	beq.w	8008450 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2210      	movs	r2, #16
 80081cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	f040 80bb 	bne.w	8008354 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 818f 	beq.w	8008514 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008200:	429a      	cmp	r2, r3
 8008202:	f080 8187 	bcs.w	8008514 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800820c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 8087 	bne.w	8008332 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800823c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800824e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008252:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800825a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1da      	bne.n	8008224 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800827e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008292:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008296:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800829a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e1      	bne.n	800826e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e3      	bne.n	80082aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008300:	f023 0310 	bic.w	r3, r3, #16
 8008304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008312:	65bb      	str	r3, [r7, #88]	; 0x58
 8008314:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e4      	bne.n	80082f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc fb00 	bl	8004932 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008344:	b29b      	uxth	r3, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	b29b      	uxth	r3, r3
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f8fd 	bl	800854c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008352:	e0df      	b.n	8008514 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008360:	b29b      	uxth	r3, r3
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80d1 	beq.w	8008518 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80cc 	beq.w	8008518 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
 80083a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e4      	bne.n	8008380 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	623b      	str	r3, [r7, #32]
   return(result);
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083cc:	f023 0301 	bic.w	r3, r3, #1
 80083d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083de:	633a      	str	r2, [r7, #48]	; 0x30
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e1      	bne.n	80083b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	60fb      	str	r3, [r7, #12]
   return(result);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	69b9      	ldr	r1, [r7, #24]
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	617b      	str	r3, [r7, #20]
   return(result);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e4      	bne.n	8008406 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f87f 	bl	800854c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800844e:	e063      	b.n	8008518 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00e      	beq.n	800847a <HAL_UART_IRQHandler+0x59e>
 800845c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fdb4 	bl	8009fe0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008478:	e051      	b.n	800851e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008482:	2b00      	cmp	r3, #0
 8008484:	d014      	beq.n	80084b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d03a      	beq.n	800851c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
    }
    return;
 80084ae:	e035      	b.n	800851c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <HAL_UART_IRQHandler+0x5f4>
 80084bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f841 	bl	8009550 <UART_EndTransmit_IT>
    return;
 80084ce:	e026      	b.n	800851e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <HAL_UART_IRQHandler+0x614>
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 fd8d 	bl	800a008 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084ee:	e016      	b.n	800851e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d010      	beq.n	800851e <HAL_UART_IRQHandler+0x642>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	2b00      	cmp	r3, #0
 8008502:	da0c      	bge.n	800851e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fd75 	bl	8009ff4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800850a:	e008      	b.n	800851e <HAL_UART_IRQHandler+0x642>
      return;
 800850c:	bf00      	nop
 800850e:	e006      	b.n	800851e <HAL_UART_IRQHandler+0x642>
    return;
 8008510:	bf00      	nop
 8008512:	e004      	b.n	800851e <HAL_UART_IRQHandler+0x642>
      return;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <HAL_UART_IRQHandler+0x642>
      return;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <HAL_UART_IRQHandler+0x642>
    return;
 800851c:	bf00      	nop
  }
}
 800851e:	37e8      	adds	r7, #232	; 0xe8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008568:	b08c      	sub	sp, #48	; 0x30
 800856a:	af00      	add	r7, sp, #0
 800856c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	431a      	orrs	r2, r3
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	431a      	orrs	r2, r3
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	4313      	orrs	r3, r2
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4baa      	ldr	r3, [pc, #680]	; (800883c <UART_SetConfig+0x2d8>)
 8008594:	4013      	ands	r3, r2
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800859c:	430b      	orrs	r3, r1
 800859e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a9f      	ldr	r2, [pc, #636]	; (8008840 <UART_SetConfig+0x2dc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085cc:	4313      	orrs	r3, r2
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	6812      	ldr	r2, [r2, #0]
 80085e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	f023 010f 	bic.w	r1, r3, #15
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a90      	ldr	r2, [pc, #576]	; (8008844 <UART_SetConfig+0x2e0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d125      	bne.n	8008654 <UART_SetConfig+0xf0>
 8008608:	4b8f      	ldr	r3, [pc, #572]	; (8008848 <UART_SetConfig+0x2e4>)
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b03      	cmp	r3, #3
 8008614:	d81a      	bhi.n	800864c <UART_SetConfig+0xe8>
 8008616:	a201      	add	r2, pc, #4	; (adr r2, 800861c <UART_SetConfig+0xb8>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800863d 	.word	0x0800863d
 8008624:	08008635 	.word	0x08008635
 8008628:	08008645 	.word	0x08008645
 800862c:	2301      	movs	r3, #1
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e116      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008634:	2302      	movs	r3, #2
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863a:	e112      	b.n	8008862 <UART_SetConfig+0x2fe>
 800863c:	2304      	movs	r3, #4
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008642:	e10e      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008644:	2308      	movs	r3, #8
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e10a      	b.n	8008862 <UART_SetConfig+0x2fe>
 800864c:	2310      	movs	r3, #16
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008652:	e106      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a7c      	ldr	r2, [pc, #496]	; (800884c <UART_SetConfig+0x2e8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d138      	bne.n	80086d0 <UART_SetConfig+0x16c>
 800865e:	4b7a      	ldr	r3, [pc, #488]	; (8008848 <UART_SetConfig+0x2e4>)
 8008660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008664:	f003 030c 	and.w	r3, r3, #12
 8008668:	2b0c      	cmp	r3, #12
 800866a:	d82d      	bhi.n	80086c8 <UART_SetConfig+0x164>
 800866c:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x110>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	080086a9 	.word	0x080086a9
 8008678:	080086c9 	.word	0x080086c9
 800867c:	080086c9 	.word	0x080086c9
 8008680:	080086c9 	.word	0x080086c9
 8008684:	080086b9 	.word	0x080086b9
 8008688:	080086c9 	.word	0x080086c9
 800868c:	080086c9 	.word	0x080086c9
 8008690:	080086c9 	.word	0x080086c9
 8008694:	080086b1 	.word	0x080086b1
 8008698:	080086c9 	.word	0x080086c9
 800869c:	080086c9 	.word	0x080086c9
 80086a0:	080086c9 	.word	0x080086c9
 80086a4:	080086c1 	.word	0x080086c1
 80086a8:	2300      	movs	r3, #0
 80086aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ae:	e0d8      	b.n	8008862 <UART_SetConfig+0x2fe>
 80086b0:	2302      	movs	r3, #2
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b6:	e0d4      	b.n	8008862 <UART_SetConfig+0x2fe>
 80086b8:	2304      	movs	r3, #4
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086be:	e0d0      	b.n	8008862 <UART_SetConfig+0x2fe>
 80086c0:	2308      	movs	r3, #8
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c6:	e0cc      	b.n	8008862 <UART_SetConfig+0x2fe>
 80086c8:	2310      	movs	r3, #16
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ce:	e0c8      	b.n	8008862 <UART_SetConfig+0x2fe>
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a5e      	ldr	r2, [pc, #376]	; (8008850 <UART_SetConfig+0x2ec>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d125      	bne.n	8008726 <UART_SetConfig+0x1c2>
 80086da:	4b5b      	ldr	r3, [pc, #364]	; (8008848 <UART_SetConfig+0x2e4>)
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d016      	beq.n	8008716 <UART_SetConfig+0x1b2>
 80086e8:	2b30      	cmp	r3, #48	; 0x30
 80086ea:	d818      	bhi.n	800871e <UART_SetConfig+0x1ba>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d00a      	beq.n	8008706 <UART_SetConfig+0x1a2>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d814      	bhi.n	800871e <UART_SetConfig+0x1ba>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <UART_SetConfig+0x19a>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d008      	beq.n	800870e <UART_SetConfig+0x1aa>
 80086fc:	e00f      	b.n	800871e <UART_SetConfig+0x1ba>
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008704:	e0ad      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008706:	2302      	movs	r3, #2
 8008708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870c:	e0a9      	b.n	8008862 <UART_SetConfig+0x2fe>
 800870e:	2304      	movs	r3, #4
 8008710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008714:	e0a5      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008716:	2308      	movs	r3, #8
 8008718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871c:	e0a1      	b.n	8008862 <UART_SetConfig+0x2fe>
 800871e:	2310      	movs	r3, #16
 8008720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008724:	e09d      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a4a      	ldr	r2, [pc, #296]	; (8008854 <UART_SetConfig+0x2f0>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d125      	bne.n	800877c <UART_SetConfig+0x218>
 8008730:	4b45      	ldr	r3, [pc, #276]	; (8008848 <UART_SetConfig+0x2e4>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800873a:	2bc0      	cmp	r3, #192	; 0xc0
 800873c:	d016      	beq.n	800876c <UART_SetConfig+0x208>
 800873e:	2bc0      	cmp	r3, #192	; 0xc0
 8008740:	d818      	bhi.n	8008774 <UART_SetConfig+0x210>
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d00a      	beq.n	800875c <UART_SetConfig+0x1f8>
 8008746:	2b80      	cmp	r3, #128	; 0x80
 8008748:	d814      	bhi.n	8008774 <UART_SetConfig+0x210>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <UART_SetConfig+0x1f0>
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d008      	beq.n	8008764 <UART_SetConfig+0x200>
 8008752:	e00f      	b.n	8008774 <UART_SetConfig+0x210>
 8008754:	2300      	movs	r3, #0
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800875a:	e082      	b.n	8008862 <UART_SetConfig+0x2fe>
 800875c:	2302      	movs	r3, #2
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008762:	e07e      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008764:	2304      	movs	r3, #4
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876a:	e07a      	b.n	8008862 <UART_SetConfig+0x2fe>
 800876c:	2308      	movs	r3, #8
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e076      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008774:	2310      	movs	r3, #16
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e072      	b.n	8008862 <UART_SetConfig+0x2fe>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a35      	ldr	r2, [pc, #212]	; (8008858 <UART_SetConfig+0x2f4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d12a      	bne.n	80087dc <UART_SetConfig+0x278>
 8008786:	4b30      	ldr	r3, [pc, #192]	; (8008848 <UART_SetConfig+0x2e4>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008794:	d01a      	beq.n	80087cc <UART_SetConfig+0x268>
 8008796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800879a:	d81b      	bhi.n	80087d4 <UART_SetConfig+0x270>
 800879c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a0:	d00c      	beq.n	80087bc <UART_SetConfig+0x258>
 80087a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a6:	d815      	bhi.n	80087d4 <UART_SetConfig+0x270>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <UART_SetConfig+0x250>
 80087ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b0:	d008      	beq.n	80087c4 <UART_SetConfig+0x260>
 80087b2:	e00f      	b.n	80087d4 <UART_SetConfig+0x270>
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e052      	b.n	8008862 <UART_SetConfig+0x2fe>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c2:	e04e      	b.n	8008862 <UART_SetConfig+0x2fe>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ca:	e04a      	b.n	8008862 <UART_SetConfig+0x2fe>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d2:	e046      	b.n	8008862 <UART_SetConfig+0x2fe>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087da:	e042      	b.n	8008862 <UART_SetConfig+0x2fe>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a17      	ldr	r2, [pc, #92]	; (8008840 <UART_SetConfig+0x2dc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d13a      	bne.n	800885c <UART_SetConfig+0x2f8>
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <UART_SetConfig+0x2e4>)
 80087e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087f4:	d01a      	beq.n	800882c <UART_SetConfig+0x2c8>
 80087f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087fa:	d81b      	bhi.n	8008834 <UART_SetConfig+0x2d0>
 80087fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008800:	d00c      	beq.n	800881c <UART_SetConfig+0x2b8>
 8008802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008806:	d815      	bhi.n	8008834 <UART_SetConfig+0x2d0>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <UART_SetConfig+0x2b0>
 800880c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008810:	d008      	beq.n	8008824 <UART_SetConfig+0x2c0>
 8008812:	e00f      	b.n	8008834 <UART_SetConfig+0x2d0>
 8008814:	2300      	movs	r3, #0
 8008816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881a:	e022      	b.n	8008862 <UART_SetConfig+0x2fe>
 800881c:	2302      	movs	r3, #2
 800881e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008822:	e01e      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800882a:	e01a      	b.n	8008862 <UART_SetConfig+0x2fe>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008832:	e016      	b.n	8008862 <UART_SetConfig+0x2fe>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883a:	e012      	b.n	8008862 <UART_SetConfig+0x2fe>
 800883c:	cfff69f3 	.word	0xcfff69f3
 8008840:	40008000 	.word	0x40008000
 8008844:	40013800 	.word	0x40013800
 8008848:	40021000 	.word	0x40021000
 800884c:	40004400 	.word	0x40004400
 8008850:	40004800 	.word	0x40004800
 8008854:	40004c00 	.word	0x40004c00
 8008858:	40005000 	.word	0x40005000
 800885c:	2310      	movs	r3, #16
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4aae      	ldr	r2, [pc, #696]	; (8008b20 <UART_SetConfig+0x5bc>)
 8008868:	4293      	cmp	r3, r2
 800886a:	f040 8097 	bne.w	800899c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800886e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008872:	2b08      	cmp	r3, #8
 8008874:	d823      	bhi.n	80088be <UART_SetConfig+0x35a>
 8008876:	a201      	add	r2, pc, #4	; (adr r2, 800887c <UART_SetConfig+0x318>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088bf 	.word	0x080088bf
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088bf 	.word	0x080088bf
 800888c:	080088af 	.word	0x080088af
 8008890:	080088bf 	.word	0x080088bf
 8008894:	080088bf 	.word	0x080088bf
 8008898:	080088bf 	.word	0x080088bf
 800889c:	080088b7 	.word	0x080088b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088a0:	f7fd f992 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80088a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088a6:	e010      	b.n	80088ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088a8:	4b9e      	ldr	r3, [pc, #632]	; (8008b24 <UART_SetConfig+0x5c0>)
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088ac:	e00d      	b.n	80088ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ae:	f7fd f91d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088b4:	e009      	b.n	80088ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088bc:	e005      	b.n	80088ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 8130 	beq.w	8008b32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	4a94      	ldr	r2, [pc, #592]	; (8008b28 <UART_SetConfig+0x5c4>)
 80088d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088dc:	461a      	mov	r2, r3
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4413      	add	r3, r2
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d305      	bcc.n	8008902 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d903      	bls.n	800890a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008908:	e113      	b.n	8008b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	2200      	movs	r2, #0
 800890e:	60bb      	str	r3, [r7, #8]
 8008910:	60fa      	str	r2, [r7, #12]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	4a84      	ldr	r2, [pc, #528]	; (8008b28 <UART_SetConfig+0x5c4>)
 8008918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800891c:	b29b      	uxth	r3, r3
 800891e:	2200      	movs	r2, #0
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800892c:	f7f8 f892 	bl	8000a54 <__aeabi_uldivmod>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	020b      	lsls	r3, r1, #8
 8008942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008946:	0202      	lsls	r2, r0, #8
 8008948:	6979      	ldr	r1, [r7, #20]
 800894a:	6849      	ldr	r1, [r1, #4]
 800894c:	0849      	lsrs	r1, r1, #1
 800894e:	2000      	movs	r0, #0
 8008950:	460c      	mov	r4, r1
 8008952:	4605      	mov	r5, r0
 8008954:	eb12 0804 	adds.w	r8, r2, r4
 8008958:	eb43 0905 	adc.w	r9, r3, r5
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	469a      	mov	sl, r3
 8008964:	4693      	mov	fp, r2
 8008966:	4652      	mov	r2, sl
 8008968:	465b      	mov	r3, fp
 800896a:	4640      	mov	r0, r8
 800896c:	4649      	mov	r1, r9
 800896e:	f7f8 f871 	bl	8000a54 <__aeabi_uldivmod>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4613      	mov	r3, r2
 8008978:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008980:	d308      	bcc.n	8008994 <UART_SetConfig+0x430>
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008988:	d204      	bcs.n	8008994 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a3a      	ldr	r2, [r7, #32]
 8008990:	60da      	str	r2, [r3, #12]
 8008992:	e0ce      	b.n	8008b32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800899a:	e0ca      	b.n	8008b32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a4:	d166      	bne.n	8008a74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80089a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d827      	bhi.n	80089fe <UART_SetConfig+0x49a>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <UART_SetConfig+0x450>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089d9 	.word	0x080089d9
 80089b8:	080089e1 	.word	0x080089e1
 80089bc:	080089e9 	.word	0x080089e9
 80089c0:	080089ff 	.word	0x080089ff
 80089c4:	080089ef 	.word	0x080089ef
 80089c8:	080089ff 	.word	0x080089ff
 80089cc:	080089ff 	.word	0x080089ff
 80089d0:	080089ff 	.word	0x080089ff
 80089d4:	080089f7 	.word	0x080089f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d8:	f7fd f8f6 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80089dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089de:	e014      	b.n	8008a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e0:	f7fd f908 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089e6:	e010      	b.n	8008a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e8:	4b4e      	ldr	r3, [pc, #312]	; (8008b24 <UART_SetConfig+0x5c0>)
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089ec:	e00d      	b.n	8008a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ee:	f7fd f87d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80089f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f4:	e009      	b.n	8008a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089fc:	e005      	b.n	8008a0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8090 	beq.w	8008b32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	4a44      	ldr	r2, [pc, #272]	; (8008b28 <UART_SetConfig+0x5c4>)
 8008a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a24:	005a      	lsls	r2, r3, #1
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	441a      	add	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	2b0f      	cmp	r3, #15
 8008a3c:	d916      	bls.n	8008a6c <UART_SetConfig+0x508>
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d212      	bcs.n	8008a6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f023 030f 	bic.w	r3, r3, #15
 8008a4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	8bfb      	ldrh	r3, [r7, #30]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	8bfa      	ldrh	r2, [r7, #30]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	e062      	b.n	8008b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a72:	e05e      	b.n	8008b32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d828      	bhi.n	8008ace <UART_SetConfig+0x56a>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x520>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008abf 	.word	0x08008abf
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008acf 	.word	0x08008acf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fd f88e 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8008aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008aae:	e014      	b.n	8008ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab0:	f7fd f8a0 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 8008ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ab6:	e010      	b.n	8008ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <UART_SetConfig+0x5c0>)
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008abc:	e00d      	b.n	8008ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fd f815 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ac4:	e009      	b.n	8008ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008acc:	e005      	b.n	8008ada <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d028      	beq.n	8008b32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <UART_SetConfig+0x5c4>)
 8008ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	441a      	add	r2, r3
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	2b0f      	cmp	r3, #15
 8008b08:	d910      	bls.n	8008b2c <UART_SetConfig+0x5c8>
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b10:	d20c      	bcs.n	8008b2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60da      	str	r2, [r3, #12]
 8008b1c:	e009      	b.n	8008b32 <UART_SetConfig+0x5ce>
 8008b1e:	bf00      	nop
 8008b20:	40008000 	.word	0x40008000
 8008b24:	00f42400 	.word	0x00f42400
 8008b28:	0800a318 	.word	0x0800a318
      }
      else
      {
        ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2200      	movs	r2, #0
 8008b46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3730      	adds	r7, #48	; 0x30
 8008b56:	46bd      	mov	sp, r7
 8008b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01a      	beq.n	8008c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c5a:	d10a      	bne.n	8008c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b098      	sub	sp, #96	; 0x60
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cb0:	f7f9 fca8 	bl	8002604 <HAL_GetTick>
 8008cb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d12f      	bne.n	8008d24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f88e 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d022      	beq.n	8008d24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e6      	bne.n	8008cde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e063      	b.n	8008dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d149      	bne.n	8008dc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f857 	bl	8008df4 <UART_WaitOnFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d03c      	beq.n	8008dc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	623b      	str	r3, [r7, #32]
   return(result);
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e6      	bne.n	8008d4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d9e:	61fa      	str	r2, [r7, #28]
 8008da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	69b9      	ldr	r1, [r7, #24]
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	617b      	str	r3, [r7, #20]
   return(result);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e5      	bne.n	8008d7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e012      	b.n	8008dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3758      	adds	r7, #88	; 0x58
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	4613      	mov	r3, r2
 8008e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e04:	e04f      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d04b      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0e:	f7f9 fbf9 	bl	8002604 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e04e      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d037      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b80      	cmp	r3, #128	; 0x80
 8008e3a:	d034      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d031      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d110      	bne.n	8008e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2208      	movs	r2, #8
 8008e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f000 f95b 	bl	8009114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2208      	movs	r2, #8
 8008e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e029      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e80:	d111      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f941 	bl	8009114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e00f      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69da      	ldr	r2, [r3, #28]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2301      	moveq	r3, #1
 8008eb8:	2300      	movne	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d0a0      	beq.n	8008e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b0a3      	sub	sp, #140	; 0x8c
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	88fa      	ldrh	r2, [r7, #6]
 8008ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	88fa      	ldrh	r2, [r7, #6]
 8008ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f02:	d10e      	bne.n	8008f22 <UART_Start_Receive_IT+0x52>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <UART_Start_Receive_IT+0x48>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f16:	e02d      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	22ff      	movs	r2, #255	; 0xff
 8008f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f20:	e028      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10d      	bne.n	8008f46 <UART_Start_Receive_IT+0x76>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <UART_Start_Receive_IT+0x6c>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	22ff      	movs	r2, #255	; 0xff
 8008f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f3a:	e01b      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	227f      	movs	r2, #127	; 0x7f
 8008f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f44:	e016      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f4e:	d10d      	bne.n	8008f6c <UART_Start_Receive_IT+0x9c>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <UART_Start_Receive_IT+0x92>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	227f      	movs	r2, #127	; 0x7f
 8008f5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f60:	e008      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	223f      	movs	r2, #63	; 0x3f
 8008f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f6a:	e003      	b.n	8008f74 <UART_Start_Receive_IT+0xa4>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2222      	movs	r2, #34	; 0x22
 8008f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3308      	adds	r3, #8
 8008f8a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fa8:	673a      	str	r2, [r7, #112]	; 0x70
 8008faa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e3      	bne.n	8008f84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc4:	d14f      	bne.n	8009066 <UART_Start_Receive_IT+0x196>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d349      	bcc.n	8009066 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fda:	d107      	bne.n	8008fec <UART_Start_Receive_IT+0x11c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a47      	ldr	r2, [pc, #284]	; (8009104 <UART_Start_Receive_IT+0x234>)
 8008fe8:	675a      	str	r2, [r3, #116]	; 0x74
 8008fea:	e002      	b.n	8008ff2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a46      	ldr	r2, [pc, #280]	; (8009108 <UART_Start_Receive_IT+0x238>)
 8008ff0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01a      	beq.n	8009030 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800901c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800901e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009022:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800902a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e4      	bne.n	8008ffa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009050:	64ba      	str	r2, [r7, #72]	; 0x48
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800905e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e5      	bne.n	8009030 <UART_Start_Receive_IT+0x160>
 8009064:	e046      	b.n	80090f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906e:	d107      	bne.n	8009080 <UART_Start_Receive_IT+0x1b0>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d103      	bne.n	8009080 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a24      	ldr	r2, [pc, #144]	; (800910c <UART_Start_Receive_IT+0x23c>)
 800907c:	675a      	str	r2, [r3, #116]	; 0x74
 800907e:	e002      	b.n	8009086 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4a23      	ldr	r2, [pc, #140]	; (8009110 <UART_Start_Receive_IT+0x240>)
 8009084:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d019      	beq.n	80090c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090a2:	677b      	str	r3, [r7, #116]	; 0x74
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
 80090ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e6      	bne.n	800908e <UART_Start_Receive_IT+0x1be>
 80090c0:	e018      	b.n	80090f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f043 0320 	orr.w	r3, r3, #32
 80090d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e0:	623b      	str	r3, [r7, #32]
 80090e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	378c      	adds	r7, #140	; 0x8c
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	08009c79 	.word	0x08009c79
 8009108:	08009919 	.word	0x08009919
 800910c:	08009761 	.word	0x08009761
 8009110:	080095a9 	.word	0x080095a9

08009114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b095      	sub	sp, #84	; 0x54
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913a:	643b      	str	r3, [r7, #64]	; 0x40
 800913c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e6      	bne.n	800911c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	61fb      	str	r3, [r7, #28]
   return(result);
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	64bb      	str	r3, [r7, #72]	; 0x48
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3308      	adds	r3, #8
 8009170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e3      	bne.n	800914e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800918a:	2b01      	cmp	r3, #1
 800918c:	d118      	bne.n	80091c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	60bb      	str	r3, [r7, #8]
   return(result);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f023 0310 	bic.w	r3, r3, #16
 80091a2:	647b      	str	r3, [r7, #68]	; 0x44
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6979      	ldr	r1, [r7, #20]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e6      	bne.n	800918e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80091d4:	bf00      	nop
 80091d6:	3754      	adds	r7, #84	; 0x54
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff f99a 	bl	8008538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b08f      	sub	sp, #60	; 0x3c
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921a:	2b21      	cmp	r3, #33	; 0x21
 800921c:	d14c      	bne.n	80092b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d132      	bne.n	8009290 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	61fb      	str	r3, [r7, #28]
   return(result);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800923e:	637b      	str	r3, [r7, #52]	; 0x34
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800924e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e6      	bne.n	800922a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	60bb      	str	r3, [r7, #8]
   return(result);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	61bb      	str	r3, [r7, #24]
 800927c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	6979      	ldr	r1, [r7, #20]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	613b      	str	r3, [r7, #16]
   return(result);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e6      	bne.n	800925c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800928e:	e013      	b.n	80092b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80092b8:	bf00      	nop
 80092ba:	373c      	adds	r7, #60	; 0x3c
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b091      	sub	sp, #68	; 0x44
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d2:	2b21      	cmp	r3, #33	; 0x21
 80092d4:	d151      	bne.n	800937a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d132      	bne.n	8009348 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	e853 3f00 	ldrex	r3, [r3]
 80092ee:	623b      	str	r3, [r7, #32]
   return(result);
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	633b      	str	r3, [r7, #48]	; 0x30
 8009302:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009308:	e841 2300 	strex	r3, r2, [r1]
 800930c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e6      	bne.n	80092e2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	60fb      	str	r3, [r7, #12]
   return(result);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	69b9      	ldr	r1, [r7, #24]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	617b      	str	r3, [r7, #20]
   return(result);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e6      	bne.n	8009314 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009346:	e018      	b.n	800937a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800934e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800935c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009362:	1c9a      	adds	r2, r3, #2
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800937a:	bf00      	nop
 800937c:	3744      	adds	r7, #68	; 0x44
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009386:	b480      	push	{r7}
 8009388:	b091      	sub	sp, #68	; 0x44
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	2b21      	cmp	r3, #33	; 0x21
 8009396:	d160      	bne.n	800945a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800939e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80093a0:	e057      	b.n	8009452 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d133      	bne.n	8009416 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	623b      	str	r3, [r7, #32]
   return(result);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80093c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ce:	633a      	str	r2, [r7, #48]	; 0x30
 80093d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e5      	bne.n	80093ae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f6:	637b      	str	r3, [r7, #52]	; 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	617b      	str	r3, [r7, #20]
   return(result);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e6      	bne.n	80093e2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009414:	e021      	b.n	800945a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009420:	2b00      	cmp	r3, #0
 8009422:	d013      	beq.n	800944c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800944c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800944e:	3b01      	subs	r3, #1
 8009450:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009452:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1a4      	bne.n	80093a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009458:	e7ff      	b.n	800945a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800945a:	bf00      	nop
 800945c:	3744      	adds	r7, #68	; 0x44
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009466:	b480      	push	{r7}
 8009468:	b091      	sub	sp, #68	; 0x44
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009474:	2b21      	cmp	r3, #33	; 0x21
 8009476:	d165      	bne.n	8009544 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800947e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009480:	e05c      	b.n	800953c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d133      	bne.n	80094f6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	61fb      	str	r3, [r7, #28]
   return(result);
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e5      	bne.n	800948e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d6:	633b      	str	r3, [r7, #48]	; 0x30
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6979      	ldr	r1, [r7, #20]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	613b      	str	r3, [r7, #16]
   return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80094f4:	e026      	b.n	8009544 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009500:	2b00      	cmp	r3, #0
 8009502:	d018      	beq.n	8009536 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009518:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951e:	1c9a      	adds	r2, r3, #2
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009536:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009538:	3b01      	subs	r3, #1
 800953a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800953c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800953e:	2b00      	cmp	r3, #0
 8009540:	d19f      	bne.n	8009482 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009542:	e7ff      	b.n	8009544 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009544:	bf00      	nop
 8009546:	3744      	adds	r7, #68	; 0x44
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	60bb      	str	r3, [r7, #8]
   return(result);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6979      	ldr	r1, [r7, #20]
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	613b      	str	r3, [r7, #16]
   return(result);
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e6      	bne.n	8009558 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fe ffc3 	bl	8008524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800959e:	bf00      	nop
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b09c      	sub	sp, #112	; 0x70
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c0:	2b22      	cmp	r3, #34	; 0x22
 80095c2:	f040 80be 	bne.w	8009742 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80095d4:	b2d9      	uxtb	r1, r3
 80095d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e0:	400a      	ands	r2, r1
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80a1 	bne.w	8009752 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009624:	66bb      	str	r3, [r7, #104]	; 0x68
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800962e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009630:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800963c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e6      	bne.n	8009610 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009654:	f023 0301 	bic.w	r3, r3, #1
 8009658:	667b      	str	r3, [r7, #100]	; 0x64
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009662:	647a      	str	r2, [r7, #68]	; 0x44
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e5      	bne.n	8009642 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a33      	ldr	r2, [pc, #204]	; (800975c <UART_RxISR_8BIT+0x1b4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d01f      	beq.n	80096d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d018      	beq.n	80096d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	623b      	str	r3, [r7, #32]
   return(result);
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096b6:	663b      	str	r3, [r7, #96]	; 0x60
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	461a      	mov	r2, r3
 80096be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c0:	633b      	str	r3, [r7, #48]	; 0x30
 80096c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e6      	bne.n	80096a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d12e      	bne.n	800973a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0310 	bic.w	r3, r3, #16
 80096f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009700:	61fb      	str	r3, [r7, #28]
 8009702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	69b9      	ldr	r1, [r7, #24]
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	617b      	str	r3, [r7, #20]
   return(result);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0310 	and.w	r3, r3, #16
 800971e:	2b10      	cmp	r3, #16
 8009720:	d103      	bne.n	800972a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2210      	movs	r2, #16
 8009728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7fe ff0a 	bl	800854c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009738:	e00b      	b.n	8009752 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7f8 fc06 	bl	8001f4c <HAL_UART_RxCpltCallback>
}
 8009740:	e007      	b.n	8009752 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699a      	ldr	r2, [r3, #24]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f042 0208 	orr.w	r2, r2, #8
 8009750:	619a      	str	r2, [r3, #24]
}
 8009752:	bf00      	nop
 8009754:	3770      	adds	r7, #112	; 0x70
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40008000 	.word	0x40008000

08009760 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b09c      	sub	sp, #112	; 0x70
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800976e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009778:	2b22      	cmp	r3, #34	; 0x22
 800977a:	f040 80be 	bne.w	80098fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800978e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009792:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009796:	4013      	ands	r3, r2
 8009798:	b29a      	uxth	r2, r3
 800979a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800979c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	1c9a      	adds	r2, r3, #2
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 80a1 	bne.w	800990a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097dc:	667b      	str	r3, [r7, #100]	; 0x64
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e6:	657b      	str	r3, [r7, #84]	; 0x54
 80097e8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e6      	bne.n	80097c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	663b      	str	r3, [r7, #96]	; 0x60
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800981a:	643a      	str	r2, [r7, #64]	; 0x40
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e5      	bne.n	80097fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a33      	ldr	r2, [pc, #204]	; (8009914 <UART_RxISR_16BIT+0x1b4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d01f      	beq.n	800988c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d018      	beq.n	800988c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	61fb      	str	r3, [r7, #28]
   return(result);
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800986e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800987a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800987e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e6      	bne.n	800985a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d12e      	bne.n	80098f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6979      	ldr	r1, [r7, #20]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	613b      	str	r3, [r7, #16]
   return(result);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e6      	bne.n	800989a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f003 0310 	and.w	r3, r3, #16
 80098d6:	2b10      	cmp	r3, #16
 80098d8:	d103      	bne.n	80098e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2210      	movs	r2, #16
 80098e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7fe fe2e 	bl	800854c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098f0:	e00b      	b.n	800990a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7f8 fb2a 	bl	8001f4c <HAL_UART_RxCpltCallback>
}
 80098f8:	e007      	b.n	800990a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0208 	orr.w	r2, r2, #8
 8009908:	619a      	str	r2, [r3, #24]
}
 800990a:	bf00      	nop
 800990c:	3770      	adds	r7, #112	; 0x70
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40008000 	.word	0x40008000

08009918 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b0ac      	sub	sp, #176	; 0xb0
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009926:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994e:	2b22      	cmp	r3, #34	; 0x22
 8009950:	f040 8182 	bne.w	8009c58 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800995a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800995e:	e125      	b.n	8009bac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800996a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997a:	400a      	ands	r2, r1
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b01      	subs	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099aa:	f003 0307 	and.w	r3, r3, #7
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d053      	beq.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d011      	beq.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80099be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00b      	beq.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2201      	movs	r2, #1
 80099d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d8:	f043 0201 	orr.w	r2, r3, #1
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d011      	beq.n	8009a12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2202      	movs	r2, #2
 8009a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a08:	f043 0204 	orr.w	r2, r3, #4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d011      	beq.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00b      	beq.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2204      	movs	r2, #4
 8009a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a38:	f043 0202 	orr.w	r2, r3, #2
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d006      	beq.n	8009a5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7fe fd73 	bl	8008538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f040 80a2 	bne.w	8009bac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a8c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009a90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e4      	bne.n	8009a68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	f023 0301 	bic.w	r3, r3, #1
 8009ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ac6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009ac8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009acc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e1      	bne.n	8009a9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a5f      	ldr	r2, [pc, #380]	; (8009c70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d021      	beq.n	8009b3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01a      	beq.n	8009b3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0e:	e853 3f00 	ldrex	r3, [r3]
 8009b12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b28:	657b      	str	r3, [r7, #84]	; 0x54
 8009b2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e4      	bne.n	8009b06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d130      	bne.n	8009ba6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b52:	e853 3f00 	ldrex	r3, [r3]
 8009b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	f023 0310 	bic.w	r3, r3, #16
 8009b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e4      	bne.n	8009b4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d103      	bne.n	8009b96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2210      	movs	r2, #16
 8009b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7fe fcd4 	bl	800854c <HAL_UARTEx_RxEventCallback>
 8009ba4:	e002      	b.n	8009bac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7f8 f9d0 	bl	8001f4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d006      	beq.n	8009bc2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb8:	f003 0320 	and.w	r3, r3, #32
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f47f aecf 	bne.w	8009960 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d049      	beq.n	8009c68 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bda:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d242      	bcs.n	8009c68 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3308      	adds	r3, #8
 8009c02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e3      	bne.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e4      	bne.n	8009c20 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c56:	e007      	b.n	8009c68 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0208 	orr.w	r2, r2, #8
 8009c66:	619a      	str	r2, [r3, #24]
}
 8009c68:	bf00      	nop
 8009c6a:	37b0      	adds	r7, #176	; 0xb0
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	40008000 	.word	0x40008000
 8009c74:	080095a9 	.word	0x080095a9

08009c78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b0ae      	sub	sp, #184	; 0xb8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c86:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cae:	2b22      	cmp	r3, #34	; 0x22
 8009cb0:	f040 8186 	bne.w	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cba:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cbe:	e129      	b.n	8009f14 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cd2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009cd6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009cda:	4013      	ands	r3, r2
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce8:	1c9a      	adds	r2, r3, #2
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d053      	beq.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d011      	beq.n	8009d46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2201      	movs	r2, #1
 8009d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3c:	f043 0201 	orr.w	r2, r3, #1
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d011      	beq.n	8009d76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2202      	movs	r2, #2
 8009d64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6c:	f043 0204 	orr.w	r2, r3, #4
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d011      	beq.n	8009da6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2204      	movs	r2, #4
 8009d94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9c:	f043 0202 	orr.w	r2, r3, #2
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7fe fbc1 	bl	8008538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 80a4 	bne.w	8009f14 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009df2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e2      	bne.n	8009dcc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3308      	adds	r3, #8
 8009e2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e1      	bne.n	8009e06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a5f      	ldr	r2, [pc, #380]	; (8009fd8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d021      	beq.n	8009ea4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d01a      	beq.n	8009ea4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e4      	bne.n	8009e6e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d130      	bne.n	8009f0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	f023 0310 	bic.w	r3, r3, #16
 8009ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e4      	bne.n	8009eb2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	f003 0310 	and.w	r3, r3, #16
 8009ef2:	2b10      	cmp	r3, #16
 8009ef4:	d103      	bne.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2210      	movs	r2, #16
 8009efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7fe fb20 	bl	800854c <HAL_UARTEx_RxEventCallback>
 8009f0c:	e002      	b.n	8009f14 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 f81c 	bl	8001f4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d006      	beq.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f47f aecb 	bne.w	8009cc0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d049      	beq.n	8009fd0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d242      	bcs.n	8009fd0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	623b      	str	r3, [r7, #32]
   return(result);
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e3      	bne.n	8009f4a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009f86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f043 0320 	orr.w	r3, r3, #32
 8009f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	69b9      	ldr	r1, [r7, #24]
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e4      	bne.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fbe:	e007      	b.n	8009fd0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0208 	orr.w	r2, r2, #8
 8009fce:	619a      	str	r2, [r3, #24]
}
 8009fd0:	bf00      	nop
 8009fd2:	37b8      	adds	r7, #184	; 0xb8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40008000 	.word	0x40008000
 8009fdc:	08009761 	.word	0x08009761

08009fe0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_UARTEx_DisableFifoMode+0x16>
 800a02e:	2302      	movs	r3, #2
 800a030:	e027      	b.n	800a082 <HAL_UARTEx_DisableFifoMode+0x66>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2224      	movs	r2, #36	; 0x24
 800a03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a060:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e02d      	b.n	800a102 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2224      	movs	r2, #36	; 0x24
 800a0b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f022 0201 	bic.w	r2, r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f850 	bl	800a188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a11e:	2302      	movs	r3, #2
 800a120:	e02d      	b.n	800a17e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2224      	movs	r2, #36	; 0x24
 800a12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0201 	bic.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f812 	bl	800a188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a194:	2b00      	cmp	r3, #0
 800a196:	d108      	bne.n	800a1aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1a8:	e031      	b.n	800a20e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	0e5b      	lsrs	r3, r3, #25
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	0f5b      	lsrs	r3, r3, #29
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0307 	and.w	r3, r3, #7
 800a1d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	7b3a      	ldrb	r2, [r7, #12]
 800a1d6:	4911      	ldr	r1, [pc, #68]	; (800a21c <UARTEx_SetNbDataToProcess+0x94>)
 800a1d8:	5c8a      	ldrb	r2, [r1, r2]
 800a1da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1de:	7b3a      	ldrb	r2, [r7, #12]
 800a1e0:	490f      	ldr	r1, [pc, #60]	; (800a220 <UARTEx_SetNbDataToProcess+0x98>)
 800a1e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	7b7a      	ldrb	r2, [r7, #13]
 800a1f4:	4909      	ldr	r1, [pc, #36]	; (800a21c <UARTEx_SetNbDataToProcess+0x94>)
 800a1f6:	5c8a      	ldrb	r2, [r1, r2]
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1fc:	7b7a      	ldrb	r2, [r7, #13]
 800a1fe:	4908      	ldr	r1, [pc, #32]	; (800a220 <UARTEx_SetNbDataToProcess+0x98>)
 800a200:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a202:	fb93 f3f2 	sdiv	r3, r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	0800a330 	.word	0x0800a330
 800a220:	0800a338 	.word	0x0800a338

0800a224 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	ed93 7a06 	vldr	s14, [r3, #24]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	edd3 7a07 	vldr	s15, [r3, #28]
 800a23a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	edd3 7a08 	vldr	s15, [r3, #32]
 800a244:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	edd3 7a06 	vldr	s15, [r3, #24]
 800a254:	eeb1 7a67 	vneg.f32	s14, s15
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	edd3 7a08 	vldr	s15, [r3, #32]
 800a25e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a262:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1a      	ldr	r2, [r3, #32]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d006      	beq.n	800a288 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	330c      	adds	r3, #12
 800a27e:	220c      	movs	r2, #12
 800a280:	2100      	movs	r1, #0
 800a282:	4618      	mov	r0, r3
 800a284:	f000 f804 	bl	800a290 <memset>
  }

}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <memset>:
 800a290:	4402      	add	r2, r0
 800a292:	4603      	mov	r3, r0
 800a294:	4293      	cmp	r3, r2
 800a296:	d100      	bne.n	800a29a <memset+0xa>
 800a298:	4770      	bx	lr
 800a29a:	f803 1b01 	strb.w	r1, [r3], #1
 800a29e:	e7f9      	b.n	800a294 <memset+0x4>

0800a2a0 <__libc_init_array>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	4d0d      	ldr	r5, [pc, #52]	; (800a2d8 <__libc_init_array+0x38>)
 800a2a4:	4c0d      	ldr	r4, [pc, #52]	; (800a2dc <__libc_init_array+0x3c>)
 800a2a6:	1b64      	subs	r4, r4, r5
 800a2a8:	10a4      	asrs	r4, r4, #2
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	42a6      	cmp	r6, r4
 800a2ae:	d109      	bne.n	800a2c4 <__libc_init_array+0x24>
 800a2b0:	4d0b      	ldr	r5, [pc, #44]	; (800a2e0 <__libc_init_array+0x40>)
 800a2b2:	4c0c      	ldr	r4, [pc, #48]	; (800a2e4 <__libc_init_array+0x44>)
 800a2b4:	f000 f818 	bl	800a2e8 <_init>
 800a2b8:	1b64      	subs	r4, r4, r5
 800a2ba:	10a4      	asrs	r4, r4, #2
 800a2bc:	2600      	movs	r6, #0
 800a2be:	42a6      	cmp	r6, r4
 800a2c0:	d105      	bne.n	800a2ce <__libc_init_array+0x2e>
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c8:	4798      	blx	r3
 800a2ca:	3601      	adds	r6, #1
 800a2cc:	e7ee      	b.n	800a2ac <__libc_init_array+0xc>
 800a2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d2:	4798      	blx	r3
 800a2d4:	3601      	adds	r6, #1
 800a2d6:	e7f2      	b.n	800a2be <__libc_init_array+0x1e>
 800a2d8:	0800a348 	.word	0x0800a348
 800a2dc:	0800a348 	.word	0x0800a348
 800a2e0:	0800a348 	.word	0x0800a348
 800a2e4:	0800a34c 	.word	0x0800a34c

0800a2e8 <_init>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr

0800a2f4 <_fini>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr
